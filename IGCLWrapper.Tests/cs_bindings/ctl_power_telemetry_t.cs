//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace IGCLWrapper {

public class ctl_power_telemetry_t : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ctl_power_telemetry_t(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ctl_power_telemetry_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ctl_power_telemetry_t obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ctl_power_telemetry_t() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IGCLPINVOKE.delete_ctl_power_telemetry_t(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint Size {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_Size_set(swigCPtr, value);
    } 
    get {
      uint ret = IGCLPINVOKE.ctl_power_telemetry_t_Size_get(swigCPtr);
      return ret;
    } 
  }

  public byte Version {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_Version_set(swigCPtr, value);
    } 
    get {
      byte ret = IGCLPINVOKE.ctl_power_telemetry_t_Version_get(swigCPtr);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t timeStamp {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_timeStamp_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_timeStamp_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t gpuEnergyCounter {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuEnergyCounter_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_gpuEnergyCounter_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t gpuVoltage {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuVoltage_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_gpuVoltage_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t gpuCurrentClockFrequency {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuCurrentClockFrequency_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_gpuCurrentClockFrequency_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t gpuCurrentTemperature {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuCurrentTemperature_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_gpuCurrentTemperature_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t globalActivityCounter {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_globalActivityCounter_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_globalActivityCounter_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t renderComputeActivityCounter {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_renderComputeActivityCounter_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_renderComputeActivityCounter_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t mediaActivityCounter {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_mediaActivityCounter_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_mediaActivityCounter_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public bool gpuPowerLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuPowerLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_gpuPowerLimited_get(swigCPtr);
      return ret;
    } 
  }

  public bool gpuTemperatureLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuTemperatureLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_gpuTemperatureLimited_get(swigCPtr);
      return ret;
    } 
  }

  public bool gpuCurrentLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuCurrentLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_gpuCurrentLimited_get(swigCPtr);
      return ret;
    } 
  }

  public bool gpuVoltageLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuVoltageLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_gpuVoltageLimited_get(swigCPtr);
      return ret;
    } 
  }

  public bool gpuUtilizationLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuUtilizationLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_gpuUtilizationLimited_get(swigCPtr);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramEnergyCounter {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramEnergyCounter_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramEnergyCounter_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramVoltage {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramVoltage_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramVoltage_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramCurrentClockFrequency {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramCurrentClockFrequency_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramCurrentClockFrequency_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramCurrentEffectiveFrequency {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramCurrentEffectiveFrequency_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramCurrentEffectiveFrequency_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramReadBandwidthCounter {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramReadBandwidthCounter_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramReadBandwidthCounter_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramWriteBandwidthCounter {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramWriteBandwidthCounter_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramWriteBandwidthCounter_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramCurrentTemperature {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramCurrentTemperature_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramCurrentTemperature_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public bool vramPowerLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramPowerLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_vramPowerLimited_get(swigCPtr);
      return ret;
    } 
  }

  public bool vramTemperatureLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramTemperatureLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_vramTemperatureLimited_get(swigCPtr);
      return ret;
    } 
  }

  public bool vramCurrentLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramCurrentLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_vramCurrentLimited_get(swigCPtr);
      return ret;
    } 
  }

  public bool vramVoltageLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramVoltageLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_vramVoltageLimited_get(swigCPtr);
      return ret;
    } 
  }

  public bool vramUtilizationLimited {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramUtilizationLimited_set(swigCPtr, value);
    } 
    get {
      bool ret = IGCLPINVOKE.ctl_power_telemetry_t_vramUtilizationLimited_get(swigCPtr);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t totalCardEnergyCounter {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_totalCardEnergyCounter_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_totalCardEnergyCounter_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_psu_info_t psu {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_psu_set(swigCPtr, ctl_psu_info_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_psu_get(swigCPtr);
      ctl_psu_info_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_psu_info_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t fanSpeed {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_fanSpeed_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_fanSpeed_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t gpuVrTemp {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuVrTemp_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_gpuVrTemp_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramVrTemp {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramVrTemp_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramVrTemp_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t saVrTemp {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_saVrTemp_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_saVrTemp_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t gpuEffectiveClock {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuEffectiveClock_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_gpuEffectiveClock_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t gpuOverVoltagePercent {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuOverVoltagePercent_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_gpuOverVoltagePercent_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t gpuPowerPercent {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuPowerPercent_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_gpuPowerPercent_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t gpuTemperaturePercent {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_gpuTemperaturePercent_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_gpuTemperaturePercent_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramReadBandwidth {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramReadBandwidth_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramReadBandwidth_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_oc_telemetry_item_t vramWriteBandwidth {
    set {
      IGCLPINVOKE.ctl_power_telemetry_t_vramWriteBandwidth_set(swigCPtr, ctl_oc_telemetry_item_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IGCLPINVOKE.ctl_power_telemetry_t_vramWriteBandwidth_get(swigCPtr);
      ctl_oc_telemetry_item_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_oc_telemetry_item_t(cPtr, false);
      return ret;
    } 
  }

  public ctl_power_telemetry_t() : this(IGCLPINVOKE.new_ctl_power_telemetry_t(), true) {
  }

}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040301
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_IGCL(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_IGCL(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_IGCL(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


// ----- C/C++ preamble visible to the generated wrapper -----
#include <Windows.h>

// IGCL headers (placed by prepare_igcl.ps1 / rebuild scripts)
#include "../drivers.gpu.control-library/include/igcl_api.h"

// Optional: include the dynamic wrapper helpers from Intel to auto-load the runtime.
// If you vendor these files into your native project, you can expose thin helpers here.
//#include "../drivers.gpu.control-library/Source/cApiWrapper.h"

// Windows wide-char convenience
typedef wchar_t WCHAR;

// Some toolchains define these; neutralize for wrapper side.
#ifndef CTL_APICALL
#define CTL_APICALL
#endif
#ifndef CTL_APIEXPORT
#define CTL_APIEXPORT
#endif

// Treat IGCL handles as opaque here (SWIG/C# will see them as IntPtr by default)


#include <stdint.h>		// Use the C99 official header


typedef uint64_t igcl_uint64;
typedef uint32_t igcl_uint32;
typedef uint16_t igcl_uint16;
typedef uint8_t  igcl_uint8;
typedef int64_t  igcl_int64;
typedef int32_t  igcl_int32;
typedef int16_t  igcl_int16;
typedef int8_t   igcl_int8;


static igcl_uint32 *new_igcl_uint32P(void) { 
  return new igcl_uint32(); 
}

static igcl_uint32 *copy_igcl_uint32P(igcl_uint32 value) { 
  return new igcl_uint32(value); 
}

static void delete_igcl_uint32P(igcl_uint32 *obj) { 
  delete obj; 
}

static void igcl_uint32P_assign(igcl_uint32 *obj, igcl_uint32 value) {
  *obj = value;
}

static igcl_uint32 igcl_uint32P_value(igcl_uint32 *obj) {
  return *obj;
}


static igcl_uint64 *new_igcl_uint64P(void) { 
  return new igcl_uint64(); 
}

static igcl_uint64 *copy_igcl_uint64P(igcl_uint64 value) { 
  return new igcl_uint64(value); 
}

static void delete_igcl_uint64P(igcl_uint64 *obj) { 
  delete obj; 
}

static void igcl_uint64P_assign(igcl_uint64 *obj, igcl_uint64 value) {
  *obj = value;
}

static igcl_uint64 igcl_uint64P_value(igcl_uint64 *obj) {
  return *obj;
}


static igcl_int32 *new_igcl_int32P(void) { 
  return new igcl_int32(); 
}

static igcl_int32 *copy_igcl_int32P(igcl_int32 value) { 
  return new igcl_int32(value); 
}

static void delete_igcl_int32P(igcl_int32 *obj) { 
  delete obj; 
}

static void igcl_int32P_assign(igcl_int32 *obj, igcl_int32 value) {
  *obj = value;
}

static igcl_int32 igcl_int32P_value(igcl_int32 *obj) {
  return *obj;
}


static igcl_int64 *new_igcl_int64P(void) { 
  return new igcl_int64(); 
}

static igcl_int64 *copy_igcl_int64P(igcl_int64 value) { 
  return new igcl_int64(value); 
}

static void delete_igcl_int64P(igcl_int64 *obj) { 
  delete obj; 
}

static void igcl_int64P_assign(igcl_int64 *obj, igcl_int64 value) {
  *obj = value;
}

static igcl_int64 igcl_int64P_value(igcl_int64 *obj) {
  return *obj;
}


static WCHAR *new_wcharP(void) { 
  return new WCHAR(); 
}

static WCHAR *copy_wcharP(WCHAR value) { 
  return new WCHAR(value); 
}

static void delete_wcharP(WCHAR *obj) { 
  delete obj; 
}

static void wcharP_assign(WCHAR *obj, WCHAR value) {
  *obj = value;
}

static WCHAR wcharP_value(WCHAR *obj) {
  return *obj;
}


static ctl_device_adapter_handle_t *new_deviceAdapterHandleP(void) { 
  return new ctl_device_adapter_handle_t(); 
}

static ctl_device_adapter_handle_t *copy_deviceAdapterHandleP(ctl_device_adapter_handle_t value) { 
  return new ctl_device_adapter_handle_t(value); 
}

static void delete_deviceAdapterHandleP(ctl_device_adapter_handle_t *obj) { 
  delete obj; 
}

static void deviceAdapterHandleP_assign(ctl_device_adapter_handle_t *obj, ctl_device_adapter_handle_t value) {
  *obj = value;
}

static ctl_device_adapter_handle_t deviceAdapterHandleP_value(ctl_device_adapter_handle_t *obj) {
  return *obj;
}


static ctl_display_output_handle_t *new_displayOutputHandleP(void) { 
  return new ctl_display_output_handle_t(); 
}

static ctl_display_output_handle_t *copy_displayOutputHandleP(ctl_display_output_handle_t value) { 
  return new ctl_display_output_handle_t(value); 
}

static void delete_displayOutputHandleP(ctl_display_output_handle_t *obj) { 
  delete obj; 
}

static void displayOutputHandleP_assign(ctl_display_output_handle_t *obj, ctl_display_output_handle_t value) {
  *obj = value;
}

static ctl_display_output_handle_t displayOutputHandleP_value(ctl_display_output_handle_t *obj) {
  return *obj;
}


static ctl_i2c_pin_pair_handle_t *new_i2cPinPairHandleP(void) { 
  return new ctl_i2c_pin_pair_handle_t(); 
}

static ctl_i2c_pin_pair_handle_t *copy_i2cPinPairHandleP(ctl_i2c_pin_pair_handle_t value) { 
  return new ctl_i2c_pin_pair_handle_t(value); 
}

static void delete_i2cPinPairHandleP(ctl_i2c_pin_pair_handle_t *obj) { 
  delete obj; 
}

static void i2cPinPairHandleP_assign(ctl_i2c_pin_pair_handle_t *obj, ctl_i2c_pin_pair_handle_t value) {
  *obj = value;
}

static ctl_i2c_pin_pair_handle_t i2cPinPairHandleP_value(ctl_i2c_pin_pair_handle_t *obj) {
  return *obj;
}


static ctl_engine_handle_t *new_engineHandleP(void) { 
  return new ctl_engine_handle_t(); 
}

static ctl_engine_handle_t *copy_engineHandleP(ctl_engine_handle_t value) { 
  return new ctl_engine_handle_t(value); 
}

static void delete_engineHandleP(ctl_engine_handle_t *obj) { 
  delete obj; 
}

static void engineHandleP_assign(ctl_engine_handle_t *obj, ctl_engine_handle_t value) {
  *obj = value;
}

static ctl_engine_handle_t engineHandleP_value(ctl_engine_handle_t *obj) {
  return *obj;
}


static ctl_mem_handle_t *new_memHandleP(void) { 
  return new ctl_mem_handle_t(); 
}

static ctl_mem_handle_t *copy_memHandleP(ctl_mem_handle_t value) { 
  return new ctl_mem_handle_t(value); 
}

static void delete_memHandleP(ctl_mem_handle_t *obj) { 
  delete obj; 
}

static void memHandleP_assign(ctl_mem_handle_t *obj, ctl_mem_handle_t value) {
  *obj = value;
}

static ctl_mem_handle_t memHandleP_value(ctl_mem_handle_t *obj) {
  return *obj;
}


static ctl_property_t *new_propertyP(void) { 
  return new ctl_property_t(); 
}

static ctl_property_t *copy_propertyP(ctl_property_t value) { 
  return new ctl_property_t(value); 
}

static void delete_propertyP(ctl_property_t *obj) { 
  delete obj; 
}

static void propertyP_assign(ctl_property_t *obj, ctl_property_t value) {
  *obj = value;
}

static ctl_property_t propertyP_value(ctl_property_t *obj) {
  return *obj;
}


static ctl_display_properties_t *new_displayPropertiesP(void) { 
  return new ctl_display_properties_t(); 
}

static ctl_display_properties_t *copy_displayPropertiesP(ctl_display_properties_t value) { 
  return new ctl_display_properties_t(value); 
}

static void delete_displayPropertiesP(ctl_display_properties_t *obj) { 
  delete obj; 
}

static void displayPropertiesP_assign(ctl_display_properties_t *obj, ctl_display_properties_t value) {
  *obj = value;
}

static ctl_display_properties_t displayPropertiesP_value(ctl_display_properties_t *obj) {
  return *obj;
}


static ctl_device_adapter_properties_t *new_adapterPropertiesP(void) { 
  return new ctl_device_adapter_properties_t(); 
}

static ctl_device_adapter_properties_t *copy_adapterPropertiesP(ctl_device_adapter_properties_t value) { 
  return new ctl_device_adapter_properties_t(value); 
}

static void delete_adapterPropertiesP(ctl_device_adapter_properties_t *obj) { 
  delete obj; 
}

static void adapterPropertiesP_assign(ctl_device_adapter_properties_t *obj, ctl_device_adapter_properties_t value) {
  *obj = value;
}

static ctl_device_adapter_properties_t adapterPropertiesP_value(ctl_device_adapter_properties_t *obj) {
  return *obj;
}


static ctl_3d_feature_caps_t *new_featureCapsP(void) { 
  return new ctl_3d_feature_caps_t(); 
}

static ctl_3d_feature_caps_t *copy_featureCapsP(ctl_3d_feature_caps_t value) { 
  return new ctl_3d_feature_caps_t(value); 
}

static void delete_featureCapsP(ctl_3d_feature_caps_t *obj) { 
  delete obj; 
}

static void featureCapsP_assign(ctl_3d_feature_caps_t *obj, ctl_3d_feature_caps_t value) {
  *obj = value;
}

static ctl_3d_feature_caps_t featureCapsP_value(ctl_3d_feature_caps_t *obj) {
  return *obj;
}


static ctl_engine_stats_t *new_engineStatsP(void) { 
  return new ctl_engine_stats_t(); 
}

static ctl_engine_stats_t *copy_engineStatsP(ctl_engine_stats_t value) { 
  return new ctl_engine_stats_t(value); 
}

static void delete_engineStatsP(ctl_engine_stats_t *obj) { 
  delete obj; 
}

static void engineStatsP_assign(ctl_engine_stats_t *obj, ctl_engine_stats_t value) {
  *obj = value;
}

static ctl_engine_stats_t engineStatsP_value(ctl_engine_stats_t *obj) {
  return *obj;
}


static ctl_mem_state_t *new_memStateP(void) { 
  return new ctl_mem_state_t(); 
}

static ctl_mem_state_t *copy_memStateP(ctl_mem_state_t value) { 
  return new ctl_mem_state_t(value); 
}

static void delete_memStateP(ctl_mem_state_t *obj) { 
  delete obj; 
}

static void memStateP_assign(ctl_mem_state_t *obj, ctl_mem_state_t value) {
  *obj = value;
}

static ctl_mem_state_t memStateP_value(ctl_mem_state_t *obj) {
  return *obj;
}


static ctl_power_telemetry_t *new_powerTelemetryP(void) { 
  return new ctl_power_telemetry_t(); 
}

static ctl_power_telemetry_t *copy_powerTelemetryP(ctl_power_telemetry_t value) { 
  return new ctl_power_telemetry_t(value); 
}

static void delete_powerTelemetryP(ctl_power_telemetry_t *obj) { 
  delete obj; 
}

static void powerTelemetryP_assign(ctl_power_telemetry_t *obj, ctl_power_telemetry_t value) {
  *obj = value;
}

static ctl_power_telemetry_t powerTelemetryP_value(ctl_power_telemetry_t *obj) {
  return *obj;
}


static ctl_i2c_access_args_t *new_i2cAccessArgsP(void) { 
  return new ctl_i2c_access_args_t(); 
}

static ctl_i2c_access_args_t *copy_i2cAccessArgsP(ctl_i2c_access_args_t value) { 
  return new ctl_i2c_access_args_t(value); 
}

static void delete_i2cAccessArgsP(ctl_i2c_access_args_t *obj) { 
  delete obj; 
}

static void i2cAccessArgsP_assign(ctl_i2c_access_args_t *obj, ctl_i2c_access_args_t value) {
  *obj = value;
}

static ctl_i2c_access_args_t i2cAccessArgsP_value(ctl_i2c_access_args_t *obj) {
  return *obj;
}


static ctl_aux_access_args_t *new_auxAccessArgsP(void) { 
  return new ctl_aux_access_args_t(); 
}

static ctl_aux_access_args_t *copy_auxAccessArgsP(ctl_aux_access_args_t value) { 
  return new ctl_aux_access_args_t(value); 
}

static void delete_auxAccessArgsP(ctl_aux_access_args_t *obj) { 
  delete obj; 
}

static void auxAccessArgsP_assign(ctl_aux_access_args_t *obj, ctl_aux_access_args_t value) {
  *obj = value;
}

static ctl_aux_access_args_t auxAccessArgsP_value(ctl_aux_access_args_t *obj) {
  return *obj;
}


static ctl_panel_descriptor_access_args_t *new_panelDescriptorArgsP(void) { 
  return new ctl_panel_descriptor_access_args_t(); 
}

static ctl_panel_descriptor_access_args_t *copy_panelDescriptorArgsP(ctl_panel_descriptor_access_args_t value) { 
  return new ctl_panel_descriptor_access_args_t(value); 
}

static void delete_panelDescriptorArgsP(ctl_panel_descriptor_access_args_t *obj) { 
  delete obj; 
}

static void panelDescriptorArgsP_assign(ctl_panel_descriptor_access_args_t *obj, ctl_panel_descriptor_access_args_t value) {
  *obj = value;
}

static ctl_panel_descriptor_access_args_t panelDescriptorArgsP_value(ctl_panel_descriptor_access_args_t *obj) {
  return *obj;
}


static ctl_dce_args_t *new_dceArgsP(void) { 
  return new ctl_dce_args_t(); 
}

static ctl_dce_args_t *copy_dceArgsP(ctl_dce_args_t value) { 
  return new ctl_dce_args_t(value); 
}

static void delete_dceArgsP(ctl_dce_args_t *obj) { 
  delete obj; 
}

static void dceArgsP_assign(ctl_dce_args_t *obj, ctl_dce_args_t value) {
  *obj = value;
}

static ctl_dce_args_t dceArgsP_value(ctl_dce_args_t *obj) {
  return *obj;
}


static ctl_wait_property_change_args_t *new_waitPropertyChangeArgsP(void) { 
  return new ctl_wait_property_change_args_t(); 
}

static ctl_wait_property_change_args_t *copy_waitPropertyChangeArgsP(ctl_wait_property_change_args_t value) { 
  return new ctl_wait_property_change_args_t(value); 
}

static void delete_waitPropertyChangeArgsP(ctl_wait_property_change_args_t *obj) { 
  delete obj; 
}

static void waitPropertyChangeArgsP_assign(ctl_wait_property_change_args_t *obj, ctl_wait_property_change_args_t value) {
  *obj = value;
}

static ctl_wait_property_change_args_t waitPropertyChangeArgsP_value(ctl_wait_property_change_args_t *obj) {
  return *obj;
}


#include <string.h>


// Initialize IGCL with default flags (Level Zero enabled)
static ctl_result_t IGCL_InitDefault(ctl_api_handle_t* phAPI) {
    if (!phAPI) return CTL_RESULT_ERROR_INVALID_NULL_POINTER;

    ctl_init_args_t args = {};
    args.Size  = sizeof(args);
    // Some SDKs don’t expose CTL_INIT_VERSION_* macros. Use a safe fallback.
    #ifdef CTL_INIT_VERSION_MAJOR
      args.Version = CTL_MAKE_VERSION(CTL_INIT_VERSION_MAJOR, CTL_INIT_VERSION_MINOR);
    #else
      args.Version = 0; // accepted by current runtimes
    #endif
    args.flags = CTL_INIT_FLAG_USE_LEVEL_ZERO;
    ZeroMemory(&args.ApplicationUID, sizeof(args.ApplicationUID));

    return ctlInit(&args, phAPI);
}

// Enumerate adapters: returns count and fills pre-allocated array
static ctl_result_t IGCL_EnumerateAdapters(ctl_api_handle_t hAPI,
                                           igcl_uint32* pCount,
                                           ctl_device_adapter_handle_t* pAdapters) {
    return ctlEnumerateDevices(hAPI, pCount, pAdapters);
}

// Enumerate displays for an adapter
static ctl_result_t IGCL_EnumerateDisplays(ctl_device_adapter_handle_t hAdapter,
                                           igcl_uint32* pCount,
                                           ctl_display_output_handle_t* pDisplays) {
    return ctlEnumerateDisplayOutputs(hAdapter, pCount, pDisplays);
}

// Get display properties with size set
static ctl_result_t IGCL_GetDisplayProperties(ctl_display_output_handle_t hDisplay,
                                              ctl_display_properties_t* pProps) {
    if (!pProps) return CTL_RESULT_ERROR_INVALID_NULL_POINTER;
    pProps->Size = sizeof(*pProps);
    pProps->Version = 1; // or CTL_CURRENT_VERSION
    return ctlGetDisplayProperties(hDisplay, pProps);
}

// Get adapter properties with size set
static ctl_result_t IGCL_GetAdapterProperties(ctl_device_adapter_handle_t hAdapter,
                                              ctl_device_adapter_properties_t* pProps) {
    if (!pProps) return CTL_RESULT_ERROR_INVALID_NULL_POINTER;
    pProps->Size = sizeof(*pProps);
    pProps->Version = 1;
    return ctlGetDeviceProperties(hAdapter, pProps);
}

// Helper for I2C access with buffer sizing
static ctl_result_t IGCL_I2CAccess(ctl_display_output_handle_t hDisplay,
                                   ctl_i2c_access_args_t* pArgs) {
    if (!pArgs) return CTL_RESULT_ERROR_INVALID_NULL_POINTER;
    pArgs->Size = sizeof(*pArgs);
    return ctlI2CAccess(hDisplay, pArgs);
}

// Helper for AUX access with buffer sizing
static ctl_result_t IGCL_AUXAccess(ctl_display_output_handle_t hDisplay,
                                   ctl_aux_access_args_t* pArgs) {
    if (!pArgs) return CTL_RESULT_ERROR_INVALID_NULL_POINTER;
    pArgs->Size = sizeof(*pArgs);
    return ctlAUXAccess(hDisplay, pArgs);
}

// Two-phase read of panel descriptor (EDID or panel data)
static ctl_result_t IGCL_GetPanelDescriptor(ctl_display_output_handle_t hDisplay,
                                            ctl_panel_descriptor_access_args_t* pArgs,
                                            uint8_t** pBuffer) {
    if (!pArgs || !pBuffer) return CTL_RESULT_ERROR_INVALID_NULL_POINTER;
    pArgs->Size = sizeof(*pArgs);
    // Phase 1: query size
    pArgs->DescriptorDataSize = 0;
    pArgs->pDescriptorData = nullptr;
    ctl_result_t result = ctlPanelDescriptorAccess(hDisplay, pArgs);
    if (result != CTL_RESULT_SUCCESS || pArgs->DescriptorDataSize == 0) return result;
    // Allocate buffer
    *pBuffer = (uint8_t*)malloc(pArgs->DescriptorDataSize);
    if (!(*pBuffer)) return CTL_RESULT_ERROR_OUT_OF_HOST_MEMORY;
    // Phase 2: actual read
    return ctlPanelDescriptorAccess(hDisplay, pArgs);
}


static ctl_result_t IGCL_GetSetDCE(ctl_display_output_handle_t hDisplay,
                                   ctl_dce_args_t* pArgs) {
    if (!pArgs) return CTL_RESULT_ERROR_INVALID_NULL_POINTER;
    pArgs->Size = sizeof(*pArgs);
    pArgs->Version = 1; // depending on spec
    return ctlGetSetDynamicContrastEnhancement(hDisplay, pArgs);
}

static ctl_result_t IGCL_EnumDisplays(ctl_device_adapter_handle_t hAdapter,
                                      igcl_uint32* pCount,
                                      ctl_display_output_handle_t** ppDisplays) {
    if (!pCount || !ppDisplays) return CTL_RESULT_ERROR_INVALID_NULL_POINTER;
    *ppDisplays = nullptr;
    ctl_result_t res = ctlEnumerateDisplayOutputs(hAdapter, pCount, nullptr);
    if (res != CTL_RESULT_SUCCESS || !*pCount) return res;
    *ppDisplays = (ctl_display_output_handle_t*)malloc(sizeof(ctl_display_output_handle_t) * *pCount);
    if (!*ppDisplays) return CTL_RESULT_ERROR_OUT_OF_HOST_MEMORY;
    return ctlEnumerateDisplayOutputs(hAdapter, pCount, *ppDisplays);
}

// Cleanup API handle
static ctl_result_t IGCL_Close(ctl_api_handle_t hAPI) {
    return ctlClose(hAPI);
}

// Free malloc-allocated buffer
static void IGCL_FreeBuffer(void* ptr) {
    if (ptr) free(ptr);
}

// Block until a display property changes
static ctl_result_t IGCL_WaitForDisplayChange(ctl_device_adapter_handle_t hAdapter,
                                              ctl_wait_property_change_args_t* pArgs) {
    if (!pArgs) return CTL_RESULT_ERROR_INVALID_NULL_POINTER;
    pArgs->Size = sizeof(*pArgs);
    return ctlWaitForPropertyChange(hAdapter, pArgs);
}




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "IGCLWrapper_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_igcl_uint32P() {
  void * jresult ;
  igcl_uint32 *result = 0 ;
  
  result = (igcl_uint32 *)new_igcl_uint32P();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_igcl_uint32P(unsigned int jarg1) {
  void * jresult ;
  igcl_uint32 arg1 ;
  igcl_uint32 *result = 0 ;
  
  arg1 = (igcl_uint32)jarg1; 
  result = (igcl_uint32 *)copy_igcl_uint32P(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_igcl_uint32P(void * jarg1) {
  igcl_uint32 *arg1 = (igcl_uint32 *) 0 ;
  
  arg1 = (igcl_uint32 *)jarg1; 
  delete_igcl_uint32P(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_igcl_uint32P_assign(void * jarg1, unsigned int jarg2) {
  igcl_uint32 *arg1 = (igcl_uint32 *) 0 ;
  igcl_uint32 arg2 ;
  
  arg1 = (igcl_uint32 *)jarg1; 
  arg2 = (igcl_uint32)jarg2; 
  igcl_uint32P_assign(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_igcl_uint32P_value(void * jarg1) {
  unsigned int jresult ;
  igcl_uint32 *arg1 = (igcl_uint32 *) 0 ;
  igcl_uint32 result;
  
  arg1 = (igcl_uint32 *)jarg1; 
  result = (igcl_uint32)igcl_uint32P_value(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_igcl_uint64P() {
  void * jresult ;
  igcl_uint64 *result = 0 ;
  
  result = (igcl_uint64 *)new_igcl_uint64P();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_igcl_uint64P(unsigned long long jarg1) {
  void * jresult ;
  igcl_uint64 arg1 ;
  igcl_uint64 *result = 0 ;
  
  arg1 = (igcl_uint64)jarg1; 
  result = (igcl_uint64 *)copy_igcl_uint64P(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_igcl_uint64P(void * jarg1) {
  igcl_uint64 *arg1 = (igcl_uint64 *) 0 ;
  
  arg1 = (igcl_uint64 *)jarg1; 
  delete_igcl_uint64P(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_igcl_uint64P_assign(void * jarg1, unsigned long long jarg2) {
  igcl_uint64 *arg1 = (igcl_uint64 *) 0 ;
  igcl_uint64 arg2 ;
  
  arg1 = (igcl_uint64 *)jarg1; 
  arg2 = (igcl_uint64)jarg2; 
  igcl_uint64P_assign(arg1,arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_igcl_uint64P_value(void * jarg1) {
  unsigned long long jresult ;
  igcl_uint64 *arg1 = (igcl_uint64 *) 0 ;
  igcl_uint64 result;
  
  arg1 = (igcl_uint64 *)jarg1; 
  result = (igcl_uint64)igcl_uint64P_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_igcl_int32P() {
  void * jresult ;
  igcl_int32 *result = 0 ;
  
  result = (igcl_int32 *)new_igcl_int32P();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_igcl_int32P(int jarg1) {
  void * jresult ;
  igcl_int32 arg1 ;
  igcl_int32 *result = 0 ;
  
  arg1 = (igcl_int32)jarg1; 
  result = (igcl_int32 *)copy_igcl_int32P(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_igcl_int32P(void * jarg1) {
  igcl_int32 *arg1 = (igcl_int32 *) 0 ;
  
  arg1 = (igcl_int32 *)jarg1; 
  delete_igcl_int32P(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_igcl_int32P_assign(void * jarg1, int jarg2) {
  igcl_int32 *arg1 = (igcl_int32 *) 0 ;
  igcl_int32 arg2 ;
  
  arg1 = (igcl_int32 *)jarg1; 
  arg2 = (igcl_int32)jarg2; 
  igcl_int32P_assign(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_igcl_int32P_value(void * jarg1) {
  int jresult ;
  igcl_int32 *arg1 = (igcl_int32 *) 0 ;
  igcl_int32 result;
  
  arg1 = (igcl_int32 *)jarg1; 
  result = (igcl_int32)igcl_int32P_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_igcl_int64P() {
  void * jresult ;
  igcl_int64 *result = 0 ;
  
  result = (igcl_int64 *)new_igcl_int64P();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_igcl_int64P(long long jarg1) {
  void * jresult ;
  igcl_int64 arg1 ;
  igcl_int64 *result = 0 ;
  
  arg1 = (igcl_int64)jarg1; 
  result = (igcl_int64 *)copy_igcl_int64P(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_igcl_int64P(void * jarg1) {
  igcl_int64 *arg1 = (igcl_int64 *) 0 ;
  
  arg1 = (igcl_int64 *)jarg1; 
  delete_igcl_int64P(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_igcl_int64P_assign(void * jarg1, long long jarg2) {
  igcl_int64 *arg1 = (igcl_int64 *) 0 ;
  igcl_int64 arg2 ;
  
  arg1 = (igcl_int64 *)jarg1; 
  arg2 = (igcl_int64)jarg2; 
  igcl_int64P_assign(arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_IGCLWrapper_igcl_int64P_value(void * jarg1) {
  long long jresult ;
  igcl_int64 *arg1 = (igcl_int64 *) 0 ;
  igcl_int64 result;
  
  arg1 = (igcl_int64 *)jarg1; 
  result = (igcl_int64)igcl_int64P_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_wcharP() {
  void * jresult ;
  WCHAR *result = 0 ;
  
  result = (WCHAR *)new_wcharP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_wcharP(void * jarg1) {
  void * jresult ;
  WCHAR arg1 ;
  WCHAR *argp1 ;
  WCHAR *result = 0 ;
  
  argp1 = (WCHAR *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null WCHAR", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (WCHAR *)copy_wcharP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_wcharP(void * jarg1) {
  WCHAR *arg1 = (WCHAR *) 0 ;
  
  arg1 = (WCHAR *)jarg1; 
  delete_wcharP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_wcharP_assign(void * jarg1, void * jarg2) {
  WCHAR *arg1 = (WCHAR *) 0 ;
  WCHAR arg2 ;
  WCHAR *argp2 ;
  
  arg1 = (WCHAR *)jarg1; 
  argp2 = (WCHAR *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null WCHAR", 0);
    return ;
  }
  arg2 = *argp2; 
  wcharP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_wcharP_value(void * jarg1) {
  void * jresult ;
  WCHAR *arg1 = (WCHAR *) 0 ;
  WCHAR result;
  
  arg1 = (WCHAR *)jarg1; 
  result = wcharP_value(arg1);
  jresult = new WCHAR(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_deviceAdapterHandleP() {
  void * jresult ;
  ctl_device_adapter_handle_t *result = 0 ;
  
  result = (ctl_device_adapter_handle_t *)new_deviceAdapterHandleP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_deviceAdapterHandleP(void * jarg1) {
  void * jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_device_adapter_handle_t *result = 0 ;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  result = (ctl_device_adapter_handle_t *)copy_deviceAdapterHandleP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_deviceAdapterHandleP(void * jarg1) {
  ctl_device_adapter_handle_t *arg1 = (ctl_device_adapter_handle_t *) 0 ;
  
  arg1 = (ctl_device_adapter_handle_t *)jarg1; 
  delete_deviceAdapterHandleP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_deviceAdapterHandleP_assign(void * jarg1, void * jarg2) {
  ctl_device_adapter_handle_t *arg1 = (ctl_device_adapter_handle_t *) 0 ;
  ctl_device_adapter_handle_t arg2 = (ctl_device_adapter_handle_t) 0 ;
  
  arg1 = (ctl_device_adapter_handle_t *)jarg1; 
  arg2 = (ctl_device_adapter_handle_t)jarg2; 
  deviceAdapterHandleP_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_deviceAdapterHandleP_value(void * jarg1) {
  void * jresult ;
  ctl_device_adapter_handle_t *arg1 = (ctl_device_adapter_handle_t *) 0 ;
  ctl_device_adapter_handle_t result;
  
  arg1 = (ctl_device_adapter_handle_t *)jarg1; 
  result = (ctl_device_adapter_handle_t)deviceAdapterHandleP_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_displayOutputHandleP() {
  void * jresult ;
  ctl_display_output_handle_t *result = 0 ;
  
  result = (ctl_display_output_handle_t *)new_displayOutputHandleP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_displayOutputHandleP(void * jarg1) {
  void * jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_display_output_handle_t *result = 0 ;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  result = (ctl_display_output_handle_t *)copy_displayOutputHandleP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_displayOutputHandleP(void * jarg1) {
  ctl_display_output_handle_t *arg1 = (ctl_display_output_handle_t *) 0 ;
  
  arg1 = (ctl_display_output_handle_t *)jarg1; 
  delete_displayOutputHandleP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_displayOutputHandleP_assign(void * jarg1, void * jarg2) {
  ctl_display_output_handle_t *arg1 = (ctl_display_output_handle_t *) 0 ;
  ctl_display_output_handle_t arg2 = (ctl_display_output_handle_t) 0 ;
  
  arg1 = (ctl_display_output_handle_t *)jarg1; 
  arg2 = (ctl_display_output_handle_t)jarg2; 
  displayOutputHandleP_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_displayOutputHandleP_value(void * jarg1) {
  void * jresult ;
  ctl_display_output_handle_t *arg1 = (ctl_display_output_handle_t *) 0 ;
  ctl_display_output_handle_t result;
  
  arg1 = (ctl_display_output_handle_t *)jarg1; 
  result = (ctl_display_output_handle_t)displayOutputHandleP_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_i2cPinPairHandleP() {
  void * jresult ;
  ctl_i2c_pin_pair_handle_t *result = 0 ;
  
  result = (ctl_i2c_pin_pair_handle_t *)new_i2cPinPairHandleP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_i2cPinPairHandleP(void * jarg1) {
  void * jresult ;
  ctl_i2c_pin_pair_handle_t arg1 = (ctl_i2c_pin_pair_handle_t) 0 ;
  ctl_i2c_pin_pair_handle_t *result = 0 ;
  
  arg1 = (ctl_i2c_pin_pair_handle_t)jarg1; 
  result = (ctl_i2c_pin_pair_handle_t *)copy_i2cPinPairHandleP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_i2cPinPairHandleP(void * jarg1) {
  ctl_i2c_pin_pair_handle_t *arg1 = (ctl_i2c_pin_pair_handle_t *) 0 ;
  
  arg1 = (ctl_i2c_pin_pair_handle_t *)jarg1; 
  delete_i2cPinPairHandleP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_i2cPinPairHandleP_assign(void * jarg1, void * jarg2) {
  ctl_i2c_pin_pair_handle_t *arg1 = (ctl_i2c_pin_pair_handle_t *) 0 ;
  ctl_i2c_pin_pair_handle_t arg2 = (ctl_i2c_pin_pair_handle_t) 0 ;
  
  arg1 = (ctl_i2c_pin_pair_handle_t *)jarg1; 
  arg2 = (ctl_i2c_pin_pair_handle_t)jarg2; 
  i2cPinPairHandleP_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_i2cPinPairHandleP_value(void * jarg1) {
  void * jresult ;
  ctl_i2c_pin_pair_handle_t *arg1 = (ctl_i2c_pin_pair_handle_t *) 0 ;
  ctl_i2c_pin_pair_handle_t result;
  
  arg1 = (ctl_i2c_pin_pair_handle_t *)jarg1; 
  result = (ctl_i2c_pin_pair_handle_t)i2cPinPairHandleP_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_engineHandleP() {
  void * jresult ;
  ctl_engine_handle_t *result = 0 ;
  
  result = (ctl_engine_handle_t *)new_engineHandleP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_engineHandleP(void * jarg1) {
  void * jresult ;
  ctl_engine_handle_t arg1 = (ctl_engine_handle_t) 0 ;
  ctl_engine_handle_t *result = 0 ;
  
  arg1 = (ctl_engine_handle_t)jarg1; 
  result = (ctl_engine_handle_t *)copy_engineHandleP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_engineHandleP(void * jarg1) {
  ctl_engine_handle_t *arg1 = (ctl_engine_handle_t *) 0 ;
  
  arg1 = (ctl_engine_handle_t *)jarg1; 
  delete_engineHandleP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_engineHandleP_assign(void * jarg1, void * jarg2) {
  ctl_engine_handle_t *arg1 = (ctl_engine_handle_t *) 0 ;
  ctl_engine_handle_t arg2 = (ctl_engine_handle_t) 0 ;
  
  arg1 = (ctl_engine_handle_t *)jarg1; 
  arg2 = (ctl_engine_handle_t)jarg2; 
  engineHandleP_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_engineHandleP_value(void * jarg1) {
  void * jresult ;
  ctl_engine_handle_t *arg1 = (ctl_engine_handle_t *) 0 ;
  ctl_engine_handle_t result;
  
  arg1 = (ctl_engine_handle_t *)jarg1; 
  result = (ctl_engine_handle_t)engineHandleP_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_memHandleP() {
  void * jresult ;
  ctl_mem_handle_t *result = 0 ;
  
  result = (ctl_mem_handle_t *)new_memHandleP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_memHandleP(void * jarg1) {
  void * jresult ;
  ctl_mem_handle_t arg1 = (ctl_mem_handle_t) 0 ;
  ctl_mem_handle_t *result = 0 ;
  
  arg1 = (ctl_mem_handle_t)jarg1; 
  result = (ctl_mem_handle_t *)copy_memHandleP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_memHandleP(void * jarg1) {
  ctl_mem_handle_t *arg1 = (ctl_mem_handle_t *) 0 ;
  
  arg1 = (ctl_mem_handle_t *)jarg1; 
  delete_memHandleP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_memHandleP_assign(void * jarg1, void * jarg2) {
  ctl_mem_handle_t *arg1 = (ctl_mem_handle_t *) 0 ;
  ctl_mem_handle_t arg2 = (ctl_mem_handle_t) 0 ;
  
  arg1 = (ctl_mem_handle_t *)jarg1; 
  arg2 = (ctl_mem_handle_t)jarg2; 
  memHandleP_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_memHandleP_value(void * jarg1) {
  void * jresult ;
  ctl_mem_handle_t *arg1 = (ctl_mem_handle_t *) 0 ;
  ctl_mem_handle_t result;
  
  arg1 = (ctl_mem_handle_t *)jarg1; 
  result = (ctl_mem_handle_t)memHandleP_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_propertyP() {
  void * jresult ;
  ctl_property_t *result = 0 ;
  
  result = (ctl_property_t *)new_propertyP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_propertyP(void * jarg1) {
  void * jresult ;
  ctl_property_t arg1 ;
  ctl_property_t *argp1 ;
  ctl_property_t *result = 0 ;
  
  argp1 = (ctl_property_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_property_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_property_t *)copy_propertyP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_propertyP(void * jarg1) {
  ctl_property_t *arg1 = (ctl_property_t *) 0 ;
  
  arg1 = (ctl_property_t *)jarg1; 
  delete_propertyP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_propertyP_assign(void * jarg1, void * jarg2) {
  ctl_property_t *arg1 = (ctl_property_t *) 0 ;
  ctl_property_t arg2 ;
  ctl_property_t *argp2 ;
  
  arg1 = (ctl_property_t *)jarg1; 
  argp2 = (ctl_property_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_property_t", 0);
    return ;
  }
  arg2 = *argp2; 
  propertyP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_propertyP_value(void * jarg1) {
  void * jresult ;
  ctl_property_t *arg1 = (ctl_property_t *) 0 ;
  ctl_property_t result;
  
  arg1 = (ctl_property_t *)jarg1; 
  result = propertyP_value(arg1);
  jresult = new ctl_property_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_displayPropertiesP() {
  void * jresult ;
  ctl_display_properties_t *result = 0 ;
  
  result = (ctl_display_properties_t *)new_displayPropertiesP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_displayPropertiesP(void * jarg1) {
  void * jresult ;
  ctl_display_properties_t arg1 ;
  ctl_display_properties_t *argp1 ;
  ctl_display_properties_t *result = 0 ;
  
  argp1 = (ctl_display_properties_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_display_properties_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_display_properties_t *)copy_displayPropertiesP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_displayPropertiesP(void * jarg1) {
  ctl_display_properties_t *arg1 = (ctl_display_properties_t *) 0 ;
  
  arg1 = (ctl_display_properties_t *)jarg1; 
  delete_displayPropertiesP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_displayPropertiesP_assign(void * jarg1, void * jarg2) {
  ctl_display_properties_t *arg1 = (ctl_display_properties_t *) 0 ;
  ctl_display_properties_t arg2 ;
  ctl_display_properties_t *argp2 ;
  
  arg1 = (ctl_display_properties_t *)jarg1; 
  argp2 = (ctl_display_properties_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_display_properties_t", 0);
    return ;
  }
  arg2 = *argp2; 
  displayPropertiesP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_displayPropertiesP_value(void * jarg1) {
  void * jresult ;
  ctl_display_properties_t *arg1 = (ctl_display_properties_t *) 0 ;
  ctl_display_properties_t result;
  
  arg1 = (ctl_display_properties_t *)jarg1; 
  result = displayPropertiesP_value(arg1);
  jresult = new ctl_display_properties_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_adapterPropertiesP() {
  void * jresult ;
  ctl_device_adapter_properties_t *result = 0 ;
  
  result = (ctl_device_adapter_properties_t *)new_adapterPropertiesP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_adapterPropertiesP(void * jarg1) {
  void * jresult ;
  ctl_device_adapter_properties_t arg1 ;
  ctl_device_adapter_properties_t *argp1 ;
  ctl_device_adapter_properties_t *result = 0 ;
  
  argp1 = (ctl_device_adapter_properties_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_device_adapter_properties_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_device_adapter_properties_t *)copy_adapterPropertiesP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_adapterPropertiesP(void * jarg1) {
  ctl_device_adapter_properties_t *arg1 = (ctl_device_adapter_properties_t *) 0 ;
  
  arg1 = (ctl_device_adapter_properties_t *)jarg1; 
  delete_adapterPropertiesP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_adapterPropertiesP_assign(void * jarg1, void * jarg2) {
  ctl_device_adapter_properties_t *arg1 = (ctl_device_adapter_properties_t *) 0 ;
  ctl_device_adapter_properties_t arg2 ;
  ctl_device_adapter_properties_t *argp2 ;
  
  arg1 = (ctl_device_adapter_properties_t *)jarg1; 
  argp2 = (ctl_device_adapter_properties_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_device_adapter_properties_t", 0);
    return ;
  }
  arg2 = *argp2; 
  adapterPropertiesP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_adapterPropertiesP_value(void * jarg1) {
  void * jresult ;
  ctl_device_adapter_properties_t *arg1 = (ctl_device_adapter_properties_t *) 0 ;
  ctl_device_adapter_properties_t result;
  
  arg1 = (ctl_device_adapter_properties_t *)jarg1; 
  result = adapterPropertiesP_value(arg1);
  jresult = new ctl_device_adapter_properties_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_featureCapsP() {
  void * jresult ;
  ctl_3d_feature_caps_t *result = 0 ;
  
  result = (ctl_3d_feature_caps_t *)new_featureCapsP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_featureCapsP(void * jarg1) {
  void * jresult ;
  ctl_3d_feature_caps_t arg1 ;
  ctl_3d_feature_caps_t *argp1 ;
  ctl_3d_feature_caps_t *result = 0 ;
  
  argp1 = (ctl_3d_feature_caps_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_3d_feature_caps_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_3d_feature_caps_t *)copy_featureCapsP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_featureCapsP(void * jarg1) {
  ctl_3d_feature_caps_t *arg1 = (ctl_3d_feature_caps_t *) 0 ;
  
  arg1 = (ctl_3d_feature_caps_t *)jarg1; 
  delete_featureCapsP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_featureCapsP_assign(void * jarg1, void * jarg2) {
  ctl_3d_feature_caps_t *arg1 = (ctl_3d_feature_caps_t *) 0 ;
  ctl_3d_feature_caps_t arg2 ;
  ctl_3d_feature_caps_t *argp2 ;
  
  arg1 = (ctl_3d_feature_caps_t *)jarg1; 
  argp2 = (ctl_3d_feature_caps_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_3d_feature_caps_t", 0);
    return ;
  }
  arg2 = *argp2; 
  featureCapsP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_featureCapsP_value(void * jarg1) {
  void * jresult ;
  ctl_3d_feature_caps_t *arg1 = (ctl_3d_feature_caps_t *) 0 ;
  ctl_3d_feature_caps_t result;
  
  arg1 = (ctl_3d_feature_caps_t *)jarg1; 
  result = featureCapsP_value(arg1);
  jresult = new ctl_3d_feature_caps_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_engineStatsP() {
  void * jresult ;
  ctl_engine_stats_t *result = 0 ;
  
  result = (ctl_engine_stats_t *)new_engineStatsP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_engineStatsP(void * jarg1) {
  void * jresult ;
  ctl_engine_stats_t arg1 ;
  ctl_engine_stats_t *argp1 ;
  ctl_engine_stats_t *result = 0 ;
  
  argp1 = (ctl_engine_stats_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_engine_stats_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_engine_stats_t *)copy_engineStatsP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_engineStatsP(void * jarg1) {
  ctl_engine_stats_t *arg1 = (ctl_engine_stats_t *) 0 ;
  
  arg1 = (ctl_engine_stats_t *)jarg1; 
  delete_engineStatsP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_engineStatsP_assign(void * jarg1, void * jarg2) {
  ctl_engine_stats_t *arg1 = (ctl_engine_stats_t *) 0 ;
  ctl_engine_stats_t arg2 ;
  ctl_engine_stats_t *argp2 ;
  
  arg1 = (ctl_engine_stats_t *)jarg1; 
  argp2 = (ctl_engine_stats_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_engine_stats_t", 0);
    return ;
  }
  arg2 = *argp2; 
  engineStatsP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_engineStatsP_value(void * jarg1) {
  void * jresult ;
  ctl_engine_stats_t *arg1 = (ctl_engine_stats_t *) 0 ;
  ctl_engine_stats_t result;
  
  arg1 = (ctl_engine_stats_t *)jarg1; 
  result = engineStatsP_value(arg1);
  jresult = new ctl_engine_stats_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_memStateP() {
  void * jresult ;
  ctl_mem_state_t *result = 0 ;
  
  result = (ctl_mem_state_t *)new_memStateP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_memStateP(void * jarg1) {
  void * jresult ;
  ctl_mem_state_t arg1 ;
  ctl_mem_state_t *argp1 ;
  ctl_mem_state_t *result = 0 ;
  
  argp1 = (ctl_mem_state_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_mem_state_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_mem_state_t *)copy_memStateP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_memStateP(void * jarg1) {
  ctl_mem_state_t *arg1 = (ctl_mem_state_t *) 0 ;
  
  arg1 = (ctl_mem_state_t *)jarg1; 
  delete_memStateP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_memStateP_assign(void * jarg1, void * jarg2) {
  ctl_mem_state_t *arg1 = (ctl_mem_state_t *) 0 ;
  ctl_mem_state_t arg2 ;
  ctl_mem_state_t *argp2 ;
  
  arg1 = (ctl_mem_state_t *)jarg1; 
  argp2 = (ctl_mem_state_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_mem_state_t", 0);
    return ;
  }
  arg2 = *argp2; 
  memStateP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_memStateP_value(void * jarg1) {
  void * jresult ;
  ctl_mem_state_t *arg1 = (ctl_mem_state_t *) 0 ;
  ctl_mem_state_t result;
  
  arg1 = (ctl_mem_state_t *)jarg1; 
  result = memStateP_value(arg1);
  jresult = new ctl_mem_state_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_powerTelemetryP() {
  void * jresult ;
  ctl_power_telemetry_t *result = 0 ;
  
  result = (ctl_power_telemetry_t *)new_powerTelemetryP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_powerTelemetryP(void * jarg1) {
  void * jresult ;
  ctl_power_telemetry_t arg1 ;
  ctl_power_telemetry_t *argp1 ;
  ctl_power_telemetry_t *result = 0 ;
  
  argp1 = (ctl_power_telemetry_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_power_telemetry_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_power_telemetry_t *)copy_powerTelemetryP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_powerTelemetryP(void * jarg1) {
  ctl_power_telemetry_t *arg1 = (ctl_power_telemetry_t *) 0 ;
  
  arg1 = (ctl_power_telemetry_t *)jarg1; 
  delete_powerTelemetryP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_powerTelemetryP_assign(void * jarg1, void * jarg2) {
  ctl_power_telemetry_t *arg1 = (ctl_power_telemetry_t *) 0 ;
  ctl_power_telemetry_t arg2 ;
  ctl_power_telemetry_t *argp2 ;
  
  arg1 = (ctl_power_telemetry_t *)jarg1; 
  argp2 = (ctl_power_telemetry_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_power_telemetry_t", 0);
    return ;
  }
  arg2 = *argp2; 
  powerTelemetryP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_powerTelemetryP_value(void * jarg1) {
  void * jresult ;
  ctl_power_telemetry_t *arg1 = (ctl_power_telemetry_t *) 0 ;
  ctl_power_telemetry_t result;
  
  arg1 = (ctl_power_telemetry_t *)jarg1; 
  result = powerTelemetryP_value(arg1);
  jresult = new ctl_power_telemetry_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_i2cAccessArgsP() {
  void * jresult ;
  ctl_i2c_access_args_t *result = 0 ;
  
  result = (ctl_i2c_access_args_t *)new_i2cAccessArgsP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_i2cAccessArgsP(void * jarg1) {
  void * jresult ;
  ctl_i2c_access_args_t arg1 ;
  ctl_i2c_access_args_t *argp1 ;
  ctl_i2c_access_args_t *result = 0 ;
  
  argp1 = (ctl_i2c_access_args_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_i2c_access_args_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_i2c_access_args_t *)copy_i2cAccessArgsP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_i2cAccessArgsP(void * jarg1) {
  ctl_i2c_access_args_t *arg1 = (ctl_i2c_access_args_t *) 0 ;
  
  arg1 = (ctl_i2c_access_args_t *)jarg1; 
  delete_i2cAccessArgsP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_i2cAccessArgsP_assign(void * jarg1, void * jarg2) {
  ctl_i2c_access_args_t *arg1 = (ctl_i2c_access_args_t *) 0 ;
  ctl_i2c_access_args_t arg2 ;
  ctl_i2c_access_args_t *argp2 ;
  
  arg1 = (ctl_i2c_access_args_t *)jarg1; 
  argp2 = (ctl_i2c_access_args_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_i2c_access_args_t", 0);
    return ;
  }
  arg2 = *argp2; 
  i2cAccessArgsP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_i2cAccessArgsP_value(void * jarg1) {
  void * jresult ;
  ctl_i2c_access_args_t *arg1 = (ctl_i2c_access_args_t *) 0 ;
  ctl_i2c_access_args_t result;
  
  arg1 = (ctl_i2c_access_args_t *)jarg1; 
  result = i2cAccessArgsP_value(arg1);
  jresult = new ctl_i2c_access_args_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_auxAccessArgsP() {
  void * jresult ;
  ctl_aux_access_args_t *result = 0 ;
  
  result = (ctl_aux_access_args_t *)new_auxAccessArgsP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_auxAccessArgsP(void * jarg1) {
  void * jresult ;
  ctl_aux_access_args_t arg1 ;
  ctl_aux_access_args_t *argp1 ;
  ctl_aux_access_args_t *result = 0 ;
  
  argp1 = (ctl_aux_access_args_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_aux_access_args_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_aux_access_args_t *)copy_auxAccessArgsP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_auxAccessArgsP(void * jarg1) {
  ctl_aux_access_args_t *arg1 = (ctl_aux_access_args_t *) 0 ;
  
  arg1 = (ctl_aux_access_args_t *)jarg1; 
  delete_auxAccessArgsP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_auxAccessArgsP_assign(void * jarg1, void * jarg2) {
  ctl_aux_access_args_t *arg1 = (ctl_aux_access_args_t *) 0 ;
  ctl_aux_access_args_t arg2 ;
  ctl_aux_access_args_t *argp2 ;
  
  arg1 = (ctl_aux_access_args_t *)jarg1; 
  argp2 = (ctl_aux_access_args_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_aux_access_args_t", 0);
    return ;
  }
  arg2 = *argp2; 
  auxAccessArgsP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_auxAccessArgsP_value(void * jarg1) {
  void * jresult ;
  ctl_aux_access_args_t *arg1 = (ctl_aux_access_args_t *) 0 ;
  ctl_aux_access_args_t result;
  
  arg1 = (ctl_aux_access_args_t *)jarg1; 
  result = auxAccessArgsP_value(arg1);
  jresult = new ctl_aux_access_args_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_panelDescriptorArgsP() {
  void * jresult ;
  ctl_panel_descriptor_access_args_t *result = 0 ;
  
  result = (ctl_panel_descriptor_access_args_t *)new_panelDescriptorArgsP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_panelDescriptorArgsP(void * jarg1) {
  void * jresult ;
  ctl_panel_descriptor_access_args_t arg1 ;
  ctl_panel_descriptor_access_args_t *argp1 ;
  ctl_panel_descriptor_access_args_t *result = 0 ;
  
  argp1 = (ctl_panel_descriptor_access_args_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_panel_descriptor_access_args_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_panel_descriptor_access_args_t *)copy_panelDescriptorArgsP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_panelDescriptorArgsP(void * jarg1) {
  ctl_panel_descriptor_access_args_t *arg1 = (ctl_panel_descriptor_access_args_t *) 0 ;
  
  arg1 = (ctl_panel_descriptor_access_args_t *)jarg1; 
  delete_panelDescriptorArgsP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_panelDescriptorArgsP_assign(void * jarg1, void * jarg2) {
  ctl_panel_descriptor_access_args_t *arg1 = (ctl_panel_descriptor_access_args_t *) 0 ;
  ctl_panel_descriptor_access_args_t arg2 ;
  ctl_panel_descriptor_access_args_t *argp2 ;
  
  arg1 = (ctl_panel_descriptor_access_args_t *)jarg1; 
  argp2 = (ctl_panel_descriptor_access_args_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_panel_descriptor_access_args_t", 0);
    return ;
  }
  arg2 = *argp2; 
  panelDescriptorArgsP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_panelDescriptorArgsP_value(void * jarg1) {
  void * jresult ;
  ctl_panel_descriptor_access_args_t *arg1 = (ctl_panel_descriptor_access_args_t *) 0 ;
  ctl_panel_descriptor_access_args_t result;
  
  arg1 = (ctl_panel_descriptor_access_args_t *)jarg1; 
  result = panelDescriptorArgsP_value(arg1);
  jresult = new ctl_panel_descriptor_access_args_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_dceArgsP() {
  void * jresult ;
  ctl_dce_args_t *result = 0 ;
  
  result = (ctl_dce_args_t *)new_dceArgsP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_dceArgsP(void * jarg1) {
  void * jresult ;
  ctl_dce_args_t arg1 ;
  ctl_dce_args_t *argp1 ;
  ctl_dce_args_t *result = 0 ;
  
  argp1 = (ctl_dce_args_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_dce_args_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_dce_args_t *)copy_dceArgsP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_dceArgsP(void * jarg1) {
  ctl_dce_args_t *arg1 = (ctl_dce_args_t *) 0 ;
  
  arg1 = (ctl_dce_args_t *)jarg1; 
  delete_dceArgsP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_dceArgsP_assign(void * jarg1, void * jarg2) {
  ctl_dce_args_t *arg1 = (ctl_dce_args_t *) 0 ;
  ctl_dce_args_t arg2 ;
  ctl_dce_args_t *argp2 ;
  
  arg1 = (ctl_dce_args_t *)jarg1; 
  argp2 = (ctl_dce_args_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_dce_args_t", 0);
    return ;
  }
  arg2 = *argp2; 
  dceArgsP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_dceArgsP_value(void * jarg1) {
  void * jresult ;
  ctl_dce_args_t *arg1 = (ctl_dce_args_t *) 0 ;
  ctl_dce_args_t result;
  
  arg1 = (ctl_dce_args_t *)jarg1; 
  result = dceArgsP_value(arg1);
  jresult = new ctl_dce_args_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_waitPropertyChangeArgsP() {
  void * jresult ;
  ctl_wait_property_change_args_t *result = 0 ;
  
  result = (ctl_wait_property_change_args_t *)new_waitPropertyChangeArgsP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_copy_waitPropertyChangeArgsP(void * jarg1) {
  void * jresult ;
  ctl_wait_property_change_args_t arg1 ;
  ctl_wait_property_change_args_t *argp1 ;
  ctl_wait_property_change_args_t *result = 0 ;
  
  argp1 = (ctl_wait_property_change_args_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_wait_property_change_args_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ctl_wait_property_change_args_t *)copy_waitPropertyChangeArgsP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_waitPropertyChangeArgsP(void * jarg1) {
  ctl_wait_property_change_args_t *arg1 = (ctl_wait_property_change_args_t *) 0 ;
  
  arg1 = (ctl_wait_property_change_args_t *)jarg1; 
  delete_waitPropertyChangeArgsP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_waitPropertyChangeArgsP_assign(void * jarg1, void * jarg2) {
  ctl_wait_property_change_args_t *arg1 = (ctl_wait_property_change_args_t *) 0 ;
  ctl_wait_property_change_args_t arg2 ;
  ctl_wait_property_change_args_t *argp2 ;
  
  arg1 = (ctl_wait_property_change_args_t *)jarg1; 
  argp2 = (ctl_wait_property_change_args_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_wait_property_change_args_t", 0);
    return ;
  }
  arg2 = *argp2; 
  waitPropertyChangeArgsP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_waitPropertyChangeArgsP_value(void * jarg1) {
  void * jresult ;
  ctl_wait_property_change_args_t *arg1 = (ctl_wait_property_change_args_t *) 0 ;
  ctl_wait_property_change_args_t result;
  
  arg1 = (ctl_wait_property_change_args_t *)jarg1; 
  result = waitPropertyChangeArgsP_value(arg1);
  jresult = new ctl_wait_property_change_args_t(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_IMPL_MAJOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_IMPL_MINOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_IMPL_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(((1 << 16)|(1&0x0000ffff)));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_base_interface_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_base_interface_t *arg1 = (_ctl_base_interface_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_base_interface_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_base_interface_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_base_interface_t *arg1 = (_ctl_base_interface_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_base_interface_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_base_interface_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_base_interface_t *arg1 = (_ctl_base_interface_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_base_interface_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_base_interface_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_base_interface_t *arg1 = (_ctl_base_interface_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_base_interface_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_base_interface_t() {
  void * jresult ;
  _ctl_base_interface_t *result = 0 ;
  
  result = (_ctl_base_interface_t *)new _ctl_base_interface_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_base_interface_t(void * jarg1) {
  _ctl_base_interface_t *arg1 = (_ctl_base_interface_t *) 0 ;
  
  arg1 = (_ctl_base_interface_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_t_min_possible_value_set(void * jarg1, float jarg2) {
  _ctl_property_range_info_t *arg1 = (_ctl_property_range_info_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_property_range_info_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_possible_value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_t_min_possible_value_get(void * jarg1) {
  float jresult ;
  _ctl_property_range_info_t *arg1 = (_ctl_property_range_info_t *) 0 ;
  float result;
  
  arg1 = (_ctl_property_range_info_t *)jarg1; 
  result = (float) ((arg1)->min_possible_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_t_max_possible_value_set(void * jarg1, float jarg2) {
  _ctl_property_range_info_t *arg1 = (_ctl_property_range_info_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_property_range_info_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_possible_value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_t_max_possible_value_get(void * jarg1) {
  float jresult ;
  _ctl_property_range_info_t *arg1 = (_ctl_property_range_info_t *) 0 ;
  float result;
  
  arg1 = (_ctl_property_range_info_t *)jarg1; 
  result = (float) ((arg1)->max_possible_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_t_step_size_set(void * jarg1, float jarg2) {
  _ctl_property_range_info_t *arg1 = (_ctl_property_range_info_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_property_range_info_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->step_size = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_t_step_size_get(void * jarg1) {
  float jresult ;
  _ctl_property_range_info_t *arg1 = (_ctl_property_range_info_t *) 0 ;
  float result;
  
  arg1 = (_ctl_property_range_info_t *)jarg1; 
  result = (float) ((arg1)->step_size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_t_default_value_set(void * jarg1, float jarg2) {
  _ctl_property_range_info_t *arg1 = (_ctl_property_range_info_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_property_range_info_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->default_value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_t_default_value_get(void * jarg1) {
  float jresult ;
  _ctl_property_range_info_t *arg1 = (_ctl_property_range_info_t *) 0 ;
  float result;
  
  arg1 = (_ctl_property_range_info_t *)jarg1; 
  result = (float) ((arg1)->default_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_range_info_t() {
  void * jresult ;
  _ctl_property_range_info_t *result = 0 ;
  
  result = (_ctl_property_range_info_t *)new _ctl_property_range_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_range_info_t(void * jarg1) {
  _ctl_property_range_info_t *arg1 = (_ctl_property_range_info_t *) 0 ;
  
  arg1 = (_ctl_property_range_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_int_t_min_possible_value_set(void * jarg1, int jarg2) {
  _ctl_property_range_info_int_t *arg1 = (_ctl_property_range_info_int_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_property_range_info_int_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->min_possible_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_int_t_min_possible_value_get(void * jarg1) {
  int jresult ;
  _ctl_property_range_info_int_t *arg1 = (_ctl_property_range_info_int_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_property_range_info_int_t *)jarg1; 
  result = (int32_t) ((arg1)->min_possible_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_int_t_max_possible_value_set(void * jarg1, int jarg2) {
  _ctl_property_range_info_int_t *arg1 = (_ctl_property_range_info_int_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_property_range_info_int_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->max_possible_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_int_t_max_possible_value_get(void * jarg1) {
  int jresult ;
  _ctl_property_range_info_int_t *arg1 = (_ctl_property_range_info_int_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_property_range_info_int_t *)jarg1; 
  result = (int32_t) ((arg1)->max_possible_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_int_t_step_size_set(void * jarg1, int jarg2) {
  _ctl_property_range_info_int_t *arg1 = (_ctl_property_range_info_int_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_property_range_info_int_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->step_size = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_int_t_step_size_get(void * jarg1) {
  int jresult ;
  _ctl_property_range_info_int_t *arg1 = (_ctl_property_range_info_int_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_property_range_info_int_t *)jarg1; 
  result = (int32_t) ((arg1)->step_size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_int_t_default_value_set(void * jarg1, int jarg2) {
  _ctl_property_range_info_int_t *arg1 = (_ctl_property_range_info_int_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_property_range_info_int_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->default_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_int_t_default_value_get(void * jarg1) {
  int jresult ;
  _ctl_property_range_info_int_t *arg1 = (_ctl_property_range_info_int_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_property_range_info_int_t *)jarg1; 
  result = (int32_t) ((arg1)->default_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_range_info_int_t() {
  void * jresult ;
  _ctl_property_range_info_int_t *result = 0 ;
  
  result = (_ctl_property_range_info_int_t *)new _ctl_property_range_info_int_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_range_info_int_t(void * jarg1) {
  _ctl_property_range_info_int_t *arg1 = (_ctl_property_range_info_int_t *) 0 ;
  
  arg1 = (_ctl_property_range_info_int_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_uint_t_min_possible_value_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_range_info_uint_t *arg1 = (_ctl_property_range_info_uint_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_property_range_info_uint_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->min_possible_value = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_uint_t_min_possible_value_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_range_info_uint_t *arg1 = (_ctl_property_range_info_uint_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_property_range_info_uint_t *)jarg1; 
  result = (uint32_t) ((arg1)->min_possible_value);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_uint_t_max_possible_value_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_range_info_uint_t *arg1 = (_ctl_property_range_info_uint_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_property_range_info_uint_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->max_possible_value = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_uint_t_max_possible_value_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_range_info_uint_t *arg1 = (_ctl_property_range_info_uint_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_property_range_info_uint_t *)jarg1; 
  result = (uint32_t) ((arg1)->max_possible_value);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_uint_t_step_size_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_range_info_uint_t *arg1 = (_ctl_property_range_info_uint_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_property_range_info_uint_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->step_size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_uint_t_step_size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_range_info_uint_t *arg1 = (_ctl_property_range_info_uint_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_property_range_info_uint_t *)jarg1; 
  result = (uint32_t) ((arg1)->step_size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_uint_t_default_value_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_range_info_uint_t *arg1 = (_ctl_property_range_info_uint_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_property_range_info_uint_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->default_value = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_range_info_uint_t_default_value_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_range_info_uint_t *arg1 = (_ctl_property_range_info_uint_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_property_range_info_uint_t *)jarg1; 
  result = (uint32_t) ((arg1)->default_value);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_range_info_uint_t() {
  void * jresult ;
  _ctl_property_range_info_uint_t *result = 0 ;
  
  result = (_ctl_property_range_info_uint_t *)new _ctl_property_range_info_uint_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_range_info_uint_t(void * jarg1) {
  _ctl_property_range_info_uint_t *arg1 = (_ctl_property_range_info_uint_t *) 0 ;
  
  arg1 = (_ctl_property_range_info_uint_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_boolean_t_DefaultState_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_info_boolean_t *arg1 = (_ctl_property_info_boolean_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_property_info_boolean_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DefaultState = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_boolean_t_DefaultState_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_info_boolean_t *arg1 = (_ctl_property_info_boolean_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_property_info_boolean_t *)jarg1; 
  result = (bool) ((arg1)->DefaultState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_info_boolean_t() {
  void * jresult ;
  _ctl_property_info_boolean_t *result = 0 ;
  
  result = (_ctl_property_info_boolean_t *)new _ctl_property_info_boolean_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_info_boolean_t(void * jarg1) {
  _ctl_property_info_boolean_t *arg1 = (_ctl_property_info_boolean_t *) 0 ;
  
  arg1 = (_ctl_property_info_boolean_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_boolean_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_boolean_t *arg1 = (_ctl_property_boolean_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_property_boolean_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_boolean_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_boolean_t *arg1 = (_ctl_property_boolean_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_property_boolean_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_boolean_t() {
  void * jresult ;
  _ctl_property_boolean_t *result = 0 ;
  
  result = (_ctl_property_boolean_t *)new _ctl_property_boolean_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_boolean_t(void * jarg1) {
  _ctl_property_boolean_t *arg1 = (_ctl_property_boolean_t *) 0 ;
  
  arg1 = (_ctl_property_boolean_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_enum_t_SupportedTypes_set(void * jarg1, unsigned long long jarg2) {
  _ctl_property_info_enum_t *arg1 = (_ctl_property_info_enum_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_property_info_enum_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->SupportedTypes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_enum_t_SupportedTypes_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_property_info_enum_t *arg1 = (_ctl_property_info_enum_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_property_info_enum_t *)jarg1; 
  result = (uint64_t) ((arg1)->SupportedTypes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_enum_t_DefaultType_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_info_enum_t *arg1 = (_ctl_property_info_enum_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_property_info_enum_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DefaultType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_enum_t_DefaultType_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_info_enum_t *arg1 = (_ctl_property_info_enum_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_property_info_enum_t *)jarg1; 
  result = (uint32_t) ((arg1)->DefaultType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_info_enum_t() {
  void * jresult ;
  _ctl_property_info_enum_t *result = 0 ;
  
  result = (_ctl_property_info_enum_t *)new _ctl_property_info_enum_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_info_enum_t(void * jarg1) {
  _ctl_property_info_enum_t *arg1 = (_ctl_property_info_enum_t *) 0 ;
  
  arg1 = (_ctl_property_info_enum_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_enum_t_EnableType_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_enum_t *arg1 = (_ctl_property_enum_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_property_enum_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->EnableType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_enum_t_EnableType_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_enum_t *arg1 = (_ctl_property_enum_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_property_enum_t *)jarg1; 
  result = (uint32_t) ((arg1)->EnableType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_enum_t() {
  void * jresult ;
  _ctl_property_enum_t *result = 0 ;
  
  result = (_ctl_property_enum_t *)new _ctl_property_enum_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_enum_t(void * jarg1) {
  _ctl_property_enum_t *arg1 = (_ctl_property_enum_t *) 0 ;
  
  arg1 = (_ctl_property_enum_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_float_t_DefaultEnable_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_info_float_t *arg1 = (_ctl_property_info_float_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_property_info_float_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DefaultEnable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_float_t_DefaultEnable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_info_float_t *arg1 = (_ctl_property_info_float_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_property_info_float_t *)jarg1; 
  result = (bool) ((arg1)->DefaultEnable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_float_t_RangeInfo_set(void * jarg1, void * jarg2) {
  _ctl_property_info_float_t *arg1 = (_ctl_property_info_float_t *) 0 ;
  ctl_property_range_info_t *arg2 = (ctl_property_range_info_t *) 0 ;
  
  arg1 = (_ctl_property_info_float_t *)jarg1; 
  arg2 = (ctl_property_range_info_t *)jarg2; 
  if (arg1) (arg1)->RangeInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_float_t_RangeInfo_get(void * jarg1) {
  void * jresult ;
  _ctl_property_info_float_t *arg1 = (_ctl_property_info_float_t *) 0 ;
  ctl_property_range_info_t *result = 0 ;
  
  arg1 = (_ctl_property_info_float_t *)jarg1; 
  result = (ctl_property_range_info_t *)& ((arg1)->RangeInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_info_float_t() {
  void * jresult ;
  _ctl_property_info_float_t *result = 0 ;
  
  result = (_ctl_property_info_float_t *)new _ctl_property_info_float_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_info_float_t(void * jarg1) {
  _ctl_property_info_float_t *arg1 = (_ctl_property_info_float_t *) 0 ;
  
  arg1 = (_ctl_property_info_float_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_float_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_float_t *arg1 = (_ctl_property_float_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_property_float_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_float_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_float_t *arg1 = (_ctl_property_float_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_property_float_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_float_t_Value_set(void * jarg1, float jarg2) {
  _ctl_property_float_t *arg1 = (_ctl_property_float_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_property_float_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_float_t_Value_get(void * jarg1) {
  float jresult ;
  _ctl_property_float_t *arg1 = (_ctl_property_float_t *) 0 ;
  float result;
  
  arg1 = (_ctl_property_float_t *)jarg1; 
  result = (float) ((arg1)->Value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_float_t() {
  void * jresult ;
  _ctl_property_float_t *result = 0 ;
  
  result = (_ctl_property_float_t *)new _ctl_property_float_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_float_t(void * jarg1) {
  _ctl_property_float_t *arg1 = (_ctl_property_float_t *) 0 ;
  
  arg1 = (_ctl_property_float_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_int_t_DefaultEnable_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_info_int_t *arg1 = (_ctl_property_info_int_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_property_info_int_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DefaultEnable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_int_t_DefaultEnable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_info_int_t *arg1 = (_ctl_property_info_int_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_property_info_int_t *)jarg1; 
  result = (bool) ((arg1)->DefaultEnable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_int_t_RangeInfo_set(void * jarg1, void * jarg2) {
  _ctl_property_info_int_t *arg1 = (_ctl_property_info_int_t *) 0 ;
  ctl_property_range_info_int_t *arg2 = (ctl_property_range_info_int_t *) 0 ;
  
  arg1 = (_ctl_property_info_int_t *)jarg1; 
  arg2 = (ctl_property_range_info_int_t *)jarg2; 
  if (arg1) (arg1)->RangeInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_int_t_RangeInfo_get(void * jarg1) {
  void * jresult ;
  _ctl_property_info_int_t *arg1 = (_ctl_property_info_int_t *) 0 ;
  ctl_property_range_info_int_t *result = 0 ;
  
  arg1 = (_ctl_property_info_int_t *)jarg1; 
  result = (ctl_property_range_info_int_t *)& ((arg1)->RangeInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_info_int_t() {
  void * jresult ;
  _ctl_property_info_int_t *result = 0 ;
  
  result = (_ctl_property_info_int_t *)new _ctl_property_info_int_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_info_int_t(void * jarg1) {
  _ctl_property_info_int_t *arg1 = (_ctl_property_info_int_t *) 0 ;
  
  arg1 = (_ctl_property_info_int_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_int_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_int_t *arg1 = (_ctl_property_int_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_property_int_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_int_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_int_t *arg1 = (_ctl_property_int_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_property_int_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_int_t_Value_set(void * jarg1, int jarg2) {
  _ctl_property_int_t *arg1 = (_ctl_property_int_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_property_int_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_int_t_Value_get(void * jarg1) {
  int jresult ;
  _ctl_property_int_t *arg1 = (_ctl_property_int_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_property_int_t *)jarg1; 
  result = (int32_t) ((arg1)->Value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_int_t() {
  void * jresult ;
  _ctl_property_int_t *result = 0 ;
  
  result = (_ctl_property_int_t *)new _ctl_property_int_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_int_t(void * jarg1) {
  _ctl_property_int_t *arg1 = (_ctl_property_int_t *) 0 ;
  
  arg1 = (_ctl_property_int_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_uint_t_DefaultEnable_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_info_uint_t *arg1 = (_ctl_property_info_uint_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_property_info_uint_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DefaultEnable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_uint_t_DefaultEnable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_info_uint_t *arg1 = (_ctl_property_info_uint_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_property_info_uint_t *)jarg1; 
  result = (bool) ((arg1)->DefaultEnable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_uint_t_RangeInfo_set(void * jarg1, void * jarg2) {
  _ctl_property_info_uint_t *arg1 = (_ctl_property_info_uint_t *) 0 ;
  ctl_property_range_info_uint_t *arg2 = (ctl_property_range_info_uint_t *) 0 ;
  
  arg1 = (_ctl_property_info_uint_t *)jarg1; 
  arg2 = (ctl_property_range_info_uint_t *)jarg2; 
  if (arg1) (arg1)->RangeInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_uint_t_RangeInfo_get(void * jarg1) {
  void * jresult ;
  _ctl_property_info_uint_t *arg1 = (_ctl_property_info_uint_t *) 0 ;
  ctl_property_range_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_property_info_uint_t *)jarg1; 
  result = (ctl_property_range_info_uint_t *)& ((arg1)->RangeInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_info_uint_t() {
  void * jresult ;
  _ctl_property_info_uint_t *result = 0 ;
  
  result = (_ctl_property_info_uint_t *)new _ctl_property_info_uint_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_info_uint_t(void * jarg1) {
  _ctl_property_info_uint_t *arg1 = (_ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_property_info_uint_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_uint_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_uint_t *arg1 = (_ctl_property_uint_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_property_uint_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_uint_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_uint_t *arg1 = (_ctl_property_uint_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_property_uint_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_uint_t_Value_set(void * jarg1, unsigned int jarg2) {
  _ctl_property_uint_t *arg1 = (_ctl_property_uint_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_property_uint_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Value = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_uint_t_Value_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_property_uint_t *arg1 = (_ctl_property_uint_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_property_uint_t *)jarg1; 
  result = (uint32_t) ((arg1)->Value);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_uint_t() {
  void * jresult ;
  _ctl_property_uint_t *result = 0 ;
  
  result = (_ctl_property_uint_t *)new _ctl_property_uint_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_uint_t(void * jarg1) {
  _ctl_property_uint_t *arg1 = (_ctl_property_uint_t *) 0 ;
  
  arg1 = (_ctl_property_uint_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_BoolType_set(void * jarg1, void * jarg2) {
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_boolean_t *arg2 = (ctl_property_info_boolean_t *) 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  arg2 = (ctl_property_info_boolean_t *)jarg2; 
  if (arg1) (arg1)->BoolType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_BoolType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_boolean_t *result = 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  result = (ctl_property_info_boolean_t *)& ((arg1)->BoolType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_FloatType_set(void * jarg1, void * jarg2) {
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_float_t *arg2 = (ctl_property_info_float_t *) 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  arg2 = (ctl_property_info_float_t *)jarg2; 
  if (arg1) (arg1)->FloatType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_FloatType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_float_t *result = 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  result = (ctl_property_info_float_t *)& ((arg1)->FloatType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_IntType_set(void * jarg1, void * jarg2) {
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_int_t *arg2 = (ctl_property_info_int_t *) 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  arg2 = (ctl_property_info_int_t *)jarg2; 
  if (arg1) (arg1)->IntType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_IntType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_int_t *result = 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  result = (ctl_property_info_int_t *)& ((arg1)->IntType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_EnumType_set(void * jarg1, void * jarg2) {
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_enum_t *arg2 = (ctl_property_info_enum_t *) 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  arg2 = (ctl_property_info_enum_t *)jarg2; 
  if (arg1) (arg1)->EnumType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_EnumType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_enum_t *result = 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  result = (ctl_property_info_enum_t *)& ((arg1)->EnumType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_UIntType_set(void * jarg1, void * jarg2) {
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->UIntType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_info_t_UIntType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->UIntType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_info_t() {
  void * jresult ;
  _ctl_property_info_t *result = 0 ;
  
  result = (_ctl_property_info_t *)new _ctl_property_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_info_t(void * jarg1) {
  _ctl_property_info_t *arg1 = (_ctl_property_info_t *) 0 ;
  
  arg1 = (_ctl_property_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_BoolType_set(void * jarg1, void * jarg2) {
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_boolean_t *arg2 = (ctl_property_boolean_t *) 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  arg2 = (ctl_property_boolean_t *)jarg2; 
  if (arg1) (arg1)->BoolType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_BoolType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_boolean_t *result = 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  result = (ctl_property_boolean_t *)& ((arg1)->BoolType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_FloatType_set(void * jarg1, void * jarg2) {
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_float_t *arg2 = (ctl_property_float_t *) 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  arg2 = (ctl_property_float_t *)jarg2; 
  if (arg1) (arg1)->FloatType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_FloatType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_float_t *result = 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  result = (ctl_property_float_t *)& ((arg1)->FloatType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_IntType_set(void * jarg1, void * jarg2) {
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_int_t *arg2 = (ctl_property_int_t *) 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  arg2 = (ctl_property_int_t *)jarg2; 
  if (arg1) (arg1)->IntType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_IntType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_int_t *result = 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  result = (ctl_property_int_t *)& ((arg1)->IntType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_EnumType_set(void * jarg1, void * jarg2) {
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_enum_t *arg2 = (ctl_property_enum_t *) 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  arg2 = (ctl_property_enum_t *)jarg2; 
  if (arg1) (arg1)->EnumType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_EnumType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_enum_t *result = 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  result = (ctl_property_enum_t *)& ((arg1)->EnumType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_UIntType_set(void * jarg1, void * jarg2) {
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_uint_t *arg2 = (ctl_property_uint_t *) 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  arg2 = (ctl_property_uint_t *)jarg2; 
  if (arg1) (arg1)->UIntType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_property_t_UIntType_get(void * jarg1) {
  void * jresult ;
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  ctl_property_uint_t *result = 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  result = (ctl_property_uint_t *)& ((arg1)->UIntType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_property_t() {
  void * jresult ;
  _ctl_property_t *result = 0 ;
  
  result = (_ctl_property_t *)new _ctl_property_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_property_t(void * jarg1) {
  _ctl_property_t *arg1 = (_ctl_property_t *) 0 ;
  
  arg1 = (_ctl_property_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_MAX_DEVICE_NAME_LEN_get() {
  int jresult ;
  int result;
  
  result = (int)(100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_MAX_RESERVED_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(108);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_data8_set(void * jarg1, signed char jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  int8_t arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->data8 = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_data8_get(void * jarg1) {
  signed char jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  int8_t result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (int8_t) ((arg1)->data8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datau8_set(void * jarg1, unsigned char jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->datau8 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datau8_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (uint8_t) ((arg1)->datau8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_data16_set(void * jarg1, short jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  int16_t arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (int16_t)jarg2; 
  if (arg1) (arg1)->data16 = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_data16_get(void * jarg1) {
  short jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  int16_t result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (int16_t) ((arg1)->data16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datau16_set(void * jarg1, unsigned short jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->datau16 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datau16_get(void * jarg1) {
  unsigned short jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  uint16_t result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (uint16_t) ((arg1)->datau16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_data32_set(void * jarg1, int jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->data32 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_data32_get(void * jarg1) {
  int jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (int32_t) ((arg1)->data32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datau32_set(void * jarg1, unsigned int jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->datau32 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datau32_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (uint32_t) ((arg1)->datau32);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_data64_set(void * jarg1, long long jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->data64 = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_data64_get(void * jarg1) {
  long long jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  int64_t result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (int64_t) ((arg1)->data64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datau64_set(void * jarg1, unsigned long long jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->datau64 = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datau64_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (uint64_t) ((arg1)->datau64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datafloat_set(void * jarg1, float jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->datafloat = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datafloat_get(void * jarg1) {
  float jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  float result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (float) ((arg1)->datafloat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datadouble_set(void * jarg1, double jarg2) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->datadouble = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_data_value_t_datadouble_get(void * jarg1) {
  double jresult ;
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  double result;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  result = (double) ((arg1)->datadouble);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_data_value_t() {
  void * jresult ;
  _ctl_data_value_t *result = 0 ;
  
  result = (_ctl_data_value_t *)new _ctl_data_value_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_data_value_t(void * jarg1) {
  _ctl_data_value_t *arg1 = (_ctl_data_value_t *) 0 ;
  
  arg1 = (_ctl_data_value_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_base_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_base_properties_t *arg1 = (_ctl_base_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_base_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_base_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_base_properties_t *arg1 = (_ctl_base_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_base_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_base_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_base_properties_t *arg1 = (_ctl_base_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_base_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_base_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_base_properties_t *arg1 = (_ctl_base_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_base_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_base_properties_t() {
  void * jresult ;
  _ctl_base_properties_t *result = 0 ;
  
  result = (_ctl_base_properties_t *)new _ctl_base_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_base_properties_t(void * jarg1) {
  _ctl_base_properties_t *arg1 = (_ctl_base_properties_t *) 0 ;
  
  arg1 = (_ctl_base_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_application_id_t_Data1_set(void * jarg1, unsigned int jarg2) {
  _ctl_application_id_t *arg1 = (_ctl_application_id_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_application_id_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Data1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_application_id_t_Data1_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_application_id_t *arg1 = (_ctl_application_id_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_application_id_t *)jarg1; 
  result = (uint32_t) ((arg1)->Data1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_application_id_t_Data2_set(void * jarg1, unsigned short jarg2) {
  _ctl_application_id_t *arg1 = (_ctl_application_id_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (_ctl_application_id_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Data2 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IGCLWrapper_ctl_application_id_t_Data2_get(void * jarg1) {
  unsigned short jresult ;
  _ctl_application_id_t *arg1 = (_ctl_application_id_t *) 0 ;
  uint16_t result;
  
  arg1 = (_ctl_application_id_t *)jarg1; 
  result = (uint16_t) ((arg1)->Data2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_application_id_t_Data3_set(void * jarg1, unsigned short jarg2) {
  _ctl_application_id_t *arg1 = (_ctl_application_id_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (_ctl_application_id_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Data3 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IGCLWrapper_ctl_application_id_t_Data3_get(void * jarg1) {
  unsigned short jresult ;
  _ctl_application_id_t *arg1 = (_ctl_application_id_t *) 0 ;
  uint16_t result;
  
  arg1 = (_ctl_application_id_t *)jarg1; 
  result = (uint16_t) ((arg1)->Data3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_application_id_t_Data4_set(void * jarg1, void * jarg2) {
  _ctl_application_id_t *arg1 = (_ctl_application_id_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (_ctl_application_id_t *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->Data4;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_application_id_t_Data4_get(void * jarg1) {
  void * jresult ;
  _ctl_application_id_t *arg1 = (_ctl_application_id_t *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (_ctl_application_id_t *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->Data4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_application_id_t() {
  void * jresult ;
  _ctl_application_id_t *result = 0 ;
  
  result = (_ctl_application_id_t *)new _ctl_application_id_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_application_id_t(void * jarg1) {
  _ctl_application_id_t *arg1 = (_ctl_application_id_t *) 0 ;
  
  arg1 = (_ctl_application_id_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_AppVersion_set(void * jarg1, unsigned int jarg2) {
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  ctl_version_info_t arg2 ;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  arg2 = (ctl_version_info_t)jarg2; 
  if (arg1) (arg1)->AppVersion = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_AppVersion_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  ctl_version_info_t result;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  result = (ctl_version_info_t) ((arg1)->AppVersion);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_flags_set(void * jarg1, unsigned int jarg2) {
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  ctl_init_flags_t arg2 ;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  arg2 = (ctl_init_flags_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_flags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  ctl_init_flags_t result;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  result = (ctl_init_flags_t) ((arg1)->flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_SupportedVersion_set(void * jarg1, unsigned int jarg2) {
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  ctl_version_info_t arg2 ;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  arg2 = (ctl_version_info_t)jarg2; 
  if (arg1) (arg1)->SupportedVersion = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_SupportedVersion_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  ctl_version_info_t result;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  result = (ctl_version_info_t) ((arg1)->SupportedVersion);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_ApplicationUID_set(void * jarg1, void * jarg2) {
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  ctl_application_id_t *arg2 = (ctl_application_id_t *) 0 ;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  arg2 = (ctl_application_id_t *)jarg2; 
  if (arg1) (arg1)->ApplicationUID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_init_args_t_ApplicationUID_get(void * jarg1) {
  void * jresult ;
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  ctl_application_id_t *result = 0 ;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  result = (ctl_application_id_t *)& ((arg1)->ApplicationUID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_init_args_t() {
  void * jresult ;
  _ctl_init_args_t *result = 0 ;
  
  result = (_ctl_init_args_t *)new _ctl_init_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_init_args_t(void * jarg1) {
  _ctl_init_args_t *arg1 = (_ctl_init_args_t *) 0 ;
  
  arg1 = (_ctl_init_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_reserved_args_t *arg1 = (_ctl_reserved_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_reserved_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_reserved_args_t *arg1 = (_ctl_reserved_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_reserved_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_reserved_args_t *arg1 = (_ctl_reserved_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_reserved_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_reserved_args_t *arg1 = (_ctl_reserved_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_reserved_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_t_pSpecialArg_set(void * jarg1, void * jarg2) {
  _ctl_reserved_args_t *arg1 = (_ctl_reserved_args_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (_ctl_reserved_args_t *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pSpecialArg = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_t_pSpecialArg_get(void * jarg1) {
  void * jresult ;
  _ctl_reserved_args_t *arg1 = (_ctl_reserved_args_t *) 0 ;
  void *result = 0 ;
  
  arg1 = (_ctl_reserved_args_t *)jarg1; 
  result = (void *) ((arg1)->pSpecialArg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_t_ArgSize_set(void * jarg1, unsigned int jarg2) {
  _ctl_reserved_args_t *arg1 = (_ctl_reserved_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_reserved_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ArgSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_t_ArgSize_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_reserved_args_t *arg1 = (_ctl_reserved_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_reserved_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->ArgSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_reserved_args_t() {
  void * jresult ;
  _ctl_reserved_args_t *result = 0 ;
  
  result = (_ctl_reserved_args_t *)new _ctl_reserved_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_reserved_args_t(void * jarg1) {
  _ctl_reserved_args_t *arg1 = (_ctl_reserved_args_t *) 0 ;
  
  arg1 = (_ctl_reserved_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_base_t_ReservedFuncID_set(void * jarg1, void * jarg2) {
  _ctl_reserved_args_base_t *arg1 = (_ctl_reserved_args_base_t *) 0 ;
  ctl_application_id_t *arg2 = (ctl_application_id_t *) 0 ;
  
  arg1 = (_ctl_reserved_args_base_t *)jarg1; 
  arg2 = (ctl_application_id_t *)jarg2; 
  if (arg1) (arg1)->ReservedFuncID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_reserved_args_base_t_ReservedFuncID_get(void * jarg1) {
  void * jresult ;
  _ctl_reserved_args_base_t *arg1 = (_ctl_reserved_args_base_t *) 0 ;
  ctl_application_id_t *result = 0 ;
  
  arg1 = (_ctl_reserved_args_base_t *)jarg1; 
  result = (ctl_application_id_t *)& ((arg1)->ReservedFuncID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_reserved_args_base_t() {
  void * jresult ;
  _ctl_reserved_args_base_t *result = 0 ;
  
  result = (_ctl_reserved_args_base_t *)new _ctl_reserved_args_base_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_reserved_args_base_t(void * jarg1) {
  _ctl_reserved_args_base_t *arg1 = (_ctl_reserved_args_base_t *) 0 ;
  
  arg1 = (_ctl_reserved_args_base_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_unlock_capability_t_ReservedFuncID_set(void * jarg1, void * jarg2) {
  _ctl_unlock_capability_t *arg1 = (_ctl_unlock_capability_t *) 0 ;
  ctl_application_id_t *arg2 = (ctl_application_id_t *) 0 ;
  
  arg1 = (_ctl_unlock_capability_t *)jarg1; 
  arg2 = (ctl_application_id_t *)jarg2; 
  if (arg1) (arg1)->ReservedFuncID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_unlock_capability_t_ReservedFuncID_get(void * jarg1) {
  void * jresult ;
  _ctl_unlock_capability_t *arg1 = (_ctl_unlock_capability_t *) 0 ;
  ctl_application_id_t *result = 0 ;
  
  arg1 = (_ctl_unlock_capability_t *)jarg1; 
  result = (ctl_application_id_t *)& ((arg1)->ReservedFuncID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_unlock_capability_t_UnlockCapsID_set(void * jarg1, void * jarg2) {
  _ctl_unlock_capability_t *arg1 = (_ctl_unlock_capability_t *) 0 ;
  ctl_application_id_t *arg2 = (ctl_application_id_t *) 0 ;
  
  arg1 = (_ctl_unlock_capability_t *)jarg1; 
  arg2 = (ctl_application_id_t *)jarg2; 
  if (arg1) (arg1)->UnlockCapsID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_unlock_capability_t_UnlockCapsID_get(void * jarg1) {
  void * jresult ;
  _ctl_unlock_capability_t *arg1 = (_ctl_unlock_capability_t *) 0 ;
  ctl_application_id_t *result = 0 ;
  
  arg1 = (_ctl_unlock_capability_t *)jarg1; 
  result = (ctl_application_id_t *)& ((arg1)->UnlockCapsID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_unlock_capability_t() {
  void * jresult ;
  _ctl_unlock_capability_t *result = 0 ;
  
  result = (_ctl_unlock_capability_t *)new _ctl_unlock_capability_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_unlock_capability_t(void * jarg1) {
  _ctl_unlock_capability_t *arg1 = (_ctl_unlock_capability_t *) 0 ;
  
  arg1 = (_ctl_unlock_capability_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_UnlockID_set(void * jarg1, void * jarg2) {
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  ctl_application_id_t *arg2 = (ctl_application_id_t *) 0 ;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  arg2 = (ctl_application_id_t *)jarg2; 
  if (arg1) (arg1)->UnlockID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_UnlockID_get(void * jarg1) {
  void * jresult ;
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  ctl_application_id_t *result = 0 ;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  result = (ctl_application_id_t *)& ((arg1)->UnlockID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_pRuntimePath_set(void * jarg1, void * jarg2) {
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  if (arg1) (arg1)->pRuntimePath = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_pRuntimePath_get(void * jarg1) {
  void * jresult ;
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  result = (wchar_t *) ((arg1)->pRuntimePath);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_DeviceID_set(void * jarg1, unsigned short jarg2) {
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->DeviceID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_DeviceID_get(void * jarg1) {
  unsigned short jresult ;
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  uint16_t result;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  result = (uint16_t) ((arg1)->DeviceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_RevID_set(void * jarg1, unsigned char jarg2) {
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->RevID = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_runtime_path_args_t_RevID_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->RevID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_runtime_path_args_t() {
  void * jresult ;
  _ctl_runtime_path_args_t *result = 0 ;
  
  result = (_ctl_runtime_path_args_t *)new _ctl_runtime_path_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_runtime_path_args_t(void * jarg1) {
  _ctl_runtime_path_args_t *arg1 = (_ctl_runtime_path_args_t *) 0 ;
  
  arg1 = (_ctl_runtime_path_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlInit(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_init_args_t *arg1 = (ctl_init_args_t *) 0 ;
  ctl_api_handle_t *arg2 = (ctl_api_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_init_args_t *)jarg1; 
  arg2 = (ctl_api_handle_t *)jarg2; 
  result = (ctl_result_t)ctlInit(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlClose(void * jarg1) {
  int jresult ;
  ctl_api_handle_t arg1 = (ctl_api_handle_t) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_api_handle_t)jarg1; 
  result = (ctl_result_t)ctlClose(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlSetRuntimePath(void * jarg1) {
  int jresult ;
  ctl_runtime_path_args_t *arg1 = (ctl_runtime_path_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_runtime_path_args_t *)jarg1; 
  result = (ctl_result_t)ctlSetRuntimePath(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_version_t_major_version_set(void * jarg1, unsigned long long jarg2) {
  _ctl_firmware_version_t *arg1 = (_ctl_firmware_version_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_firmware_version_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->major_version = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_version_t_major_version_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_firmware_version_t *arg1 = (_ctl_firmware_version_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_firmware_version_t *)jarg1; 
  result = (uint64_t) ((arg1)->major_version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_version_t_minor_version_set(void * jarg1, unsigned long long jarg2) {
  _ctl_firmware_version_t *arg1 = (_ctl_firmware_version_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_firmware_version_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->minor_version = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_version_t_minor_version_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_firmware_version_t *arg1 = (_ctl_firmware_version_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_firmware_version_t *)jarg1; 
  result = (uint64_t) ((arg1)->minor_version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_version_t_build_number_set(void * jarg1, unsigned long long jarg2) {
  _ctl_firmware_version_t *arg1 = (_ctl_firmware_version_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_firmware_version_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->build_number = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_version_t_build_number_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_firmware_version_t *arg1 = (_ctl_firmware_version_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_firmware_version_t *)jarg1; 
  result = (uint64_t) ((arg1)->build_number);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_firmware_version_t() {
  void * jresult ;
  _ctl_firmware_version_t *result = 0 ;
  
  result = (_ctl_firmware_version_t *)new _ctl_firmware_version_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_firmware_version_t(void * jarg1) {
  _ctl_firmware_version_t *arg1 = (_ctl_firmware_version_t *) 0 ;
  
  arg1 = (_ctl_firmware_version_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_bdf_t_bus_set(void * jarg1, unsigned char jarg2) {
  _ctl_adapter_bdf_t *arg1 = (_ctl_adapter_bdf_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_adapter_bdf_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bus = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_bdf_t_bus_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_adapter_bdf_t *arg1 = (_ctl_adapter_bdf_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_adapter_bdf_t *)jarg1; 
  result = (uint8_t) ((arg1)->bus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_bdf_t_device_set(void * jarg1, unsigned char jarg2) {
  _ctl_adapter_bdf_t *arg1 = (_ctl_adapter_bdf_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_adapter_bdf_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->device = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_bdf_t_device_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_adapter_bdf_t *arg1 = (_ctl_adapter_bdf_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_adapter_bdf_t *)jarg1; 
  result = (uint8_t) ((arg1)->device);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_bdf_t_function_set(void * jarg1, unsigned char jarg2) {
  _ctl_adapter_bdf_t *arg1 = (_ctl_adapter_bdf_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_adapter_bdf_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->function = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_bdf_t_function_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_adapter_bdf_t *arg1 = (_ctl_adapter_bdf_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_adapter_bdf_t *)jarg1; 
  result = (uint8_t) ((arg1)->function);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_adapter_bdf_t() {
  void * jresult ;
  _ctl_adapter_bdf_t *result = 0 ;
  
  result = (_ctl_adapter_bdf_t *)new _ctl_adapter_bdf_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_adapter_bdf_t(void * jarg1) {
  _ctl_adapter_bdf_t *arg1 = (_ctl_adapter_bdf_t *) 0 ;
  
  arg1 = (_ctl_adapter_bdf_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pDeviceID_set(void * jarg1, void * jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pDeviceID = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pDeviceID_get(void * jarg1) {
  void * jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  void *result = 0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (void *) ((arg1)->pDeviceID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_device_id_size_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->device_id_size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_device_id_size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->device_id_size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_device_type_set(void * jarg1, int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_device_type_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (ctl_device_type_t)jarg2; 
  if (arg1) (arg1)->device_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_device_type_get(void * jarg1) {
  int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_device_type_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (ctl_device_type_t) ((arg1)->device_type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_supported_subfunction_flags_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_supported_functions_flags_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (ctl_supported_functions_flags_t)jarg2; 
  if (arg1) (arg1)->supported_subfunction_flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_supported_subfunction_flags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_supported_functions_flags_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (ctl_supported_functions_flags_t) ((arg1)->supported_subfunction_flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_driver_version_set(void * jarg1, unsigned long long jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->driver_version = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_driver_version_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint64_t) ((arg1)->driver_version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_firmware_version_set(void * jarg1, void * jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_firmware_version_t *arg2 = (ctl_firmware_version_t *) 0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (ctl_firmware_version_t *)jarg2; 
  if (arg1) (arg1)->firmware_version = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_firmware_version_get(void * jarg1) {
  void * jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_firmware_version_t *result = 0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (ctl_firmware_version_t *)& ((arg1)->firmware_version);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pci_vendor_id_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->pci_vendor_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pci_vendor_id_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->pci_vendor_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pci_device_id_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->pci_device_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pci_device_id_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->pci_device_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_rev_id_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->rev_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_rev_id_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->rev_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_num_eus_per_sub_slice_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->num_eus_per_sub_slice = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_num_eus_per_sub_slice_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->num_eus_per_sub_slice);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_num_sub_slices_per_slice_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->num_sub_slices_per_slice = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_num_sub_slices_per_slice_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->num_sub_slices_per_slice);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_num_slices_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->num_slices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_num_slices_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->num_slices);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_name_set(void * jarg1, char * jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 100-1);
      arg1->name[100-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_name_get(void * jarg1) {
  char * jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_graphics_adapter_properties_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_adapter_properties_flags_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (ctl_adapter_properties_flags_t)jarg2; 
  if (arg1) (arg1)->graphics_adapter_properties = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_graphics_adapter_properties_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_adapter_properties_flags_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (ctl_adapter_properties_flags_t) ((arg1)->graphics_adapter_properties);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_Frequency_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Frequency = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_Frequency_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Frequency);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pci_subsys_id_set(void * jarg1, unsigned short jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->pci_subsys_id = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pci_subsys_id_get(void * jarg1) {
  unsigned short jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint16_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint16_t) ((arg1)->pci_subsys_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pci_subsys_vendor_id_set(void * jarg1, unsigned short jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->pci_subsys_vendor_id = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_pci_subsys_vendor_id_get(void * jarg1) {
  unsigned short jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint16_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint16_t) ((arg1)->pci_subsys_vendor_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_adapter_bdf_set(void * jarg1, void * jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_adapter_bdf_t *arg2 = (ctl_adapter_bdf_t *) 0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (ctl_adapter_bdf_t *)jarg2; 
  if (arg1) (arg1)->adapter_bdf = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_adapter_bdf_get(void * jarg1) {
  void * jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  ctl_adapter_bdf_t *result = 0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (ctl_adapter_bdf_t *)& ((arg1)->adapter_bdf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_num_xe_cores_set(void * jarg1, unsigned int jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->num_xe_cores = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_num_xe_cores_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->num_xe_cores);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_reserved_set(void * jarg1, char * jarg2) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->reserved, (const char *)arg2, 108-1);
      arg1->reserved[108-1] = 0;
    } else {
      arg1->reserved[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_device_adapter_properties_t_reserved_get(void * jarg1) {
  char * jresult ;
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  result = (char *)(char *) ((arg1)->reserved);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_device_adapter_properties_t() {
  void * jresult ;
  _ctl_device_adapter_properties_t *result = 0 ;
  
  result = (_ctl_device_adapter_properties_t *)new _ctl_device_adapter_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_device_adapter_properties_t(void * jarg1) {
  _ctl_device_adapter_properties_t *arg1 = (_ctl_device_adapter_properties_t *) 0 ;
  
  arg1 = (_ctl_device_adapter_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_generic_void_datatype_t_pData_set(void * jarg1, void * jarg2) {
  _ctl_generic_void_datatype_t *arg1 = (_ctl_generic_void_datatype_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (_ctl_generic_void_datatype_t *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_generic_void_datatype_t_pData_get(void * jarg1) {
  void * jresult ;
  _ctl_generic_void_datatype_t *arg1 = (_ctl_generic_void_datatype_t *) 0 ;
  void *result = 0 ;
  
  arg1 = (_ctl_generic_void_datatype_t *)jarg1; 
  result = (void *) ((arg1)->pData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_generic_void_datatype_t_size_set(void * jarg1, unsigned int jarg2) {
  _ctl_generic_void_datatype_t *arg1 = (_ctl_generic_void_datatype_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_generic_void_datatype_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_generic_void_datatype_t_size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_generic_void_datatype_t *arg1 = (_ctl_generic_void_datatype_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_generic_void_datatype_t *)jarg1; 
  result = (uint32_t) ((arg1)->size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_generic_void_datatype_t() {
  void * jresult ;
  _ctl_generic_void_datatype_t *result = 0 ;
  
  result = (_ctl_generic_void_datatype_t *)new _ctl_generic_void_datatype_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_generic_void_datatype_t(void * jarg1) {
  _ctl_generic_void_datatype_t *arg1 = (_ctl_generic_void_datatype_t *) 0 ;
  
  arg1 = (_ctl_generic_void_datatype_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_revision_datatype_t_major_version_set(void * jarg1, unsigned char jarg2) {
  _ctl_revision_datatype_t *arg1 = (_ctl_revision_datatype_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_revision_datatype_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->major_version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_revision_datatype_t_major_version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_revision_datatype_t *arg1 = (_ctl_revision_datatype_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_revision_datatype_t *)jarg1; 
  result = (uint8_t) ((arg1)->major_version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_revision_datatype_t_minor_version_set(void * jarg1, unsigned char jarg2) {
  _ctl_revision_datatype_t *arg1 = (_ctl_revision_datatype_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_revision_datatype_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->minor_version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_revision_datatype_t_minor_version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_revision_datatype_t *arg1 = (_ctl_revision_datatype_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_revision_datatype_t *)jarg1; 
  result = (uint8_t) ((arg1)->minor_version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_revision_datatype_t_revision_version_set(void * jarg1, unsigned char jarg2) {
  _ctl_revision_datatype_t *arg1 = (_ctl_revision_datatype_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_revision_datatype_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->revision_version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_revision_datatype_t_revision_version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_revision_datatype_t *arg1 = (_ctl_revision_datatype_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_revision_datatype_t *)jarg1; 
  result = (uint8_t) ((arg1)->revision_version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_revision_datatype_t() {
  void * jresult ;
  _ctl_revision_datatype_t *result = 0 ;
  
  result = (_ctl_revision_datatype_t *)new _ctl_revision_datatype_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_revision_datatype_t(void * jarg1) {
  _ctl_revision_datatype_t *arg1 = (_ctl_revision_datatype_t *) 0 ;
  
  arg1 = (_ctl_revision_datatype_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_PropertyType_set(void * jarg1, unsigned int jarg2) {
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  ctl_property_type_flags_t arg2 ;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  arg2 = (ctl_property_type_flags_t)jarg2; 
  if (arg1) (arg1)->PropertyType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_PropertyType_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  ctl_property_type_flags_t result;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  result = (ctl_property_type_flags_t) ((arg1)->PropertyType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_TimeOutMilliSec_set(void * jarg1, unsigned int jarg2) {
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->TimeOutMilliSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_TimeOutMilliSec_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->TimeOutMilliSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_EventMiscFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->EventMiscFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_EventMiscFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->EventMiscFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_pReserved_set(void * jarg1, void * jarg2) {
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pReserved = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_pReserved_get(void * jarg1) {
  void * jresult ;
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  void *result = 0 ;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  result = (void *) ((arg1)->pReserved);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_ReservedOutFlags_set(void * jarg1, unsigned long long jarg2) {
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->ReservedOutFlags = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_wait_property_change_args_t_ReservedOutFlags_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  result = (uint64_t) ((arg1)->ReservedOutFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_wait_property_change_args_t() {
  void * jresult ;
  _ctl_wait_property_change_args_t *result = 0 ;
  
  result = (_ctl_wait_property_change_args_t *)new _ctl_wait_property_change_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_wait_property_change_args_t(void * jarg1) {
  _ctl_wait_property_change_args_t *arg1 = (_ctl_wait_property_change_args_t *) 0 ;
  
  arg1 = (_ctl_wait_property_change_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_rect_t_Left_set(void * jarg1, int jarg2) {
  _ctl_rect_t *arg1 = (_ctl_rect_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_rect_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Left = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_rect_t_Left_get(void * jarg1) {
  int jresult ;
  _ctl_rect_t *arg1 = (_ctl_rect_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_rect_t *)jarg1; 
  result = (int32_t) ((arg1)->Left);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_rect_t_Top_set(void * jarg1, int jarg2) {
  _ctl_rect_t *arg1 = (_ctl_rect_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_rect_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Top = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_rect_t_Top_get(void * jarg1) {
  int jresult ;
  _ctl_rect_t *arg1 = (_ctl_rect_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_rect_t *)jarg1; 
  result = (int32_t) ((arg1)->Top);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_rect_t_Right_set(void * jarg1, int jarg2) {
  _ctl_rect_t *arg1 = (_ctl_rect_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_rect_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Right = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_rect_t_Right_get(void * jarg1) {
  int jresult ;
  _ctl_rect_t *arg1 = (_ctl_rect_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_rect_t *)jarg1; 
  result = (int32_t) ((arg1)->Right);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_rect_t_Bottom_set(void * jarg1, int jarg2) {
  _ctl_rect_t *arg1 = (_ctl_rect_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_rect_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Bottom = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_rect_t_Bottom_get(void * jarg1) {
  int jresult ;
  _ctl_rect_t *arg1 = (_ctl_rect_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_rect_t *)jarg1; 
  result = (int32_t) ((arg1)->Bottom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_rect_t() {
  void * jresult ;
  _ctl_rect_t *result = 0 ;
  
  result = (_ctl_rect_t *)new _ctl_rect_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_rect_t(void * jarg1) {
  _ctl_rect_t *arg1 = (_ctl_rect_t *) 0 ;
  
  arg1 = (_ctl_rect_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlWaitForPropertyChange(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_wait_property_change_args_t *arg2 = (ctl_wait_property_change_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_wait_property_change_args_t *)jarg2; 
  result = (ctl_result_t)ctlWaitForPropertyChange(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlReservedCall(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_reserved_args_t *arg2 = (ctl_reserved_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_reserved_args_t *)jarg2; 
  result = (ctl_result_t)ctlReservedCall(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming_caps_t_EGControlCaps_set(void * jarg1, void * jarg2) {
  _ctl_endurance_gaming_caps_t *arg1 = (_ctl_endurance_gaming_caps_t *) 0 ;
  ctl_property_info_enum_t *arg2 = (ctl_property_info_enum_t *) 0 ;
  
  arg1 = (_ctl_endurance_gaming_caps_t *)jarg1; 
  arg2 = (ctl_property_info_enum_t *)jarg2; 
  if (arg1) (arg1)->EGControlCaps = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming_caps_t_EGControlCaps_get(void * jarg1) {
  void * jresult ;
  _ctl_endurance_gaming_caps_t *arg1 = (_ctl_endurance_gaming_caps_t *) 0 ;
  ctl_property_info_enum_t *result = 0 ;
  
  arg1 = (_ctl_endurance_gaming_caps_t *)jarg1; 
  result = (ctl_property_info_enum_t *)& ((arg1)->EGControlCaps);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming_caps_t_EGModeCaps_set(void * jarg1, void * jarg2) {
  _ctl_endurance_gaming_caps_t *arg1 = (_ctl_endurance_gaming_caps_t *) 0 ;
  ctl_property_info_enum_t *arg2 = (ctl_property_info_enum_t *) 0 ;
  
  arg1 = (_ctl_endurance_gaming_caps_t *)jarg1; 
  arg2 = (ctl_property_info_enum_t *)jarg2; 
  if (arg1) (arg1)->EGModeCaps = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming_caps_t_EGModeCaps_get(void * jarg1) {
  void * jresult ;
  _ctl_endurance_gaming_caps_t *arg1 = (_ctl_endurance_gaming_caps_t *) 0 ;
  ctl_property_info_enum_t *result = 0 ;
  
  arg1 = (_ctl_endurance_gaming_caps_t *)jarg1; 
  result = (ctl_property_info_enum_t *)& ((arg1)->EGModeCaps);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_endurance_gaming_caps_t() {
  void * jresult ;
  _ctl_endurance_gaming_caps_t *result = 0 ;
  
  result = (_ctl_endurance_gaming_caps_t *)new _ctl_endurance_gaming_caps_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_endurance_gaming_caps_t(void * jarg1) {
  _ctl_endurance_gaming_caps_t *arg1 = (_ctl_endurance_gaming_caps_t *) 0 ;
  
  arg1 = (_ctl_endurance_gaming_caps_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming_t_EGControl_set(void * jarg1, int jarg2) {
  _ctl_endurance_gaming_t *arg1 = (_ctl_endurance_gaming_t *) 0 ;
  ctl_3d_endurance_gaming_control_t arg2 ;
  
  arg1 = (_ctl_endurance_gaming_t *)jarg1; 
  arg2 = (ctl_3d_endurance_gaming_control_t)jarg2; 
  if (arg1) (arg1)->EGControl = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming_t_EGControl_get(void * jarg1) {
  int jresult ;
  _ctl_endurance_gaming_t *arg1 = (_ctl_endurance_gaming_t *) 0 ;
  ctl_3d_endurance_gaming_control_t result;
  
  arg1 = (_ctl_endurance_gaming_t *)jarg1; 
  result = (ctl_3d_endurance_gaming_control_t) ((arg1)->EGControl);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming_t_EGMode_set(void * jarg1, int jarg2) {
  _ctl_endurance_gaming_t *arg1 = (_ctl_endurance_gaming_t *) 0 ;
  ctl_3d_endurance_gaming_mode_t arg2 ;
  
  arg1 = (_ctl_endurance_gaming_t *)jarg1; 
  arg2 = (ctl_3d_endurance_gaming_mode_t)jarg2; 
  if (arg1) (arg1)->EGMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming_t_EGMode_get(void * jarg1) {
  int jresult ;
  _ctl_endurance_gaming_t *arg1 = (_ctl_endurance_gaming_t *) 0 ;
  ctl_3d_endurance_gaming_mode_t result;
  
  arg1 = (_ctl_endurance_gaming_t *)jarg1; 
  result = (ctl_3d_endurance_gaming_mode_t) ((arg1)->EGMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_endurance_gaming_t() {
  void * jresult ;
  _ctl_endurance_gaming_t *result = 0 ;
  
  result = (_ctl_endurance_gaming_t *)new _ctl_endurance_gaming_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_endurance_gaming_t(void * jarg1) {
  _ctl_endurance_gaming_t *arg1 = (_ctl_endurance_gaming_t *) 0 ;
  
  arg1 = (_ctl_endurance_gaming_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_EGControl_set(void * jarg1, int jarg2) {
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  ctl_3d_endurance_gaming_control_t arg2 ;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  arg2 = (ctl_3d_endurance_gaming_control_t)jarg2; 
  if (arg1) (arg1)->EGControl = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_EGControl_get(void * jarg1) {
  int jresult ;
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  ctl_3d_endurance_gaming_control_t result;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  result = (ctl_3d_endurance_gaming_control_t) ((arg1)->EGControl);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_EGMode_set(void * jarg1, int jarg2) {
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  ctl_3d_endurance_gaming_mode_t arg2 ;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  arg2 = (ctl_3d_endurance_gaming_mode_t)jarg2; 
  if (arg1) (arg1)->EGMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_EGMode_get(void * jarg1) {
  int jresult ;
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  ctl_3d_endurance_gaming_mode_t result;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  result = (ctl_3d_endurance_gaming_mode_t) ((arg1)->EGMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_IsFPRequired_set(void * jarg1, unsigned int jarg2) {
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsFPRequired = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_IsFPRequired_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  result = (bool) ((arg1)->IsFPRequired);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_TargetFPS_set(void * jarg1, double jarg2) {
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->TargetFPS = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_TargetFPS_get(void * jarg1) {
  double jresult ;
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  double result;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  result = (double) ((arg1)->TargetFPS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_RefreshRate_set(void * jarg1, double jarg2) {
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->RefreshRate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_RefreshRate_get(void * jarg1) {
  double jresult ;
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  double result;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  result = (double) ((arg1)->RefreshRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_Reserved_set(void * jarg1, void * jarg2) {
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->Reserved;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_endurance_gaming2_t_Reserved_get(void * jarg1) {
  void * jresult ;
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->Reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_endurance_gaming2_t() {
  void * jresult ;
  _ctl_endurance_gaming2_t *result = 0 ;
  
  result = (_ctl_endurance_gaming2_t *)new _ctl_endurance_gaming2_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_endurance_gaming2_t(void * jarg1) {
  _ctl_endurance_gaming2_t *arg1 = (_ctl_endurance_gaming2_t *) 0 ;
  
  arg1 = (_ctl_endurance_gaming2_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_caps_t_AdaptiveBalanceSupported_set(void * jarg1, unsigned int jarg2) {
  _ctl_adaptivesync_caps_t *arg1 = (_ctl_adaptivesync_caps_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_adaptivesync_caps_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AdaptiveBalanceSupported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_caps_t_AdaptiveBalanceSupported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adaptivesync_caps_t *arg1 = (_ctl_adaptivesync_caps_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_adaptivesync_caps_t *)jarg1; 
  result = (bool) ((arg1)->AdaptiveBalanceSupported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_caps_t_AdaptiveBalanceStrengthCaps_set(void * jarg1, void * jarg2) {
  _ctl_adaptivesync_caps_t *arg1 = (_ctl_adaptivesync_caps_t *) 0 ;
  ctl_property_info_float_t *arg2 = (ctl_property_info_float_t *) 0 ;
  
  arg1 = (_ctl_adaptivesync_caps_t *)jarg1; 
  arg2 = (ctl_property_info_float_t *)jarg2; 
  if (arg1) (arg1)->AdaptiveBalanceStrengthCaps = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_caps_t_AdaptiveBalanceStrengthCaps_get(void * jarg1) {
  void * jresult ;
  _ctl_adaptivesync_caps_t *arg1 = (_ctl_adaptivesync_caps_t *) 0 ;
  ctl_property_info_float_t *result = 0 ;
  
  arg1 = (_ctl_adaptivesync_caps_t *)jarg1; 
  result = (ctl_property_info_float_t *)& ((arg1)->AdaptiveBalanceStrengthCaps);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_adaptivesync_caps_t() {
  void * jresult ;
  _ctl_adaptivesync_caps_t *result = 0 ;
  
  result = (_ctl_adaptivesync_caps_t *)new _ctl_adaptivesync_caps_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_adaptivesync_caps_t(void * jarg1) {
  _ctl_adaptivesync_caps_t *arg1 = (_ctl_adaptivesync_caps_t *) 0 ;
  
  arg1 = (_ctl_adaptivesync_caps_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_getset_t_AdaptiveSync_set(void * jarg1, unsigned int jarg2) {
  _ctl_adaptivesync_getset_t *arg1 = (_ctl_adaptivesync_getset_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_adaptivesync_getset_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AdaptiveSync = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_getset_t_AdaptiveSync_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adaptivesync_getset_t *arg1 = (_ctl_adaptivesync_getset_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_adaptivesync_getset_t *)jarg1; 
  result = (bool) ((arg1)->AdaptiveSync);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_getset_t_AdaptiveBalance_set(void * jarg1, unsigned int jarg2) {
  _ctl_adaptivesync_getset_t *arg1 = (_ctl_adaptivesync_getset_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_adaptivesync_getset_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AdaptiveBalance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_getset_t_AdaptiveBalance_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adaptivesync_getset_t *arg1 = (_ctl_adaptivesync_getset_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_adaptivesync_getset_t *)jarg1; 
  result = (bool) ((arg1)->AdaptiveBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_getset_t_AllowAsyncForHighFPS_set(void * jarg1, unsigned int jarg2) {
  _ctl_adaptivesync_getset_t *arg1 = (_ctl_adaptivesync_getset_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_adaptivesync_getset_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AllowAsyncForHighFPS = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_getset_t_AllowAsyncForHighFPS_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adaptivesync_getset_t *arg1 = (_ctl_adaptivesync_getset_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_adaptivesync_getset_t *)jarg1; 
  result = (bool) ((arg1)->AllowAsyncForHighFPS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_getset_t_AdaptiveBalanceStrength_set(void * jarg1, float jarg2) {
  _ctl_adaptivesync_getset_t *arg1 = (_ctl_adaptivesync_getset_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_adaptivesync_getset_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AdaptiveBalanceStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_adaptivesync_getset_t_AdaptiveBalanceStrength_get(void * jarg1) {
  float jresult ;
  _ctl_adaptivesync_getset_t *arg1 = (_ctl_adaptivesync_getset_t *) 0 ;
  float result;
  
  arg1 = (_ctl_adaptivesync_getset_t *)jarg1; 
  result = (float) ((arg1)->AdaptiveBalanceStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_adaptivesync_getset_t() {
  void * jresult ;
  _ctl_adaptivesync_getset_t *result = 0 ;
  
  result = (_ctl_adaptivesync_getset_t *)new _ctl_adaptivesync_getset_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_adaptivesync_getset_t(void * jarg1) {
  _ctl_adaptivesync_getset_t *arg1 = (_ctl_adaptivesync_getset_t *) 0 ;
  
  arg1 = (_ctl_adaptivesync_getset_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_caps_t_SupportedTierTypes_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_app_profiles_caps_t *arg1 = (_ctl_3d_app_profiles_caps_t *) 0 ;
  ctl_3d_tier_type_flags_t arg2 ;
  
  arg1 = (_ctl_3d_app_profiles_caps_t *)jarg1; 
  arg2 = (ctl_3d_tier_type_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedTierTypes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_caps_t_SupportedTierTypes_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_app_profiles_caps_t *arg1 = (_ctl_3d_app_profiles_caps_t *) 0 ;
  ctl_3d_tier_type_flags_t result;
  
  arg1 = (_ctl_3d_app_profiles_caps_t *)jarg1; 
  result = (ctl_3d_tier_type_flags_t) ((arg1)->SupportedTierTypes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_caps_t_Reserved_set(void * jarg1, unsigned long long jarg2) {
  _ctl_3d_app_profiles_caps_t *arg1 = (_ctl_3d_app_profiles_caps_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_3d_app_profiles_caps_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->Reserved = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_caps_t_Reserved_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_3d_app_profiles_caps_t *arg1 = (_ctl_3d_app_profiles_caps_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_3d_app_profiles_caps_t *)jarg1; 
  result = (uint64_t) ((arg1)->Reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_3d_app_profiles_caps_t() {
  void * jresult ;
  _ctl_3d_app_profiles_caps_t *result = 0 ;
  
  result = (_ctl_3d_app_profiles_caps_t *)new _ctl_3d_app_profiles_caps_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_3d_app_profiles_caps_t(void * jarg1) {
  _ctl_3d_app_profiles_caps_t *arg1 = (_ctl_3d_app_profiles_caps_t *) 0 ;
  
  arg1 = (_ctl_3d_app_profiles_caps_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_TierType_set(void * jarg1, int jarg2) {
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_type_flag_t arg2 ;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  arg2 = (ctl_3d_tier_type_flag_t)jarg2; 
  if (arg1) (arg1)->TierType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_TierType_get(void * jarg1) {
  int jresult ;
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_type_flag_t result;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  result = (ctl_3d_tier_type_flag_t) ((arg1)->TierType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_SupportedTierProfiles_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t arg2 ;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  arg2 = (ctl_3d_tier_profile_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedTierProfiles = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_SupportedTierProfiles_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t result;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  result = (ctl_3d_tier_profile_flags_t) ((arg1)->SupportedTierProfiles);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_DefaultEnabledTierProfiles_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t arg2 ;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  arg2 = (ctl_3d_tier_profile_flags_t)jarg2; 
  if (arg1) (arg1)->DefaultEnabledTierProfiles = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_DefaultEnabledTierProfiles_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t result;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  result = (ctl_3d_tier_profile_flags_t) ((arg1)->DefaultEnabledTierProfiles);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_CustomizationSupportedTierProfiles_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t arg2 ;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  arg2 = (ctl_3d_tier_profile_flags_t)jarg2; 
  if (arg1) (arg1)->CustomizationSupportedTierProfiles = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_CustomizationSupportedTierProfiles_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t result;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  result = (ctl_3d_tier_profile_flags_t) ((arg1)->CustomizationSupportedTierProfiles);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_EnabledTierProfiles_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t arg2 ;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  arg2 = (ctl_3d_tier_profile_flags_t)jarg2; 
  if (arg1) (arg1)->EnabledTierProfiles = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_EnabledTierProfiles_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t result;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  result = (ctl_3d_tier_profile_flags_t) ((arg1)->EnabledTierProfiles);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_CustomizationEnabledTierProfiles_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t arg2 ;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  arg2 = (ctl_3d_tier_profile_flags_t)jarg2; 
  if (arg1) (arg1)->CustomizationEnabledTierProfiles = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_CustomizationEnabledTierProfiles_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  ctl_3d_tier_profile_flags_t result;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  result = (ctl_3d_tier_profile_flags_t) ((arg1)->CustomizationEnabledTierProfiles);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_Reserved_set(void * jarg1, unsigned long long jarg2) {
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->Reserved = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_app_profiles_t_Reserved_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  result = (uint64_t) ((arg1)->Reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_3d_app_profiles_t() {
  void * jresult ;
  _ctl_3d_app_profiles_t *result = 0 ;
  
  result = (_ctl_3d_app_profiles_t *)new _ctl_3d_app_profiles_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_3d_app_profiles_t(void * jarg1) {
  _ctl_3d_app_profiles_t *arg1 = (_ctl_3d_app_profiles_t *) 0 ;
  
  arg1 = (_ctl_3d_app_profiles_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_tier_details_t_TierType_set(void * jarg1, int jarg2) {
  _ctl_3d_tier_details_t *arg1 = (_ctl_3d_tier_details_t *) 0 ;
  ctl_3d_tier_type_flag_t arg2 ;
  
  arg1 = (_ctl_3d_tier_details_t *)jarg1; 
  arg2 = (ctl_3d_tier_type_flag_t)jarg2; 
  if (arg1) (arg1)->TierType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_tier_details_t_TierType_get(void * jarg1) {
  int jresult ;
  _ctl_3d_tier_details_t *arg1 = (_ctl_3d_tier_details_t *) 0 ;
  ctl_3d_tier_type_flag_t result;
  
  arg1 = (_ctl_3d_tier_details_t *)jarg1; 
  result = (ctl_3d_tier_type_flag_t) ((arg1)->TierType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_tier_details_t_TierProfile_set(void * jarg1, int jarg2) {
  _ctl_3d_tier_details_t *arg1 = (_ctl_3d_tier_details_t *) 0 ;
  ctl_3d_tier_profile_flag_t arg2 ;
  
  arg1 = (_ctl_3d_tier_details_t *)jarg1; 
  arg2 = (ctl_3d_tier_profile_flag_t)jarg2; 
  if (arg1) (arg1)->TierProfile = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_tier_details_t_TierProfile_get(void * jarg1) {
  int jresult ;
  _ctl_3d_tier_details_t *arg1 = (_ctl_3d_tier_details_t *) 0 ;
  ctl_3d_tier_profile_flag_t result;
  
  arg1 = (_ctl_3d_tier_details_t *)jarg1; 
  result = (ctl_3d_tier_profile_flag_t) ((arg1)->TierProfile);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_tier_details_t_Reserved_set(void * jarg1, void * jarg2) {
  _ctl_3d_tier_details_t *arg1 = (_ctl_3d_tier_details_t *) 0 ;
  uint64_t *arg2 = (uint64_t *) (uint64_t *)0 ;
  
  arg1 = (_ctl_3d_tier_details_t *)jarg1; 
  arg2 = (uint64_t *)jarg2; 
  {
    size_t ii;
    uint64_t *b = (uint64_t *) arg1->Reserved;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint64_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_tier_details_t_Reserved_get(void * jarg1) {
  void * jresult ;
  _ctl_3d_tier_details_t *arg1 = (_ctl_3d_tier_details_t *) 0 ;
  uint64_t *result = 0 ;
  
  arg1 = (_ctl_3d_tier_details_t *)jarg1; 
  result = (uint64_t *)(uint64_t *) ((arg1)->Reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_3d_tier_details_t() {
  void * jresult ;
  _ctl_3d_tier_details_t *result = 0 ;
  
  result = (_ctl_3d_tier_details_t *)new _ctl_3d_tier_details_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_3d_tier_details_t(void * jarg1) {
  _ctl_3d_tier_details_t *arg1 = (_ctl_3d_tier_details_t *) 0 ;
  
  arg1 = (_ctl_3d_tier_details_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_FeatureType_set(void * jarg1, int jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  ctl_3d_feature_t arg2 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (ctl_3d_feature_t)jarg2; 
  if (arg1) (arg1)->FeatureType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_FeatureType_get(void * jarg1) {
  int jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  ctl_3d_feature_t result;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (ctl_3d_feature_t) ((arg1)->FeatureType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_ValueType_set(void * jarg1, int jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  ctl_property_value_type_t arg2 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (ctl_property_value_type_t)jarg2; 
  if (arg1) (arg1)->ValueType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_ValueType_get(void * jarg1) {
  int jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  ctl_property_value_type_t result;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (ctl_property_value_type_t) ((arg1)->ValueType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_Value_set(void * jarg1, void * jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  ctl_property_info_t *arg2 = (ctl_property_info_t *) 0 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (ctl_property_info_t *)jarg2; 
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_Value_get(void * jarg1) {
  void * jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  ctl_property_info_t *result = 0 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (ctl_property_info_t *)& ((arg1)->Value);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_CustomValueSize_set(void * jarg1, int jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CustomValueSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_CustomValueSize_get(void * jarg1) {
  int jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (int32_t) ((arg1)->CustomValueSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_pCustomValue_set(void * jarg1, void * jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pCustomValue = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_pCustomValue_get(void * jarg1) {
  void * jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  void *result = 0 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (void *) ((arg1)->pCustomValue);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_PerAppSupport_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PerAppSupport = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_PerAppSupport_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (bool) ((arg1)->PerAppSupport);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_ConflictingFeatures_set(void * jarg1, long long jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->ConflictingFeatures = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_ConflictingFeatures_get(void * jarg1) {
  long long jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int64_t result;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (int64_t) ((arg1)->ConflictingFeatures);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_FeatureMiscSupport_set(void * jarg1, short jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int16_t arg2 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (int16_t)jarg2; 
  if (arg1) (arg1)->FeatureMiscSupport = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_FeatureMiscSupport_get(void * jarg1) {
  short jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int16_t result;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (int16_t) ((arg1)->FeatureMiscSupport);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_Reserved_set(void * jarg1, short jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int16_t arg2 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (int16_t)jarg2; 
  if (arg1) (arg1)->Reserved = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_Reserved_get(void * jarg1) {
  short jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int16_t result;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (int16_t) ((arg1)->Reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_Reserved1_set(void * jarg1, short jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int16_t arg2 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (int16_t)jarg2; 
  if (arg1) (arg1)->Reserved1 = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_Reserved1_get(void * jarg1) {
  short jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int16_t result;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (int16_t) ((arg1)->Reserved1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_Reserved2_set(void * jarg1, short jarg2) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int16_t arg2 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  arg2 = (int16_t)jarg2; 
  if (arg1) (arg1)->Reserved2 = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_details_t_Reserved2_get(void * jarg1) {
  short jresult ;
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  int16_t result;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  result = (int16_t) ((arg1)->Reserved2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_3d_feature_details_t() {
  void * jresult ;
  _ctl_3d_feature_details_t *result = 0 ;
  
  result = (_ctl_3d_feature_details_t *)new _ctl_3d_feature_details_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_3d_feature_details_t(void * jarg1) {
  _ctl_3d_feature_details_t *arg1 = (_ctl_3d_feature_details_t *) 0 ;
  
  arg1 = (_ctl_3d_feature_details_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_caps_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_feature_caps_t *arg1 = (_ctl_3d_feature_caps_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_3d_feature_caps_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_caps_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_feature_caps_t *arg1 = (_ctl_3d_feature_caps_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_3d_feature_caps_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_caps_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_3d_feature_caps_t *arg1 = (_ctl_3d_feature_caps_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_3d_feature_caps_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_caps_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_3d_feature_caps_t *arg1 = (_ctl_3d_feature_caps_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_3d_feature_caps_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_caps_t_NumSupportedFeatures_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_feature_caps_t *arg1 = (_ctl_3d_feature_caps_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_3d_feature_caps_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumSupportedFeatures = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_caps_t_NumSupportedFeatures_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_feature_caps_t *arg1 = (_ctl_3d_feature_caps_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_3d_feature_caps_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumSupportedFeatures);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_caps_t_pFeatureDetails_set(void * jarg1, void * jarg2) {
  _ctl_3d_feature_caps_t *arg1 = (_ctl_3d_feature_caps_t *) 0 ;
  ctl_3d_feature_details_t *arg2 = (ctl_3d_feature_details_t *) 0 ;
  
  arg1 = (_ctl_3d_feature_caps_t *)jarg1; 
  arg2 = (ctl_3d_feature_details_t *)jarg2; 
  if (arg1) (arg1)->pFeatureDetails = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_caps_t_pFeatureDetails_get(void * jarg1) {
  void * jresult ;
  _ctl_3d_feature_caps_t *arg1 = (_ctl_3d_feature_caps_t *) 0 ;
  ctl_3d_feature_details_t *result = 0 ;
  
  arg1 = (_ctl_3d_feature_caps_t *)jarg1; 
  result = (ctl_3d_feature_details_t *) ((arg1)->pFeatureDetails);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_3d_feature_caps_t() {
  void * jresult ;
  _ctl_3d_feature_caps_t *result = 0 ;
  
  result = (_ctl_3d_feature_caps_t *)new _ctl_3d_feature_caps_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_3d_feature_caps_t(void * jarg1) {
  _ctl_3d_feature_caps_t *arg1 = (_ctl_3d_feature_caps_t *) 0 ;
  
  arg1 = (_ctl_3d_feature_caps_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_FeatureType_set(void * jarg1, int jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  ctl_3d_feature_t arg2 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = (ctl_3d_feature_t)jarg2; 
  if (arg1) (arg1)->FeatureType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_FeatureType_get(void * jarg1) {
  int jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  ctl_3d_feature_t result;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (ctl_3d_feature_t) ((arg1)->FeatureType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_ApplicationName_set(void * jarg1, char * jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->ApplicationName;
    if (arg2) {
      arg1->ApplicationName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->ApplicationName, (const char *)arg2);
    } else {
      arg1->ApplicationName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_ApplicationName_get(void * jarg1) {
  char * jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (char *) ((arg1)->ApplicationName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_ApplicationNameLength_set(void * jarg1, signed char jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  int8_t arg2 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->ApplicationNameLength = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_ApplicationNameLength_get(void * jarg1) {
  signed char jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  int8_t result;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (int8_t) ((arg1)->ApplicationNameLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_bSet_set(void * jarg1, unsigned int jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_bSet_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (bool) ((arg1)->bSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_ValueType_set(void * jarg1, int jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  ctl_property_value_type_t arg2 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = (ctl_property_value_type_t)jarg2; 
  if (arg1) (arg1)->ValueType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_ValueType_get(void * jarg1) {
  int jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  ctl_property_value_type_t result;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (ctl_property_value_type_t) ((arg1)->ValueType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_Value_set(void * jarg1, void * jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  ctl_property_t *arg2 = (ctl_property_t *) 0 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = (ctl_property_t *)jarg2; 
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_Value_get(void * jarg1) {
  void * jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  ctl_property_t *result = 0 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (ctl_property_t *)& ((arg1)->Value);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_CustomValueSize_set(void * jarg1, int jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CustomValueSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_CustomValueSize_get(void * jarg1) {
  int jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (int32_t) ((arg1)->CustomValueSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_pCustomValue_set(void * jarg1, void * jarg2) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pCustomValue = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_3d_feature_getset_t_pCustomValue_get(void * jarg1) {
  void * jresult ;
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  void *result = 0 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  result = (void *) ((arg1)->pCustomValue);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_3d_feature_getset_t() {
  void * jresult ;
  _ctl_3d_feature_getset_t *result = 0 ;
  
  result = (_ctl_3d_feature_getset_t *)new _ctl_3d_feature_getset_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_3d_feature_getset_t(void * jarg1) {
  _ctl_3d_feature_getset_t *arg1 = (_ctl_3d_feature_getset_t *) 0 ;
  
  arg1 = (_ctl_3d_feature_getset_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_ReservedFuncID_set(void * jarg1, void * jarg2) {
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  ctl_application_id_t *arg2 = (ctl_application_id_t *) 0 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  arg2 = (ctl_application_id_t *)jarg2; 
  if (arg1) (arg1)->ReservedFuncID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_ReservedFuncID_get(void * jarg1) {
  void * jresult ;
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  ctl_application_id_t *result = 0 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  result = (ctl_application_id_t *)& ((arg1)->ReservedFuncID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_bLoad_set(void * jarg1, unsigned int jarg2) {
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bLoad = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_bLoad_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  result = (bool) ((arg1)->bLoad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_SubsetFeatureMask_set(void * jarg1, long long jarg2) {
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->SubsetFeatureMask = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_SubsetFeatureMask_get(void * jarg1) {
  long long jresult ;
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  int64_t result;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  result = (int64_t) ((arg1)->SubsetFeatureMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_ApplicationName_set(void * jarg1, char * jarg2) {
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->ApplicationName;
    if (arg2) {
      arg1->ApplicationName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->ApplicationName, (const char *)arg2);
    } else {
      arg1->ApplicationName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_ApplicationName_get(void * jarg1) {
  char * jresult ;
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  result = (char *) ((arg1)->ApplicationName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_ApplicationNameLength_set(void * jarg1, signed char jarg2) {
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  int8_t arg2 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->ApplicationNameLength = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_ApplicationNameLength_get(void * jarg1) {
  signed char jresult ;
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  int8_t result;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  result = (int8_t) ((arg1)->ApplicationNameLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_CallerComponent_set(void * jarg1, signed char jarg2) {
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  int8_t arg2 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->CallerComponent = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_CallerComponent_get(void * jarg1) {
  signed char jresult ;
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  int8_t result;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  result = (int8_t) ((arg1)->CallerComponent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_Reserved_set(void * jarg1, void * jarg2) {
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  int64_t *arg2 = (int64_t *) (int64_t *)0 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  arg2 = (int64_t *)jarg2; 
  {
    size_t ii;
    int64_t *b = (int64_t *) arg1->Reserved;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((int64_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_kmd_load_features_t_Reserved_get(void * jarg1) {
  void * jresult ;
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  int64_t *result = 0 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  result = (int64_t *)(int64_t *) ((arg1)->Reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_kmd_load_features_t() {
  void * jresult ;
  _ctl_kmd_load_features_t *result = 0 ;
  
  result = (_ctl_kmd_load_features_t *)new _ctl_kmd_load_features_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_kmd_load_features_t(void * jarg1) {
  _ctl_kmd_load_features_t *arg1 = (_ctl_kmd_load_features_t *) 0 ;
  
  arg1 = (_ctl_kmd_load_features_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSupported3DCapabilities(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_3d_feature_caps_t *arg2 = (ctl_3d_feature_caps_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_3d_feature_caps_t *)jarg2; 
  result = (ctl_result_t)ctlGetSupported3DCapabilities(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSet3DFeature(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_3d_feature_getset_t *arg2 = (ctl_3d_feature_getset_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_3d_feature_getset_t *)jarg2; 
  result = (ctl_result_t)ctlGetSet3DFeature(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlCheckDriverVersion(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_version_info_t arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_version_info_t)jarg2; 
  result = (ctl_result_t)ctlCheckDriverVersion(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumerateDevices(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_api_handle_t arg1 = (ctl_api_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_device_adapter_handle_t *arg3 = (ctl_device_adapter_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_api_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_device_adapter_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumerateDevices(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumerateDisplayOutputs(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_display_output_handle_t *arg3 = (ctl_display_output_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_display_output_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumerateDisplayOutputs(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumerateI2CPinPairs(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_i2c_pin_pair_handle_t *arg3 = (ctl_i2c_pin_pair_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_i2c_pin_pair_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumerateI2CPinPairs(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_os_display_encoder_identifier_t_WindowsDisplayEncoderID_set(void * jarg1, unsigned int jarg2) {
  _ctl_os_display_encoder_identifier_t *arg1 = (_ctl_os_display_encoder_identifier_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_os_display_encoder_identifier_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->WindowsDisplayEncoderID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_os_display_encoder_identifier_t_WindowsDisplayEncoderID_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_os_display_encoder_identifier_t *arg1 = (_ctl_os_display_encoder_identifier_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_os_display_encoder_identifier_t *)jarg1; 
  result = (uint32_t) ((arg1)->WindowsDisplayEncoderID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_os_display_encoder_identifier_t_DisplayEncoderID_set(void * jarg1, void * jarg2) {
  _ctl_os_display_encoder_identifier_t *arg1 = (_ctl_os_display_encoder_identifier_t *) 0 ;
  ctl_generic_void_datatype_t *arg2 = (ctl_generic_void_datatype_t *) 0 ;
  
  arg1 = (_ctl_os_display_encoder_identifier_t *)jarg1; 
  arg2 = (ctl_generic_void_datatype_t *)jarg2; 
  if (arg1) (arg1)->DisplayEncoderID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_os_display_encoder_identifier_t_DisplayEncoderID_get(void * jarg1) {
  void * jresult ;
  _ctl_os_display_encoder_identifier_t *arg1 = (_ctl_os_display_encoder_identifier_t *) 0 ;
  ctl_generic_void_datatype_t *result = 0 ;
  
  arg1 = (_ctl_os_display_encoder_identifier_t *)jarg1; 
  result = (ctl_generic_void_datatype_t *)& ((arg1)->DisplayEncoderID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_os_display_encoder_identifier_t() {
  void * jresult ;
  _ctl_os_display_encoder_identifier_t *result = 0 ;
  
  result = (_ctl_os_display_encoder_identifier_t *)new _ctl_os_display_encoder_identifier_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_os_display_encoder_identifier_t(void * jarg1) {
  _ctl_os_display_encoder_identifier_t *arg1 = (_ctl_os_display_encoder_identifier_t *) 0 ;
  
  arg1 = (_ctl_os_display_encoder_identifier_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_PixelClock_set(void * jarg1, unsigned long long jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->PixelClock = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_PixelClock_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint64_t) ((arg1)->PixelClock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_HActive_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->HActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_HActive_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint32_t) ((arg1)->HActive);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VActive_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->VActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VActive_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint32_t) ((arg1)->VActive);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_HTotal_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->HTotal = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_HTotal_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint32_t) ((arg1)->HTotal);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VTotal_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->VTotal = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VTotal_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint32_t) ((arg1)->VTotal);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_HBlank_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->HBlank = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_HBlank_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint32_t) ((arg1)->HBlank);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VBlank_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->VBlank = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VBlank_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint32_t) ((arg1)->VBlank);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_HSync_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->HSync = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_HSync_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint32_t) ((arg1)->HSync);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VSync_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->VSync = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VSync_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint32_t) ((arg1)->VSync);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_RefreshRate_set(void * jarg1, float jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RefreshRate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_RefreshRate_get(void * jarg1) {
  float jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  float result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (float) ((arg1)->RefreshRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_SignalStandard_set(void * jarg1, int jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  ctl_signal_standard_type_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (ctl_signal_standard_type_t)jarg2; 
  if (arg1) (arg1)->SignalStandard = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_SignalStandard_get(void * jarg1) {
  int jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  ctl_signal_standard_type_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (ctl_signal_standard_type_t) ((arg1)->SignalStandard);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VicId_set(void * jarg1, unsigned char jarg2) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->VicId = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_timing_t_VicId_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  result = (uint8_t) ((arg1)->VicId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_display_timing_t() {
  void * jresult ;
  _ctl_display_timing_t *result = 0 ;
  
  result = (_ctl_display_timing_t *)new _ctl_display_timing_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_display_timing_t(void * jarg1) {
  _ctl_display_timing_t *arg1 = (_ctl_display_timing_t *) 0 ;
  
  arg1 = (_ctl_display_timing_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Os_display_encoder_handle_set(void * jarg1, void * jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_os_display_encoder_identifier_t *arg2 = (ctl_os_display_encoder_identifier_t *) 0 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_os_display_encoder_identifier_t *)jarg2; 
  if (arg1) (arg1)->Os_display_encoder_handle = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Os_display_encoder_handle_get(void * jarg1) {
  void * jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_os_display_encoder_identifier_t *result = 0 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_os_display_encoder_identifier_t *)& ((arg1)->Os_display_encoder_handle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Type_set(void * jarg1, int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_display_output_types_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_display_output_types_t)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Type_get(void * jarg1) {
  int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_display_output_types_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_display_output_types_t) ((arg1)->Type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_AttachedDisplayMuxType_set(void * jarg1, int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_attached_display_mux_type_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_attached_display_mux_type_t)jarg2; 
  if (arg1) (arg1)->AttachedDisplayMuxType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_AttachedDisplayMuxType_get(void * jarg1) {
  int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_attached_display_mux_type_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_attached_display_mux_type_t) ((arg1)->AttachedDisplayMuxType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_ProtocolConverterOutput_set(void * jarg1, int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_display_output_types_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_display_output_types_t)jarg2; 
  if (arg1) (arg1)->ProtocolConverterOutput = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_ProtocolConverterOutput_get(void * jarg1) {
  int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_display_output_types_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_display_output_types_t) ((arg1)->ProtocolConverterOutput);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_SupportedSpec_set(void * jarg1, void * jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_revision_datatype_t *arg2 = (ctl_revision_datatype_t *) 0 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_revision_datatype_t *)jarg2; 
  if (arg1) (arg1)->SupportedSpec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_SupportedSpec_get(void * jarg1) {
  void * jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_revision_datatype_t *result = 0 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_revision_datatype_t *)& ((arg1)->SupportedSpec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_SupportedOutputBPCFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_output_bpc_flags_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_output_bpc_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedOutputBPCFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_SupportedOutputBPCFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_output_bpc_flags_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_output_bpc_flags_t) ((arg1)->SupportedOutputBPCFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_ProtocolConverterType_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_protocol_converter_location_flags_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_protocol_converter_location_flags_t)jarg2; 
  if (arg1) (arg1)->ProtocolConverterType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_ProtocolConverterType_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_protocol_converter_location_flags_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_protocol_converter_location_flags_t) ((arg1)->ProtocolConverterType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_DisplayConfigFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_display_config_flags_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_display_config_flags_t)jarg2; 
  if (arg1) (arg1)->DisplayConfigFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_DisplayConfigFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_display_config_flags_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_display_config_flags_t) ((arg1)->DisplayConfigFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_FeatureEnabledFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_std_display_feature_flags_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_std_display_feature_flags_t)jarg2; 
  if (arg1) (arg1)->FeatureEnabledFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_FeatureEnabledFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_std_display_feature_flags_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_std_display_feature_flags_t) ((arg1)->FeatureEnabledFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_FeatureSupportedFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_std_display_feature_flags_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_std_display_feature_flags_t)jarg2; 
  if (arg1) (arg1)->FeatureSupportedFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_FeatureSupportedFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_std_display_feature_flags_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_std_display_feature_flags_t) ((arg1)->FeatureSupportedFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_AdvancedFeatureEnabledFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_intel_display_feature_flags_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_intel_display_feature_flags_t)jarg2; 
  if (arg1) (arg1)->AdvancedFeatureEnabledFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_AdvancedFeatureEnabledFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_intel_display_feature_flags_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_intel_display_feature_flags_t) ((arg1)->AdvancedFeatureEnabledFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_AdvancedFeatureSupportedFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_intel_display_feature_flags_t arg2 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_intel_display_feature_flags_t)jarg2; 
  if (arg1) (arg1)->AdvancedFeatureSupportedFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_AdvancedFeatureSupportedFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_intel_display_feature_flags_t result;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_intel_display_feature_flags_t) ((arg1)->AdvancedFeatureSupportedFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Display_Timing_Info_set(void * jarg1, void * jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_display_timing_t *arg2 = (ctl_display_timing_t *) 0 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (ctl_display_timing_t *)jarg2; 
  if (arg1) (arg1)->Display_Timing_Info = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_Display_Timing_Info_get(void * jarg1) {
  void * jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  ctl_display_timing_t *result = 0 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (ctl_display_timing_t *)& ((arg1)->Display_Timing_Info);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_properties_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_display_properties_t() {
  void * jresult ;
  _ctl_display_properties_t *result = 0 ;
  
  result = (_ctl_display_properties_t *)new _ctl_display_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_display_properties_t(void * jarg1) {
  _ctl_display_properties_t *arg1 = (_ctl_display_properties_t *) 0 ;
  
  arg1 = (_ctl_display_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_Os_display_encoder_handle_set(void * jarg1, void * jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_os_display_encoder_identifier_t *arg2 = (ctl_os_display_encoder_identifier_t *) 0 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (ctl_os_display_encoder_identifier_t *)jarg2; 
  if (arg1) (arg1)->Os_display_encoder_handle = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_Os_display_encoder_handle_get(void * jarg1) {
  void * jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_os_display_encoder_identifier_t *result = 0 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (ctl_os_display_encoder_identifier_t *)& ((arg1)->Os_display_encoder_handle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_Type_set(void * jarg1, int jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_display_output_types_t arg2 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (ctl_display_output_types_t)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_Type_get(void * jarg1) {
  int jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_display_output_types_t result;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (ctl_display_output_types_t) ((arg1)->Type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_IsOnBoardProtocolConverterOutputPresent_set(void * jarg1, unsigned int jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsOnBoardProtocolConverterOutputPresent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_IsOnBoardProtocolConverterOutputPresent_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (bool) ((arg1)->IsOnBoardProtocolConverterOutputPresent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_SupportedSpec_set(void * jarg1, void * jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_revision_datatype_t *arg2 = (ctl_revision_datatype_t *) 0 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (ctl_revision_datatype_t *)jarg2; 
  if (arg1) (arg1)->SupportedSpec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_SupportedSpec_get(void * jarg1) {
  void * jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_revision_datatype_t *result = 0 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (ctl_revision_datatype_t *)& ((arg1)->SupportedSpec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_SupportedOutputBPCFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_output_bpc_flags_t arg2 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (ctl_output_bpc_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedOutputBPCFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_SupportedOutputBPCFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_output_bpc_flags_t result;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (ctl_output_bpc_flags_t) ((arg1)->SupportedOutputBPCFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_EncoderConfigFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_encoder_config_flags_t arg2 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (ctl_encoder_config_flags_t)jarg2; 
  if (arg1) (arg1)->EncoderConfigFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_EncoderConfigFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_encoder_config_flags_t result;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (ctl_encoder_config_flags_t) ((arg1)->EncoderConfigFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_FeatureSupportedFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_std_display_feature_flags_t arg2 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (ctl_std_display_feature_flags_t)jarg2; 
  if (arg1) (arg1)->FeatureSupportedFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_FeatureSupportedFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_std_display_feature_flags_t result;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (ctl_std_display_feature_flags_t) ((arg1)->FeatureSupportedFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_AdvancedFeatureSupportedFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_intel_display_feature_flags_t arg2 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (ctl_intel_display_feature_flags_t)jarg2; 
  if (arg1) (arg1)->AdvancedFeatureSupportedFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_AdvancedFeatureSupportedFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_intel_display_feature_flags_t result;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (ctl_intel_display_feature_flags_t) ((arg1)->AdvancedFeatureSupportedFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_adapter_display_encoder_properties_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_adapter_display_encoder_properties_t() {
  void * jresult ;
  _ctl_adapter_display_encoder_properties_t *result = 0 ;
  
  result = (_ctl_adapter_display_encoder_properties_t *)new _ctl_adapter_display_encoder_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_adapter_display_encoder_properties_t(void * jarg1) {
  _ctl_adapter_display_encoder_properties_t *arg1 = (_ctl_adapter_display_encoder_properties_t *) 0 ;
  
  arg1 = (_ctl_adapter_display_encoder_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetDeviceProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_device_adapter_properties_t *arg2 = (ctl_device_adapter_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_device_adapter_properties_t *)jarg2; 
  result = (ctl_result_t)ctlGetDeviceProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetDisplayProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_display_properties_t *arg2 = (ctl_display_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_display_properties_t *)jarg2; 
  result = (ctl_result_t)ctlGetDisplayProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetAdaperDisplayEncoderProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_adapter_display_encoder_properties_t *arg2 = (ctl_adapter_display_encoder_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_adapter_display_encoder_properties_t *)jarg2; 
  result = (ctl_result_t)ctlGetAdaperDisplayEncoderProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetZeDevice(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  void *arg2 = (void *) 0 ;
  void **arg3 = (void **) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void **)jarg3; 
  result = (ctl_result_t)ctlGetZeDevice(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_filter_properties_t_FilterType_set(void * jarg1, unsigned int jarg2) {
  _ctl_sharpness_filter_properties_t *arg1 = (_ctl_sharpness_filter_properties_t *) 0 ;
  ctl_sharpness_filter_type_flags_t arg2 ;
  
  arg1 = (_ctl_sharpness_filter_properties_t *)jarg1; 
  arg2 = (ctl_sharpness_filter_type_flags_t)jarg2; 
  if (arg1) (arg1)->FilterType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_filter_properties_t_FilterType_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sharpness_filter_properties_t *arg1 = (_ctl_sharpness_filter_properties_t *) 0 ;
  ctl_sharpness_filter_type_flags_t result;
  
  arg1 = (_ctl_sharpness_filter_properties_t *)jarg1; 
  result = (ctl_sharpness_filter_type_flags_t) ((arg1)->FilterType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_filter_properties_t_FilterDetails_set(void * jarg1, void * jarg2) {
  _ctl_sharpness_filter_properties_t *arg1 = (_ctl_sharpness_filter_properties_t *) 0 ;
  ctl_property_range_info_t *arg2 = (ctl_property_range_info_t *) 0 ;
  
  arg1 = (_ctl_sharpness_filter_properties_t *)jarg1; 
  arg2 = (ctl_property_range_info_t *)jarg2; 
  if (arg1) (arg1)->FilterDetails = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_filter_properties_t_FilterDetails_get(void * jarg1) {
  void * jresult ;
  _ctl_sharpness_filter_properties_t *arg1 = (_ctl_sharpness_filter_properties_t *) 0 ;
  ctl_property_range_info_t *result = 0 ;
  
  arg1 = (_ctl_sharpness_filter_properties_t *)jarg1; 
  result = (ctl_property_range_info_t *)& ((arg1)->FilterDetails);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_sharpness_filter_properties_t() {
  void * jresult ;
  _ctl_sharpness_filter_properties_t *result = 0 ;
  
  result = (_ctl_sharpness_filter_properties_t *)new _ctl_sharpness_filter_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_sharpness_filter_properties_t(void * jarg1) {
  _ctl_sharpness_filter_properties_t *arg1 = (_ctl_sharpness_filter_properties_t *) 0 ;
  
  arg1 = (_ctl_sharpness_filter_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_SupportedFilterFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  ctl_sharpness_filter_type_flags_t arg2 ;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  arg2 = (ctl_sharpness_filter_type_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedFilterFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_SupportedFilterFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  ctl_sharpness_filter_type_flags_t result;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  result = (ctl_sharpness_filter_type_flags_t) ((arg1)->SupportedFilterFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_NumFilterTypes_set(void * jarg1, unsigned char jarg2) {
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->NumFilterTypes = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_NumFilterTypes_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  result = (uint8_t) ((arg1)->NumFilterTypes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_pFilterProperty_set(void * jarg1, void * jarg2) {
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  ctl_sharpness_filter_properties_t *arg2 = (ctl_sharpness_filter_properties_t *) 0 ;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  arg2 = (ctl_sharpness_filter_properties_t *)jarg2; 
  if (arg1) (arg1)->pFilterProperty = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_caps_t_pFilterProperty_get(void * jarg1) {
  void * jresult ;
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  ctl_sharpness_filter_properties_t *result = 0 ;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  result = (ctl_sharpness_filter_properties_t *) ((arg1)->pFilterProperty);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_sharpness_caps_t() {
  void * jresult ;
  _ctl_sharpness_caps_t *result = 0 ;
  
  result = (_ctl_sharpness_caps_t *)new _ctl_sharpness_caps_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_sharpness_caps_t(void * jarg1) {
  _ctl_sharpness_caps_t *arg1 = (_ctl_sharpness_caps_t *) 0 ;
  
  arg1 = (_ctl_sharpness_caps_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_FilterType_set(void * jarg1, unsigned int jarg2) {
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  ctl_sharpness_filter_type_flags_t arg2 ;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  arg2 = (ctl_sharpness_filter_type_flags_t)jarg2; 
  if (arg1) (arg1)->FilterType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_FilterType_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  ctl_sharpness_filter_type_flags_t result;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  result = (ctl_sharpness_filter_type_flags_t) ((arg1)->FilterType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_Intensity_set(void * jarg1, float jarg2) {
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_sharpness_settings_t_Intensity_get(void * jarg1) {
  float jresult ;
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  float result;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  result = (float) ((arg1)->Intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_sharpness_settings_t() {
  void * jresult ;
  _ctl_sharpness_settings_t *result = 0 ;
  
  result = (_ctl_sharpness_settings_t *)new _ctl_sharpness_settings_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_sharpness_settings_t(void * jarg1) {
  _ctl_sharpness_settings_t *arg1 = (_ctl_sharpness_settings_t *) 0 ;
  
  arg1 = (_ctl_sharpness_settings_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSharpnessCaps(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_sharpness_caps_t *arg2 = (ctl_sharpness_caps_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_sharpness_caps_t *)jarg2; 
  result = (ctl_result_t)ctlGetSharpnessCaps(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetCurrentSharpness(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_sharpness_settings_t *arg2 = (ctl_sharpness_settings_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_sharpness_settings_t *)jarg2; 
  result = (ctl_result_t)ctlGetCurrentSharpness(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlSetCurrentSharpness(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_sharpness_settings_t *arg2 = (ctl_sharpness_settings_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_sharpness_settings_t *)jarg2; 
  result = (ctl_result_t)ctlSetCurrentSharpness(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_I2C_MAX_DATA_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0080);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_DataSize_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_DataSize_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->DataSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Address_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Address = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Address_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Address);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_OpType_set(void * jarg1, int jarg2) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  ctl_operation_type_t arg2 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  arg2 = (ctl_operation_type_t)jarg2; 
  if (arg1) (arg1)->OpType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_OpType_get(void * jarg1) {
  int jresult ;
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  ctl_operation_type_t result;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  result = (ctl_operation_type_t) ((arg1)->OpType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Offset_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Offset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Offset_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Offset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Flags_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  ctl_i2c_flags_t arg2 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  arg2 = (ctl_i2c_flags_t)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Flags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  ctl_i2c_flags_t result;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  result = (ctl_i2c_flags_t) ((arg1)->Flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_RAD_set(void * jarg1, unsigned long long jarg2) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->RAD = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_RAD_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  result = (uint64_t) ((arg1)->RAD);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Data_set(void * jarg1, void * jarg2) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->Data;
    for (ii = 0; ii < (size_t)0x0080; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_args_t_Data_get(void * jarg1) {
  void * jresult ;
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->Data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_i2c_access_args_t() {
  void * jresult ;
  _ctl_i2c_access_args_t *result = 0 ;
  
  result = (_ctl_i2c_access_args_t *)new _ctl_i2c_access_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_i2c_access_args_t(void * jarg1) {
  _ctl_i2c_access_args_t *arg1 = (_ctl_i2c_access_args_t *) 0 ;
  
  arg1 = (_ctl_i2c_access_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlI2CAccess(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_i2c_access_args_t *arg2 = (ctl_i2c_access_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_i2c_access_args_t *)jarg2; 
  result = (ctl_result_t)ctlI2CAccess(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_DataSize_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_DataSize_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->DataSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Address_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Address = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Address_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Address);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_OpType_set(void * jarg1, int jarg2) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  ctl_operation_type_t arg2 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  arg2 = (ctl_operation_type_t)jarg2; 
  if (arg1) (arg1)->OpType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_OpType_get(void * jarg1) {
  int jresult ;
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  ctl_operation_type_t result;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  result = (ctl_operation_type_t) ((arg1)->OpType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Offset_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Offset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Offset_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Offset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Flags_set(void * jarg1, unsigned int jarg2) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  ctl_i2c_pinpair_flags_t arg2 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  arg2 = (ctl_i2c_pinpair_flags_t)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Flags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  ctl_i2c_pinpair_flags_t result;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  result = (ctl_i2c_pinpair_flags_t) ((arg1)->Flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Data_set(void * jarg1, void * jarg2) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->Data;
    for (ii = 0; ii < (size_t)0x0080; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_Data_get(void * jarg1) {
  void * jresult ;
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->Data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_i2c_access_pinpair_args_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_i2c_access_pinpair_args_t() {
  void * jresult ;
  _ctl_i2c_access_pinpair_args_t *result = 0 ;
  
  result = (_ctl_i2c_access_pinpair_args_t *)new _ctl_i2c_access_pinpair_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_i2c_access_pinpair_args_t(void * jarg1) {
  _ctl_i2c_access_pinpair_args_t *arg1 = (_ctl_i2c_access_pinpair_args_t *) 0 ;
  
  arg1 = (_ctl_i2c_access_pinpair_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlI2CAccessOnPinPair(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_i2c_pin_pair_handle_t arg1 = (ctl_i2c_pin_pair_handle_t) 0 ;
  ctl_i2c_access_pinpair_args_t *arg2 = (ctl_i2c_access_pinpair_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_i2c_pin_pair_handle_t)jarg1; 
  arg2 = (ctl_i2c_access_pinpair_args_t *)jarg2; 
  result = (ctl_result_t)ctlI2CAccessOnPinPair(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_AUX_MAX_DATA_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(132);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_OpType_set(void * jarg1, int jarg2) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  ctl_operation_type_t arg2 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  arg2 = (ctl_operation_type_t)jarg2; 
  if (arg1) (arg1)->OpType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_OpType_get(void * jarg1) {
  int jresult ;
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  ctl_operation_type_t result;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  result = (ctl_operation_type_t) ((arg1)->OpType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Flags_set(void * jarg1, unsigned int jarg2) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  ctl_aux_flags_t arg2 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  arg2 = (ctl_aux_flags_t)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Flags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  ctl_aux_flags_t result;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  result = (ctl_aux_flags_t) ((arg1)->Flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Address_set(void * jarg1, unsigned int jarg2) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Address = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Address_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Address);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_RAD_set(void * jarg1, unsigned long long jarg2) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->RAD = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_RAD_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  result = (uint64_t) ((arg1)->RAD);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_PortID_set(void * jarg1, unsigned int jarg2) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->PortID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_PortID_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->PortID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_DataSize_set(void * jarg1, unsigned int jarg2) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_DataSize_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->DataSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Data_set(void * jarg1, void * jarg2) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->Data;
    for (ii = 0; ii < (size_t)132; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_aux_access_args_t_Data_get(void * jarg1) {
  void * jresult ;
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->Data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_aux_access_args_t() {
  void * jresult ;
  _ctl_aux_access_args_t *result = 0 ;
  
  result = (_ctl_aux_access_args_t *)new _ctl_aux_access_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_aux_access_args_t(void * jarg1) {
  _ctl_aux_access_args_t *arg1 = (_ctl_aux_access_args_t *) 0 ;
  
  arg1 = (_ctl_aux_access_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlAUXAccess(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_aux_access_args_t *arg2 = (ctl_aux_access_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_aux_access_args_t *)jarg2; 
  result = (ctl_result_t)ctlAUXAccess(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_caps_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_caps_t *arg1 = (_ctl_power_optimization_caps_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_power_optimization_caps_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_caps_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_caps_t *arg1 = (_ctl_power_optimization_caps_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_power_optimization_caps_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_caps_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_optimization_caps_t *arg1 = (_ctl_power_optimization_caps_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_optimization_caps_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_caps_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_optimization_caps_t *arg1 = (_ctl_power_optimization_caps_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_optimization_caps_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_caps_t_SupportedFeatures_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_caps_t *arg1 = (_ctl_power_optimization_caps_t *) 0 ;
  ctl_power_optimization_flags_t arg2 ;
  
  arg1 = (_ctl_power_optimization_caps_t *)jarg1; 
  arg2 = (ctl_power_optimization_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedFeatures = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_caps_t_SupportedFeatures_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_caps_t *arg1 = (_ctl_power_optimization_caps_t *) 0 ;
  ctl_power_optimization_flags_t result;
  
  arg1 = (_ctl_power_optimization_caps_t *)jarg1; 
  result = (ctl_power_optimization_flags_t) ((arg1)->SupportedFeatures);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_optimization_caps_t() {
  void * jresult ;
  _ctl_power_optimization_caps_t *result = 0 ;
  
  result = (_ctl_power_optimization_caps_t *)new _ctl_power_optimization_caps_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_optimization_caps_t(void * jarg1) {
  _ctl_power_optimization_caps_t *arg1 = (_ctl_power_optimization_caps_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_caps_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetPowerOptimizationCaps(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_power_optimization_caps_t *arg2 = (ctl_power_optimization_caps_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_power_optimization_caps_t *)jarg2; 
  result = (ctl_result_t)ctlGetPowerOptimizationCaps(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_SupportedLRRTypes_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  ctl_power_optimization_lrr_flags_t arg2 ;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  arg2 = (ctl_power_optimization_lrr_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedLRRTypes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_SupportedLRRTypes_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  ctl_power_optimization_lrr_flags_t result;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  result = (ctl_power_optimization_lrr_flags_t) ((arg1)->SupportedLRRTypes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_CurrentLRRTypes_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  ctl_power_optimization_lrr_flags_t arg2 ;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  arg2 = (ctl_power_optimization_lrr_flags_t)jarg2; 
  if (arg1) (arg1)->CurrentLRRTypes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_CurrentLRRTypes_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  ctl_power_optimization_lrr_flags_t result;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  result = (ctl_power_optimization_lrr_flags_t) ((arg1)->CurrentLRRTypes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_bRequirePSRDisable_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRequirePSRDisable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_bRequirePSRDisable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  result = (bool) ((arg1)->bRequirePSRDisable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_LowRR_set(void * jarg1, unsigned short jarg2) {
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->LowRR = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_lrr_t_LowRR_get(void * jarg1) {
  unsigned short jresult ;
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  uint16_t result;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  result = (uint16_t) ((arg1)->LowRR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_optimization_lrr_t() {
  void * jresult ;
  _ctl_power_optimization_lrr_t *result = 0 ;
  
  result = (_ctl_power_optimization_lrr_t *)new _ctl_power_optimization_lrr_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_optimization_lrr_t(void * jarg1) {
  _ctl_power_optimization_lrr_t *arg1 = (_ctl_power_optimization_lrr_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_lrr_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_psr_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_psr_t *arg1 = (_ctl_power_optimization_psr_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_power_optimization_psr_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_psr_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_psr_t *arg1 = (_ctl_power_optimization_psr_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_power_optimization_psr_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_psr_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_optimization_psr_t *arg1 = (_ctl_power_optimization_psr_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_optimization_psr_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_psr_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_optimization_psr_t *arg1 = (_ctl_power_optimization_psr_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_optimization_psr_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_psr_t_PSRVersion_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_optimization_psr_t *arg1 = (_ctl_power_optimization_psr_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_optimization_psr_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->PSRVersion = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_psr_t_PSRVersion_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_optimization_psr_t *arg1 = (_ctl_power_optimization_psr_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_optimization_psr_t *)jarg1; 
  result = (uint8_t) ((arg1)->PSRVersion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_psr_t_FullFetchUpdate_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_psr_t *arg1 = (_ctl_power_optimization_psr_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_optimization_psr_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FullFetchUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_psr_t_FullFetchUpdate_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_psr_t *arg1 = (_ctl_power_optimization_psr_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_optimization_psr_t *)jarg1; 
  result = (bool) ((arg1)->FullFetchUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_optimization_psr_t() {
  void * jresult ;
  _ctl_power_optimization_psr_t *result = 0 ;
  
  result = (_ctl_power_optimization_psr_t *)new _ctl_power_optimization_psr_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_optimization_psr_t(void * jarg1) {
  _ctl_power_optimization_psr_t *arg1 = (_ctl_power_optimization_psr_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_psr_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_MinLevel_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MinLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_MinLevel_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  result = (uint8_t) ((arg1)->MinLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_MaxLevel_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MaxLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_MaxLevel_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  result = (uint8_t) ((arg1)->MaxLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_Level_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_Level_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  result = (uint8_t) ((arg1)->Level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_SupportedFeatures_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  ctl_power_optimization_dpst_flags_t arg2 ;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  arg2 = (ctl_power_optimization_dpst_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedFeatures = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_SupportedFeatures_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  ctl_power_optimization_dpst_flags_t result;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  result = (ctl_power_optimization_dpst_flags_t) ((arg1)->SupportedFeatures);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_EnabledFeatures_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  ctl_power_optimization_dpst_flags_t arg2 ;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  arg2 = (ctl_power_optimization_dpst_flags_t)jarg2; 
  if (arg1) (arg1)->EnabledFeatures = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_dpst_t_EnabledFeatures_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  ctl_power_optimization_dpst_flags_t result;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  result = (ctl_power_optimization_dpst_flags_t) ((arg1)->EnabledFeatures);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_optimization_dpst_t() {
  void * jresult ;
  _ctl_power_optimization_dpst_t *result = 0 ;
  
  result = (_ctl_power_optimization_dpst_t *)new _ctl_power_optimization_dpst_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_optimization_dpst_t(void * jarg1) {
  _ctl_power_optimization_dpst_t *arg1 = (_ctl_power_optimization_dpst_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_dpst_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_feature_specific_info_t_LRRInfo_set(void * jarg1, void * jarg2) {
  _ctl_power_optimization_feature_specific_info_t *arg1 = (_ctl_power_optimization_feature_specific_info_t *) 0 ;
  ctl_power_optimization_lrr_t *arg2 = (ctl_power_optimization_lrr_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_feature_specific_info_t *)jarg1; 
  arg2 = (ctl_power_optimization_lrr_t *)jarg2; 
  if (arg1) (arg1)->LRRInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_feature_specific_info_t_LRRInfo_get(void * jarg1) {
  void * jresult ;
  _ctl_power_optimization_feature_specific_info_t *arg1 = (_ctl_power_optimization_feature_specific_info_t *) 0 ;
  ctl_power_optimization_lrr_t *result = 0 ;
  
  arg1 = (_ctl_power_optimization_feature_specific_info_t *)jarg1; 
  result = (ctl_power_optimization_lrr_t *)& ((arg1)->LRRInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_feature_specific_info_t_PSRInfo_set(void * jarg1, void * jarg2) {
  _ctl_power_optimization_feature_specific_info_t *arg1 = (_ctl_power_optimization_feature_specific_info_t *) 0 ;
  ctl_power_optimization_psr_t *arg2 = (ctl_power_optimization_psr_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_feature_specific_info_t *)jarg1; 
  arg2 = (ctl_power_optimization_psr_t *)jarg2; 
  if (arg1) (arg1)->PSRInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_feature_specific_info_t_PSRInfo_get(void * jarg1) {
  void * jresult ;
  _ctl_power_optimization_feature_specific_info_t *arg1 = (_ctl_power_optimization_feature_specific_info_t *) 0 ;
  ctl_power_optimization_psr_t *result = 0 ;
  
  arg1 = (_ctl_power_optimization_feature_specific_info_t *)jarg1; 
  result = (ctl_power_optimization_psr_t *)& ((arg1)->PSRInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_feature_specific_info_t_DPSTInfo_set(void * jarg1, void * jarg2) {
  _ctl_power_optimization_feature_specific_info_t *arg1 = (_ctl_power_optimization_feature_specific_info_t *) 0 ;
  ctl_power_optimization_dpst_t *arg2 = (ctl_power_optimization_dpst_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_feature_specific_info_t *)jarg1; 
  arg2 = (ctl_power_optimization_dpst_t *)jarg2; 
  if (arg1) (arg1)->DPSTInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_feature_specific_info_t_DPSTInfo_get(void * jarg1) {
  void * jresult ;
  _ctl_power_optimization_feature_specific_info_t *arg1 = (_ctl_power_optimization_feature_specific_info_t *) 0 ;
  ctl_power_optimization_dpst_t *result = 0 ;
  
  arg1 = (_ctl_power_optimization_feature_specific_info_t *)jarg1; 
  result = (ctl_power_optimization_dpst_t *)& ((arg1)->DPSTInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_optimization_feature_specific_info_t() {
  void * jresult ;
  _ctl_power_optimization_feature_specific_info_t *result = 0 ;
  
  result = (_ctl_power_optimization_feature_specific_info_t *)new _ctl_power_optimization_feature_specific_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_optimization_feature_specific_info_t(void * jarg1) {
  _ctl_power_optimization_feature_specific_info_t *arg1 = (_ctl_power_optimization_feature_specific_info_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_feature_specific_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_PowerOptimizationPlan_set(void * jarg1, int jarg2) {
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  ctl_power_optimization_plan_t arg2 ;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  arg2 = (ctl_power_optimization_plan_t)jarg2; 
  if (arg1) (arg1)->PowerOptimizationPlan = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_PowerOptimizationPlan_get(void * jarg1) {
  int jresult ;
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  ctl_power_optimization_plan_t result;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  result = (ctl_power_optimization_plan_t) ((arg1)->PowerOptimizationPlan);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_PowerOptimizationFeature_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  ctl_power_optimization_flags_t arg2 ;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  arg2 = (ctl_power_optimization_flags_t)jarg2; 
  if (arg1) (arg1)->PowerOptimizationFeature = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_PowerOptimizationFeature_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  ctl_power_optimization_flags_t result;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  result = (ctl_power_optimization_flags_t) ((arg1)->PowerOptimizationFeature);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_FeatureSpecificData_set(void * jarg1, void * jarg2) {
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  ctl_power_optimization_feature_specific_info_t *arg2 = (ctl_power_optimization_feature_specific_info_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  arg2 = (ctl_power_optimization_feature_specific_info_t *)jarg2; 
  if (arg1) (arg1)->FeatureSpecificData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_FeatureSpecificData_get(void * jarg1) {
  void * jresult ;
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  ctl_power_optimization_feature_specific_info_t *result = 0 ;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  result = (ctl_power_optimization_feature_specific_info_t *)& ((arg1)->FeatureSpecificData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_PowerSource_set(void * jarg1, int jarg2) {
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  ctl_power_source_t arg2 ;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  arg2 = (ctl_power_source_t)jarg2; 
  if (arg1) (arg1)->PowerSource = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_optimization_settings_t_PowerSource_get(void * jarg1) {
  int jresult ;
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  ctl_power_source_t result;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  result = (ctl_power_source_t) ((arg1)->PowerSource);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_optimization_settings_t() {
  void * jresult ;
  _ctl_power_optimization_settings_t *result = 0 ;
  
  result = (_ctl_power_optimization_settings_t *)new _ctl_power_optimization_settings_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_optimization_settings_t(void * jarg1) {
  _ctl_power_optimization_settings_t *arg1 = (_ctl_power_optimization_settings_t *) 0 ;
  
  arg1 = (_ctl_power_optimization_settings_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_TargetBrightness_set(void * jarg1, unsigned int jarg2) {
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->TargetBrightness = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_TargetBrightness_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  result = (uint32_t) ((arg1)->TargetBrightness);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_SmoothTransitionTimeInMs_set(void * jarg1, unsigned int jarg2) {
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->SmoothTransitionTimeInMs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_SmoothTransitionTimeInMs_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  result = (uint32_t) ((arg1)->SmoothTransitionTimeInMs);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_set_brightness_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_set_brightness_t() {
  void * jresult ;
  _ctl_set_brightness_t *result = 0 ;
  
  result = (_ctl_set_brightness_t *)new _ctl_set_brightness_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_set_brightness_t(void * jarg1) {
  _ctl_set_brightness_t *arg1 = (_ctl_set_brightness_t *) 0 ;
  
  arg1 = (_ctl_set_brightness_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_TargetBrightness_set(void * jarg1, unsigned int jarg2) {
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->TargetBrightness = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_TargetBrightness_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  result = (uint32_t) ((arg1)->TargetBrightness);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_CurrentBrightness_set(void * jarg1, unsigned int jarg2) {
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->CurrentBrightness = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_CurrentBrightness_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  result = (uint32_t) ((arg1)->CurrentBrightness);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_brightness_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_get_brightness_t() {
  void * jresult ;
  _ctl_get_brightness_t *result = 0 ;
  
  result = (_ctl_get_brightness_t *)new _ctl_get_brightness_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_get_brightness_t(void * jarg1) {
  _ctl_get_brightness_t *arg1 = (_ctl_get_brightness_t *) 0 ;
  
  arg1 = (_ctl_get_brightness_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetPowerOptimizationSetting(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_power_optimization_settings_t *arg2 = (ctl_power_optimization_settings_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_power_optimization_settings_t *)jarg2; 
  result = (ctl_result_t)ctlGetPowerOptimizationSetting(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlSetPowerOptimizationSetting(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_power_optimization_settings_t *arg2 = (ctl_power_optimization_settings_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_power_optimization_settings_t *)jarg2; 
  result = (ctl_result_t)ctlSetPowerOptimizationSetting(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlSetBrightnessSetting(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_set_brightness_t *arg2 = (ctl_set_brightness_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_set_brightness_t *)jarg2; 
  result = (ctl_result_t)ctlSetBrightnessSetting(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetBrightnessSetting(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_get_brightness_t *arg2 = (ctl_get_brightness_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_get_brightness_t *)jarg2; 
  result = (ctl_result_t)ctlGetBrightnessSetting(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_MAX_NUM_SAMPLES_PER_CHANNEL_1D_LUT_get() {
  int jresult ;
  int result;
  
  result = (int)(8192);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_xR_set(void * jarg1, double jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xR = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_xR_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (double) ((arg1)->xR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_yR_set(void * jarg1, double jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yR = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_yR_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (double) ((arg1)->yR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_xG_set(void * jarg1, double jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xG = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_xG_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (double) ((arg1)->xG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_yG_set(void * jarg1, double jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yG = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_yG_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (double) ((arg1)->yG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_xB_set(void * jarg1, double jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xB = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_xB_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (double) ((arg1)->xB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_yB_set(void * jarg1, double jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yB = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_yB_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (double) ((arg1)->yB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_xW_set(void * jarg1, double jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xW = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_xW_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (double) ((arg1)->xW);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_yW_set(void * jarg1, double jarg2) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yW = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_color_primaries_t_yW_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  result = (double) ((arg1)->yW);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_color_primaries_t() {
  void * jresult ;
  _ctl_pixtx_color_primaries_t *result = 0 ;
  
  result = (_ctl_pixtx_color_primaries_t *)new _ctl_pixtx_color_primaries_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_color_primaries_t(void * jarg1) {
  _ctl_pixtx_color_primaries_t *arg1 = (_ctl_pixtx_color_primaries_t *) 0 ;
  
  arg1 = (_ctl_pixtx_color_primaries_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_BitsPerColor_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->BitsPerColor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_BitsPerColor_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (uint32_t) ((arg1)->BitsPerColor);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_IsFloat_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsFloat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_IsFloat_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (bool) ((arg1)->IsFloat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_EncodingType_set(void * jarg1, int jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  ctl_pixtx_gamma_encoding_type_t arg2 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = (ctl_pixtx_gamma_encoding_type_t)jarg2; 
  if (arg1) (arg1)->EncodingType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_EncodingType_get(void * jarg1) {
  int jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  ctl_pixtx_gamma_encoding_type_t result;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (ctl_pixtx_gamma_encoding_type_t) ((arg1)->EncodingType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_ColorSpace_set(void * jarg1, int jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  ctl_pixtx_color_space_t arg2 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = (ctl_pixtx_color_space_t)jarg2; 
  if (arg1) (arg1)->ColorSpace = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_ColorSpace_get(void * jarg1) {
  int jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  ctl_pixtx_color_space_t result;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (ctl_pixtx_color_space_t) ((arg1)->ColorSpace);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_ColorModel_set(void * jarg1, int jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  ctl_pixtx_color_model_t arg2 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = (ctl_pixtx_color_model_t)jarg2; 
  if (arg1) (arg1)->ColorModel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_ColorModel_get(void * jarg1) {
  int jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  ctl_pixtx_color_model_t result;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (ctl_pixtx_color_model_t) ((arg1)->ColorModel);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_ColorPrimaries_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  ctl_pixtx_color_primaries_t *arg2 = (ctl_pixtx_color_primaries_t *) 0 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = (ctl_pixtx_color_primaries_t *)jarg2; 
  if (arg1) (arg1)->ColorPrimaries = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_ColorPrimaries_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  ctl_pixtx_color_primaries_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (ctl_pixtx_color_primaries_t *)& ((arg1)->ColorPrimaries);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_MaxBrightness_set(void * jarg1, double jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->MaxBrightness = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_MaxBrightness_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (double) ((arg1)->MaxBrightness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_MinBrightness_set(void * jarg1, double jarg2) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->MinBrightness = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pixel_format_t_MinBrightness_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  result = (double) ((arg1)->MinBrightness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_pixel_format_t() {
  void * jresult ;
  _ctl_pixtx_pixel_format_t *result = 0 ;
  
  result = (_ctl_pixtx_pixel_format_t *)new _ctl_pixtx_pixel_format_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_pixel_format_t(void * jarg1) {
  _ctl_pixtx_pixel_format_t *arg1 = (_ctl_pixtx_pixel_format_t *) 0 ;
  
  arg1 = (_ctl_pixtx_pixel_format_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_SamplingType_set(void * jarg1, int jarg2) {
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  ctl_pixtx_lut_sampling_type_t arg2 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  arg2 = (ctl_pixtx_lut_sampling_type_t)jarg2; 
  if (arg1) (arg1)->SamplingType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_SamplingType_get(void * jarg1) {
  int jresult ;
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  ctl_pixtx_lut_sampling_type_t result;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  result = (ctl_pixtx_lut_sampling_type_t) ((arg1)->SamplingType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_NumSamplesPerChannel_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumSamplesPerChannel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_NumSamplesPerChannel_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumSamplesPerChannel);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_NumChannels_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumChannels = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_NumChannels_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumChannels);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_pSampleValues_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->pSampleValues = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_pSampleValues_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  double *result = 0 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  result = (double *) ((arg1)->pSampleValues);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_pSamplePositions_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->pSamplePositions = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_1dlut_config_t_pSamplePositions_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  double *result = 0 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  result = (double *) ((arg1)->pSamplePositions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_1dlut_config_t() {
  void * jresult ;
  _ctl_pixtx_1dlut_config_t *result = 0 ;
  
  result = (_ctl_pixtx_1dlut_config_t *)new _ctl_pixtx_1dlut_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_1dlut_config_t(void * jarg1) {
  _ctl_pixtx_1dlut_config_t *arg1 = (_ctl_pixtx_1dlut_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_1dlut_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_PreOffsets_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->PreOffsets;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_PreOffsets_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  double *result = 0 ;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  result = (double *)(double *) ((arg1)->PreOffsets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_PostOffsets_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->PostOffsets;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_PostOffsets_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  double *result = 0 ;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  result = (double *)(double *) ((arg1)->PostOffsets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_Matrix_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  double (*arg2)[3] = (double (*)[3]) (double (*)[3])0 ;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  arg2 = (double (*)[3])jarg2; 
  {
    double (*inp)[3] = (double (*)[3])(arg2);
    double (*dest)[3] = (double (*)[3])(arg1->Matrix);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_matrix_config_t_Matrix_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  double (*result)[3] = 0 ;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  result = (double (*)[3])(double (*)[3]) ((arg1)->Matrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_matrix_config_t() {
  void * jresult ;
  _ctl_pixtx_matrix_config_t *result = 0 ;
  
  result = (_ctl_pixtx_matrix_config_t *)new _ctl_pixtx_matrix_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_matrix_config_t(void * jarg1) {
  _ctl_pixtx_matrix_config_t *arg1 = (_ctl_pixtx_matrix_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_matrix_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_sample_t_Red_set(void * jarg1, double jarg2) {
  _ctl_pixtx_3dlut_sample_t *arg1 = (_ctl_pixtx_3dlut_sample_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_3dlut_sample_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Red = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_sample_t_Red_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_3dlut_sample_t *arg1 = (_ctl_pixtx_3dlut_sample_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_3dlut_sample_t *)jarg1; 
  result = (double) ((arg1)->Red);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_sample_t_Green_set(void * jarg1, double jarg2) {
  _ctl_pixtx_3dlut_sample_t *arg1 = (_ctl_pixtx_3dlut_sample_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_3dlut_sample_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Green = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_sample_t_Green_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_3dlut_sample_t *arg1 = (_ctl_pixtx_3dlut_sample_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_3dlut_sample_t *)jarg1; 
  result = (double) ((arg1)->Green);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_sample_t_Blue_set(void * jarg1, double jarg2) {
  _ctl_pixtx_3dlut_sample_t *arg1 = (_ctl_pixtx_3dlut_sample_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_pixtx_3dlut_sample_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Blue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_sample_t_Blue_get(void * jarg1) {
  double jresult ;
  _ctl_pixtx_3dlut_sample_t *arg1 = (_ctl_pixtx_3dlut_sample_t *) 0 ;
  double result;
  
  arg1 = (_ctl_pixtx_3dlut_sample_t *)jarg1; 
  result = (double) ((arg1)->Blue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_3dlut_sample_t() {
  void * jresult ;
  _ctl_pixtx_3dlut_sample_t *result = 0 ;
  
  result = (_ctl_pixtx_3dlut_sample_t *)new _ctl_pixtx_3dlut_sample_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_3dlut_sample_t(void * jarg1) {
  _ctl_pixtx_3dlut_sample_t *arg1 = (_ctl_pixtx_3dlut_sample_t *) 0 ;
  
  arg1 = (_ctl_pixtx_3dlut_sample_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_config_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_3dlut_config_t *arg1 = (_ctl_pixtx_3dlut_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_3dlut_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_config_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_3dlut_config_t *arg1 = (_ctl_pixtx_3dlut_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_3dlut_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_config_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pixtx_3dlut_config_t *arg1 = (_ctl_pixtx_3dlut_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pixtx_3dlut_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_config_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pixtx_3dlut_config_t *arg1 = (_ctl_pixtx_3dlut_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pixtx_3dlut_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_config_t_NumSamplesPerChannel_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_3dlut_config_t *arg1 = (_ctl_pixtx_3dlut_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_3dlut_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumSamplesPerChannel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_config_t_NumSamplesPerChannel_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_3dlut_config_t *arg1 = (_ctl_pixtx_3dlut_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_3dlut_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumSamplesPerChannel);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_config_t_pSampleValues_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_3dlut_config_t *arg1 = (_ctl_pixtx_3dlut_config_t *) 0 ;
  ctl_pixtx_3dlut_sample_t *arg2 = (ctl_pixtx_3dlut_sample_t *) 0 ;
  
  arg1 = (_ctl_pixtx_3dlut_config_t *)jarg1; 
  arg2 = (ctl_pixtx_3dlut_sample_t *)jarg2; 
  if (arg1) (arg1)->pSampleValues = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_3dlut_config_t_pSampleValues_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_3dlut_config_t *arg1 = (_ctl_pixtx_3dlut_config_t *) 0 ;
  ctl_pixtx_3dlut_sample_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_3dlut_config_t *)jarg1; 
  result = (ctl_pixtx_3dlut_sample_t *) ((arg1)->pSampleValues);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_3dlut_config_t() {
  void * jresult ;
  _ctl_pixtx_3dlut_config_t *result = 0 ;
  
  result = (_ctl_pixtx_3dlut_config_t *)new _ctl_pixtx_3dlut_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_3dlut_config_t(void * jarg1) {
  _ctl_pixtx_3dlut_config_t *arg1 = (_ctl_pixtx_3dlut_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_3dlut_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_config_t_OneDLutConfig_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_config_t *arg1 = (_ctl_pixtx_config_t *) 0 ;
  ctl_pixtx_1dlut_config_t *arg2 = (ctl_pixtx_1dlut_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_config_t *)jarg1; 
  arg2 = (ctl_pixtx_1dlut_config_t *)jarg2; 
  if (arg1) (arg1)->OneDLutConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_config_t_OneDLutConfig_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_config_t *arg1 = (_ctl_pixtx_config_t *) 0 ;
  ctl_pixtx_1dlut_config_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_config_t *)jarg1; 
  result = (ctl_pixtx_1dlut_config_t *)& ((arg1)->OneDLutConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_config_t_ThreeDLutConfig_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_config_t *arg1 = (_ctl_pixtx_config_t *) 0 ;
  ctl_pixtx_3dlut_config_t *arg2 = (ctl_pixtx_3dlut_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_config_t *)jarg1; 
  arg2 = (ctl_pixtx_3dlut_config_t *)jarg2; 
  if (arg1) (arg1)->ThreeDLutConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_config_t_ThreeDLutConfig_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_config_t *arg1 = (_ctl_pixtx_config_t *) 0 ;
  ctl_pixtx_3dlut_config_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_config_t *)jarg1; 
  result = (ctl_pixtx_3dlut_config_t *)& ((arg1)->ThreeDLutConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_config_t_MatrixConfig_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_config_t *arg1 = (_ctl_pixtx_config_t *) 0 ;
  ctl_pixtx_matrix_config_t *arg2 = (ctl_pixtx_matrix_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_config_t *)jarg1; 
  arg2 = (ctl_pixtx_matrix_config_t *)jarg2; 
  if (arg1) (arg1)->MatrixConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_config_t_MatrixConfig_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_config_t *arg1 = (_ctl_pixtx_config_t *) 0 ;
  ctl_pixtx_matrix_config_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_config_t *)jarg1; 
  result = (ctl_pixtx_matrix_config_t *)& ((arg1)->MatrixConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_config_t() {
  void * jresult ;
  _ctl_pixtx_config_t *result = 0 ;
  
  result = (_ctl_pixtx_config_t *)new _ctl_pixtx_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_config_t(void * jarg1) {
  _ctl_pixtx_config_t *arg1 = (_ctl_pixtx_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_BlockId_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->BlockId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_BlockId_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->BlockId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_BlockType_set(void * jarg1, int jarg2) {
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  ctl_pixtx_block_type_t arg2 ;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  arg2 = (ctl_pixtx_block_type_t)jarg2; 
  if (arg1) (arg1)->BlockType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_BlockType_get(void * jarg1) {
  int jresult ;
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  ctl_pixtx_block_type_t result;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  result = (ctl_pixtx_block_type_t) ((arg1)->BlockType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_Config_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  ctl_pixtx_config_t *arg2 = (ctl_pixtx_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  arg2 = (ctl_pixtx_config_t *)jarg2; 
  if (arg1) (arg1)->Config = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_block_config_t_Config_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  ctl_pixtx_config_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  result = (ctl_pixtx_config_t *)& ((arg1)->Config);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_block_config_t() {
  void * jresult ;
  _ctl_pixtx_block_config_t *result = 0 ;
  
  result = (_ctl_pixtx_block_config_t *)new _ctl_pixtx_block_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_block_config_t(void * jarg1) {
  _ctl_pixtx_block_config_t *arg1 = (_ctl_pixtx_block_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_block_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_QueryType_set(void * jarg1, int jarg2) {
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  ctl_pixtx_config_query_type_t arg2 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  arg2 = (ctl_pixtx_config_query_type_t)jarg2; 
  if (arg1) (arg1)->QueryType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_QueryType_get(void * jarg1) {
  int jresult ;
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  ctl_pixtx_config_query_type_t result;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  result = (ctl_pixtx_config_query_type_t) ((arg1)->QueryType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_InputPixelFormat_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  ctl_pixtx_pixel_format_t *arg2 = (ctl_pixtx_pixel_format_t *) 0 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  arg2 = (ctl_pixtx_pixel_format_t *)jarg2; 
  if (arg1) (arg1)->InputPixelFormat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_InputPixelFormat_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  ctl_pixtx_pixel_format_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  result = (ctl_pixtx_pixel_format_t *)& ((arg1)->InputPixelFormat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_OutputPixelFormat_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  ctl_pixtx_pixel_format_t *arg2 = (ctl_pixtx_pixel_format_t *) 0 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  arg2 = (ctl_pixtx_pixel_format_t *)jarg2; 
  if (arg1) (arg1)->OutputPixelFormat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_OutputPixelFormat_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  ctl_pixtx_pixel_format_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  result = (ctl_pixtx_pixel_format_t *)& ((arg1)->OutputPixelFormat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_NumBlocks_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumBlocks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_NumBlocks_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumBlocks);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_pBlockConfigs_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  ctl_pixtx_block_config_t *arg2 = (ctl_pixtx_block_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  arg2 = (ctl_pixtx_block_config_t *)jarg2; 
  if (arg1) (arg1)->pBlockConfigs = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_get_config_t_pBlockConfigs_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  ctl_pixtx_block_config_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  result = (ctl_pixtx_block_config_t *) ((arg1)->pBlockConfigs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_pipe_get_config_t() {
  void * jresult ;
  _ctl_pixtx_pipe_get_config_t *result = 0 ;
  
  result = (_ctl_pixtx_pipe_get_config_t *)new _ctl_pixtx_pipe_get_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_pipe_get_config_t(void * jarg1) {
  _ctl_pixtx_pipe_get_config_t *arg1 = (_ctl_pixtx_pipe_get_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_pipe_get_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_OpertaionType_set(void * jarg1, int jarg2) {
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  ctl_pixtx_config_opertaion_type_t arg2 ;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  arg2 = (ctl_pixtx_config_opertaion_type_t)jarg2; 
  if (arg1) (arg1)->OpertaionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_OpertaionType_get(void * jarg1) {
  int jresult ;
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  ctl_pixtx_config_opertaion_type_t result;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  result = (ctl_pixtx_config_opertaion_type_t) ((arg1)->OpertaionType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_Flags_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  ctl_pixtx_pipe_set_config_flags_t arg2 ;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  arg2 = (ctl_pixtx_pipe_set_config_flags_t)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_Flags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  ctl_pixtx_pipe_set_config_flags_t result;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  result = (ctl_pixtx_pipe_set_config_flags_t) ((arg1)->Flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_NumBlocks_set(void * jarg1, unsigned int jarg2) {
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumBlocks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_NumBlocks_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumBlocks);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_pBlockConfigs_set(void * jarg1, void * jarg2) {
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  ctl_pixtx_block_config_t *arg2 = (ctl_pixtx_block_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  arg2 = (ctl_pixtx_block_config_t *)jarg2; 
  if (arg1) (arg1)->pBlockConfigs = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pixtx_pipe_set_config_t_pBlockConfigs_get(void * jarg1) {
  void * jresult ;
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  ctl_pixtx_block_config_t *result = 0 ;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  result = (ctl_pixtx_block_config_t *) ((arg1)->pBlockConfigs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pixtx_pipe_set_config_t() {
  void * jresult ;
  _ctl_pixtx_pipe_set_config_t *result = 0 ;
  
  result = (_ctl_pixtx_pipe_set_config_t *)new _ctl_pixtx_pipe_set_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pixtx_pipe_set_config_t(void * jarg1) {
  _ctl_pixtx_pipe_set_config_t *arg1 = (_ctl_pixtx_pipe_set_config_t *) 0 ;
  
  arg1 = (_ctl_pixtx_pipe_set_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPixelTransformationGetConfig(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_pixtx_pipe_get_config_t *arg2 = (ctl_pixtx_pipe_get_config_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_pixtx_pipe_get_config_t *)jarg2; 
  result = (ctl_result_t)ctlPixelTransformationGetConfig(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPixelTransformationSetConfig(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_pixtx_pipe_set_config_t *arg2 = (ctl_pixtx_pipe_set_config_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_pixtx_pipe_set_config_t *)jarg2; 
  result = (ctl_result_t)ctlPixelTransformationSetConfig(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_OpType_set(void * jarg1, int jarg2) {
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  ctl_operation_type_t arg2 ;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  arg2 = (ctl_operation_type_t)jarg2; 
  if (arg1) (arg1)->OpType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_OpType_get(void * jarg1) {
  int jresult ;
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  ctl_operation_type_t result;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  result = (ctl_operation_type_t) ((arg1)->OpType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_BlockNumber_set(void * jarg1, unsigned int jarg2) {
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->BlockNumber = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_BlockNumber_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->BlockNumber);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_DescriptorDataSize_set(void * jarg1, unsigned int jarg2) {
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DescriptorDataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_DescriptorDataSize_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->DescriptorDataSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_pDescriptorData_set(void * jarg1, void * jarg2) {
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->pDescriptorData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_panel_descriptor_access_args_t_pDescriptorData_get(void * jarg1) {
  void * jresult ;
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  result = (uint8_t *) ((arg1)->pDescriptorData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_panel_descriptor_access_args_t() {
  void * jresult ;
  _ctl_panel_descriptor_access_args_t *result = 0 ;
  
  result = (_ctl_panel_descriptor_access_args_t *)new _ctl_panel_descriptor_access_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_panel_descriptor_access_args_t(void * jarg1) {
  _ctl_panel_descriptor_access_args_t *arg1 = (_ctl_panel_descriptor_access_args_t *) 0 ;
  
  arg1 = (_ctl_panel_descriptor_access_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPanelDescriptorAccess(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_panel_descriptor_access_args_t *arg2 = (ctl_panel_descriptor_access_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_panel_descriptor_access_args_t *)jarg2; 
  result = (ctl_result_t)ctlPanelDescriptorAccess(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_Get_set(void * jarg1, unsigned int jarg2) {
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Get = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_Get_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  result = (bool) ((arg1)->Get);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_RetroScalingType_set(void * jarg1, unsigned int jarg2) {
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  ctl_retro_scaling_type_flags_t arg2 ;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  arg2 = (ctl_retro_scaling_type_flags_t)jarg2; 
  if (arg1) (arg1)->RetroScalingType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_settings_t_RetroScalingType_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  ctl_retro_scaling_type_flags_t result;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  result = (ctl_retro_scaling_type_flags_t) ((arg1)->RetroScalingType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_retro_scaling_settings_t() {
  void * jresult ;
  _ctl_retro_scaling_settings_t *result = 0 ;
  
  result = (_ctl_retro_scaling_settings_t *)new _ctl_retro_scaling_settings_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_retro_scaling_settings_t(void * jarg1) {
  _ctl_retro_scaling_settings_t *arg1 = (_ctl_retro_scaling_settings_t *) 0 ;
  
  arg1 = (_ctl_retro_scaling_settings_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_caps_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_retro_scaling_caps_t *arg1 = (_ctl_retro_scaling_caps_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_retro_scaling_caps_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_caps_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_retro_scaling_caps_t *arg1 = (_ctl_retro_scaling_caps_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_retro_scaling_caps_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_caps_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_retro_scaling_caps_t *arg1 = (_ctl_retro_scaling_caps_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_retro_scaling_caps_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_caps_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_retro_scaling_caps_t *arg1 = (_ctl_retro_scaling_caps_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_retro_scaling_caps_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_caps_t_SupportedRetroScaling_set(void * jarg1, unsigned int jarg2) {
  _ctl_retro_scaling_caps_t *arg1 = (_ctl_retro_scaling_caps_t *) 0 ;
  ctl_retro_scaling_type_flags_t arg2 ;
  
  arg1 = (_ctl_retro_scaling_caps_t *)jarg1; 
  arg2 = (ctl_retro_scaling_type_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedRetroScaling = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_retro_scaling_caps_t_SupportedRetroScaling_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_retro_scaling_caps_t *arg1 = (_ctl_retro_scaling_caps_t *) 0 ;
  ctl_retro_scaling_type_flags_t result;
  
  arg1 = (_ctl_retro_scaling_caps_t *)jarg1; 
  result = (ctl_retro_scaling_type_flags_t) ((arg1)->SupportedRetroScaling);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_retro_scaling_caps_t() {
  void * jresult ;
  _ctl_retro_scaling_caps_t *result = 0 ;
  
  result = (_ctl_retro_scaling_caps_t *)new _ctl_retro_scaling_caps_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_retro_scaling_caps_t(void * jarg1) {
  _ctl_retro_scaling_caps_t *arg1 = (_ctl_retro_scaling_caps_t *) 0 ;
  
  arg1 = (_ctl_retro_scaling_caps_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSupportedRetroScalingCapability(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_retro_scaling_caps_t *arg2 = (ctl_retro_scaling_caps_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_retro_scaling_caps_t *)jarg2; 
  result = (ctl_result_t)ctlGetSupportedRetroScalingCapability(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSetRetroScaling(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_retro_scaling_settings_t *arg2 = (ctl_retro_scaling_settings_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_retro_scaling_settings_t *)jarg2; 
  result = (ctl_result_t)ctlGetSetRetroScaling(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_caps_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_scaling_caps_t *arg1 = (_ctl_scaling_caps_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_scaling_caps_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_caps_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_scaling_caps_t *arg1 = (_ctl_scaling_caps_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_scaling_caps_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_caps_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_scaling_caps_t *arg1 = (_ctl_scaling_caps_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_scaling_caps_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_caps_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_scaling_caps_t *arg1 = (_ctl_scaling_caps_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_scaling_caps_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_caps_t_SupportedScaling_set(void * jarg1, unsigned int jarg2) {
  _ctl_scaling_caps_t *arg1 = (_ctl_scaling_caps_t *) 0 ;
  ctl_scaling_type_flags_t arg2 ;
  
  arg1 = (_ctl_scaling_caps_t *)jarg1; 
  arg2 = (ctl_scaling_type_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedScaling = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_caps_t_SupportedScaling_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_scaling_caps_t *arg1 = (_ctl_scaling_caps_t *) 0 ;
  ctl_scaling_type_flags_t result;
  
  arg1 = (_ctl_scaling_caps_t *)jarg1; 
  result = (ctl_scaling_type_flags_t) ((arg1)->SupportedScaling);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_scaling_caps_t() {
  void * jresult ;
  _ctl_scaling_caps_t *result = 0 ;
  
  result = (_ctl_scaling_caps_t *)new _ctl_scaling_caps_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_scaling_caps_t(void * jarg1) {
  _ctl_scaling_caps_t *arg1 = (_ctl_scaling_caps_t *) 0 ;
  
  arg1 = (_ctl_scaling_caps_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_ScalingType_set(void * jarg1, unsigned int jarg2) {
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  ctl_scaling_type_flags_t arg2 ;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  arg2 = (ctl_scaling_type_flags_t)jarg2; 
  if (arg1) (arg1)->ScalingType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_ScalingType_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  ctl_scaling_type_flags_t result;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  result = (ctl_scaling_type_flags_t) ((arg1)->ScalingType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_CustomScalingX_set(void * jarg1, unsigned int jarg2) {
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->CustomScalingX = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_CustomScalingX_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  result = (uint32_t) ((arg1)->CustomScalingX);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_CustomScalingY_set(void * jarg1, unsigned int jarg2) {
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->CustomScalingY = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_CustomScalingY_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  result = (uint32_t) ((arg1)->CustomScalingY);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_HardwareModeSet_set(void * jarg1, unsigned int jarg2) {
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HardwareModeSet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_HardwareModeSet_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  result = (bool) ((arg1)->HardwareModeSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_PreferredScalingType_set(void * jarg1, unsigned int jarg2) {
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  ctl_scaling_type_flags_t arg2 ;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  arg2 = (ctl_scaling_type_flags_t)jarg2; 
  if (arg1) (arg1)->PreferredScalingType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_scaling_settings_t_PreferredScalingType_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  ctl_scaling_type_flags_t result;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  result = (ctl_scaling_type_flags_t) ((arg1)->PreferredScalingType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_scaling_settings_t() {
  void * jresult ;
  _ctl_scaling_settings_t *result = 0 ;
  
  result = (_ctl_scaling_settings_t *)new _ctl_scaling_settings_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_scaling_settings_t(void * jarg1) {
  _ctl_scaling_settings_t *arg1 = (_ctl_scaling_settings_t *) 0 ;
  
  arg1 = (_ctl_scaling_settings_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSupportedScalingCapability(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_scaling_caps_t *arg2 = (ctl_scaling_caps_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_scaling_caps_t *)jarg2; 
  result = (ctl_result_t)ctlGetSupportedScalingCapability(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetCurrentScaling(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_scaling_settings_t *arg2 = (ctl_scaling_settings_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_scaling_settings_t *)jarg2; 
  result = (ctl_result_t)ctlGetCurrentScaling(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlSetCurrentScaling(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_scaling_settings_t *arg2 = (ctl_scaling_settings_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_scaling_settings_t *)jarg2; 
  result = (ctl_result_t)ctlSetCurrentScaling(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_entry_t_Lux_set(void * jarg1, unsigned int jarg2) {
  _ctl_lace_lux_aggr_map_entry_t *arg1 = (_ctl_lace_lux_aggr_map_entry_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_lace_lux_aggr_map_entry_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Lux = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_entry_t_Lux_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_lace_lux_aggr_map_entry_t *arg1 = (_ctl_lace_lux_aggr_map_entry_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_lace_lux_aggr_map_entry_t *)jarg1; 
  result = (uint32_t) ((arg1)->Lux);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_entry_t_AggressivenessPercent_set(void * jarg1, unsigned char jarg2) {
  _ctl_lace_lux_aggr_map_entry_t *arg1 = (_ctl_lace_lux_aggr_map_entry_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_lace_lux_aggr_map_entry_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AggressivenessPercent = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_entry_t_AggressivenessPercent_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_lace_lux_aggr_map_entry_t *arg1 = (_ctl_lace_lux_aggr_map_entry_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_lace_lux_aggr_map_entry_t *)jarg1; 
  result = (uint8_t) ((arg1)->AggressivenessPercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_lace_lux_aggr_map_entry_t() {
  void * jresult ;
  _ctl_lace_lux_aggr_map_entry_t *result = 0 ;
  
  result = (_ctl_lace_lux_aggr_map_entry_t *)new _ctl_lace_lux_aggr_map_entry_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_lace_lux_aggr_map_entry_t(void * jarg1) {
  _ctl_lace_lux_aggr_map_entry_t *arg1 = (_ctl_lace_lux_aggr_map_entry_t *) 0 ;
  
  arg1 = (_ctl_lace_lux_aggr_map_entry_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_t_MaxNumEntries_set(void * jarg1, unsigned int jarg2) {
  _ctl_lace_lux_aggr_map_t *arg1 = (_ctl_lace_lux_aggr_map_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_lace_lux_aggr_map_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MaxNumEntries = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_t_MaxNumEntries_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_lace_lux_aggr_map_t *arg1 = (_ctl_lace_lux_aggr_map_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_lace_lux_aggr_map_t *)jarg1; 
  result = (uint32_t) ((arg1)->MaxNumEntries);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_t_NumEntries_set(void * jarg1, unsigned int jarg2) {
  _ctl_lace_lux_aggr_map_t *arg1 = (_ctl_lace_lux_aggr_map_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_lace_lux_aggr_map_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumEntries = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_t_NumEntries_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_lace_lux_aggr_map_t *arg1 = (_ctl_lace_lux_aggr_map_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_lace_lux_aggr_map_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumEntries);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_t_pLuxToAggrMappingTable_set(void * jarg1, void * jarg2) {
  _ctl_lace_lux_aggr_map_t *arg1 = (_ctl_lace_lux_aggr_map_t *) 0 ;
  ctl_lace_lux_aggr_map_entry_t *arg2 = (ctl_lace_lux_aggr_map_entry_t *) 0 ;
  
  arg1 = (_ctl_lace_lux_aggr_map_t *)jarg1; 
  arg2 = (ctl_lace_lux_aggr_map_entry_t *)jarg2; 
  if (arg1) (arg1)->pLuxToAggrMappingTable = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_lux_aggr_map_t_pLuxToAggrMappingTable_get(void * jarg1) {
  void * jresult ;
  _ctl_lace_lux_aggr_map_t *arg1 = (_ctl_lace_lux_aggr_map_t *) 0 ;
  ctl_lace_lux_aggr_map_entry_t *result = 0 ;
  
  arg1 = (_ctl_lace_lux_aggr_map_t *)jarg1; 
  result = (ctl_lace_lux_aggr_map_entry_t *) ((arg1)->pLuxToAggrMappingTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_lace_lux_aggr_map_t() {
  void * jresult ;
  _ctl_lace_lux_aggr_map_t *result = 0 ;
  
  result = (_ctl_lace_lux_aggr_map_t *)new _ctl_lace_lux_aggr_map_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_lace_lux_aggr_map_t(void * jarg1) {
  _ctl_lace_lux_aggr_map_t *arg1 = (_ctl_lace_lux_aggr_map_t *) 0 ;
  
  arg1 = (_ctl_lace_lux_aggr_map_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_aggr_config_t_FixedAggressivenessLevelPercent_set(void * jarg1, unsigned char jarg2) {
  _ctl_lace_aggr_config_t *arg1 = (_ctl_lace_aggr_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_lace_aggr_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->FixedAggressivenessLevelPercent = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_aggr_config_t_FixedAggressivenessLevelPercent_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_lace_aggr_config_t *arg1 = (_ctl_lace_aggr_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_lace_aggr_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->FixedAggressivenessLevelPercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_aggr_config_t_AggrLevelMap_set(void * jarg1, void * jarg2) {
  _ctl_lace_aggr_config_t *arg1 = (_ctl_lace_aggr_config_t *) 0 ;
  ctl_lace_lux_aggr_map_t *arg2 = (ctl_lace_lux_aggr_map_t *) 0 ;
  
  arg1 = (_ctl_lace_aggr_config_t *)jarg1; 
  arg2 = (ctl_lace_lux_aggr_map_t *)jarg2; 
  if (arg1) (arg1)->AggrLevelMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_aggr_config_t_AggrLevelMap_get(void * jarg1) {
  void * jresult ;
  _ctl_lace_aggr_config_t *arg1 = (_ctl_lace_aggr_config_t *) 0 ;
  ctl_lace_lux_aggr_map_t *result = 0 ;
  
  arg1 = (_ctl_lace_aggr_config_t *)jarg1; 
  result = (ctl_lace_lux_aggr_map_t *)& ((arg1)->AggrLevelMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_lace_aggr_config_t() {
  void * jresult ;
  _ctl_lace_aggr_config_t *result = 0 ;
  
  result = (_ctl_lace_aggr_config_t *)new _ctl_lace_aggr_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_lace_aggr_config_t(void * jarg1) {
  _ctl_lace_aggr_config_t *arg1 = (_ctl_lace_aggr_config_t *) 0 ;
  
  arg1 = (_ctl_lace_aggr_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_Enabled_set(void * jarg1, unsigned int jarg2) {
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_Enabled_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  result = (bool) ((arg1)->Enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_OpTypeGet_set(void * jarg1, unsigned int jarg2) {
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  ctl_get_operation_flags_t arg2 ;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  arg2 = (ctl_get_operation_flags_t)jarg2; 
  if (arg1) (arg1)->OpTypeGet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_OpTypeGet_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  ctl_get_operation_flags_t result;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  result = (ctl_get_operation_flags_t) ((arg1)->OpTypeGet);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_OpTypeSet_set(void * jarg1, int jarg2) {
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  ctl_set_operation_t arg2 ;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  arg2 = (ctl_set_operation_t)jarg2; 
  if (arg1) (arg1)->OpTypeSet = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_OpTypeSet_get(void * jarg1) {
  int jresult ;
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  ctl_set_operation_t result;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  result = (ctl_set_operation_t) ((arg1)->OpTypeSet);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_Trigger_set(void * jarg1, unsigned int jarg2) {
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  ctl_lace_trigger_flags_t arg2 ;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  arg2 = (ctl_lace_trigger_flags_t)jarg2; 
  if (arg1) (arg1)->Trigger = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_Trigger_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  ctl_lace_trigger_flags_t result;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  result = (ctl_lace_trigger_flags_t) ((arg1)->Trigger);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_LaceConfig_set(void * jarg1, void * jarg2) {
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  ctl_lace_aggr_config_t *arg2 = (ctl_lace_aggr_config_t *) 0 ;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  arg2 = (ctl_lace_aggr_config_t *)jarg2; 
  if (arg1) (arg1)->LaceConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_lace_config_t_LaceConfig_get(void * jarg1) {
  void * jresult ;
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  ctl_lace_aggr_config_t *result = 0 ;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  result = (ctl_lace_aggr_config_t *)& ((arg1)->LaceConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_lace_config_t() {
  void * jresult ;
  _ctl_lace_config_t *result = 0 ;
  
  result = (_ctl_lace_config_t *)new _ctl_lace_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_lace_config_t(void * jarg1) {
  _ctl_lace_config_t *arg1 = (_ctl_lace_config_t *) 0 ;
  
  arg1 = (_ctl_lace_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetLACEConfig(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_lace_config_t *arg2 = (ctl_lace_config_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_lace_config_t *)jarg2; 
  result = (ctl_result_t)ctlGetLACEConfig(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlSetLACEConfig(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_lace_config_t *arg2 = (ctl_lace_config_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_lace_config_t *)jarg2; 
  result = (ctl_result_t)ctlSetLACEConfig(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Set_set(void * jarg1, unsigned int jarg2) {
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Set = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Set_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  result = (bool) ((arg1)->Set);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Supported_set(void * jarg1, unsigned int jarg2) {
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Supported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Supported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  result = (bool) ((arg1)->Supported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_sw_psr_settings_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_sw_psr_settings_t() {
  void * jresult ;
  _ctl_sw_psr_settings_t *result = 0 ;
  
  result = (_ctl_sw_psr_settings_t *)new _ctl_sw_psr_settings_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_sw_psr_settings_t(void * jarg1) {
  _ctl_sw_psr_settings_t *arg1 = (_ctl_sw_psr_settings_t *) 0 ;
  
  arg1 = (_ctl_sw_psr_settings_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlSoftwarePSR(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_sw_psr_settings_t *arg2 = (ctl_sw_psr_settings_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_sw_psr_settings_t *)jarg2; 
  result = (ctl_result_t)ctlSoftwarePSR(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_IsIntelArcSyncSupported_set(void * jarg1, unsigned int jarg2) {
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsIntelArcSyncSupported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_IsIntelArcSyncSupported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  result = (bool) ((arg1)->IsIntelArcSyncSupported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_MinimumRefreshRateInHz_set(void * jarg1, float jarg2) {
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MinimumRefreshRateInHz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_MinimumRefreshRateInHz_get(void * jarg1) {
  float jresult ;
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  float result;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  result = (float) ((arg1)->MinimumRefreshRateInHz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_MaximumRefreshRateInHz_set(void * jarg1, float jarg2) {
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MaximumRefreshRateInHz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_MaximumRefreshRateInHz_get(void * jarg1) {
  float jresult ;
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  float result;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  result = (float) ((arg1)->MaximumRefreshRateInHz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_MaxFrameTimeIncreaseInUs_set(void * jarg1, unsigned int jarg2) {
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MaxFrameTimeIncreaseInUs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_MaxFrameTimeIncreaseInUs_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  result = (uint32_t) ((arg1)->MaxFrameTimeIncreaseInUs);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_MaxFrameTimeDecreaseInUs_set(void * jarg1, unsigned int jarg2) {
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MaxFrameTimeDecreaseInUs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_monitor_params_t_MaxFrameTimeDecreaseInUs_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  result = (uint32_t) ((arg1)->MaxFrameTimeDecreaseInUs);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_intel_arc_sync_monitor_params_t() {
  void * jresult ;
  _ctl_intel_arc_sync_monitor_params_t *result = 0 ;
  
  result = (_ctl_intel_arc_sync_monitor_params_t *)new _ctl_intel_arc_sync_monitor_params_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_intel_arc_sync_monitor_params_t(void * jarg1) {
  _ctl_intel_arc_sync_monitor_params_t *arg1 = (_ctl_intel_arc_sync_monitor_params_t *) 0 ;
  
  arg1 = (_ctl_intel_arc_sync_monitor_params_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetIntelArcSyncInfoForMonitor(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_intel_arc_sync_monitor_params_t *arg2 = (ctl_intel_arc_sync_monitor_params_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_intel_arc_sync_monitor_params_t *)jarg2; 
  result = (ctl_result_t)ctlGetIntelArcSyncInfoForMonitor(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumerateMuxDevices(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_api_handle_t arg1 = (ctl_api_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_mux_output_handle_t *arg3 = (ctl_mux_output_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_api_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_mux_output_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumerateMuxDevices(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_MuxId_set(void * jarg1, unsigned char jarg2) {
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MuxId = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_MuxId_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->MuxId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_Count_set(void * jarg1, unsigned int jarg2) {
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Count = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_Count_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Count);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_phDisplayOutputs_set(void * jarg1, void * jarg2) {
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  ctl_display_output_handle_t *arg2 = (ctl_display_output_handle_t *) 0 ;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  arg2 = (ctl_display_output_handle_t *)jarg2; 
  if (arg1) (arg1)->phDisplayOutputs = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_phDisplayOutputs_get(void * jarg1) {
  void * jresult ;
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  ctl_display_output_handle_t *result = 0 ;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  result = (ctl_display_output_handle_t *) ((arg1)->phDisplayOutputs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_IndexOfDisplayOutputOwningMux_set(void * jarg1, unsigned char jarg2) {
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->IndexOfDisplayOutputOwningMux = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_mux_properties_t_IndexOfDisplayOutputOwningMux_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->IndexOfDisplayOutputOwningMux);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_mux_properties_t() {
  void * jresult ;
  _ctl_mux_properties_t *result = 0 ;
  
  result = (_ctl_mux_properties_t *)new _ctl_mux_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_mux_properties_t(void * jarg1) {
  _ctl_mux_properties_t *arg1 = (_ctl_mux_properties_t *) 0 ;
  
  arg1 = (_ctl_mux_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetMuxProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_mux_output_handle_t arg1 = (ctl_mux_output_handle_t) 0 ;
  ctl_mux_properties_t *arg2 = (ctl_mux_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_mux_output_handle_t)jarg1; 
  arg2 = (ctl_mux_properties_t *)jarg2; 
  result = (ctl_result_t)ctlGetMuxProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlSwitchMux(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_mux_output_handle_t arg1 = (ctl_mux_output_handle_t) 0 ;
  ctl_display_output_handle_t arg2 = (ctl_display_output_handle_t) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_mux_output_handle_t)jarg1; 
  arg2 = (ctl_display_output_handle_t)jarg2; 
  result = (ctl_result_t)ctlSwitchMux(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_IntelArcSyncProfile_set(void * jarg1, int jarg2) {
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  ctl_intel_arc_sync_profile_t arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  arg2 = (ctl_intel_arc_sync_profile_t)jarg2; 
  if (arg1) (arg1)->IntelArcSyncProfile = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_IntelArcSyncProfile_get(void * jarg1) {
  int jresult ;
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  ctl_intel_arc_sync_profile_t result;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  result = (ctl_intel_arc_sync_profile_t) ((arg1)->IntelArcSyncProfile);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_MaxRefreshRateInHz_set(void * jarg1, float jarg2) {
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MaxRefreshRateInHz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_MaxRefreshRateInHz_get(void * jarg1) {
  float jresult ;
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  float result;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  result = (float) ((arg1)->MaxRefreshRateInHz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_MinRefreshRateInHz_set(void * jarg1, float jarg2) {
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MinRefreshRateInHz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_MinRefreshRateInHz_get(void * jarg1) {
  float jresult ;
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  float result;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  result = (float) ((arg1)->MinRefreshRateInHz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_MaxFrameTimeIncreaseInUs_set(void * jarg1, unsigned int jarg2) {
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MaxFrameTimeIncreaseInUs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_MaxFrameTimeIncreaseInUs_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  result = (uint32_t) ((arg1)->MaxFrameTimeIncreaseInUs);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_MaxFrameTimeDecreaseInUs_set(void * jarg1, unsigned int jarg2) {
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MaxFrameTimeDecreaseInUs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_intel_arc_sync_profile_params_t_MaxFrameTimeDecreaseInUs_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  result = (uint32_t) ((arg1)->MaxFrameTimeDecreaseInUs);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_intel_arc_sync_profile_params_t() {
  void * jresult ;
  _ctl_intel_arc_sync_profile_params_t *result = 0 ;
  
  result = (_ctl_intel_arc_sync_profile_params_t *)new _ctl_intel_arc_sync_profile_params_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_intel_arc_sync_profile_params_t(void * jarg1) {
  _ctl_intel_arc_sync_profile_params_t *arg1 = (_ctl_intel_arc_sync_profile_params_t *) 0 ;
  
  arg1 = (_ctl_intel_arc_sync_profile_params_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetIntelArcSyncProfile(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_intel_arc_sync_profile_params_t *arg2 = (ctl_intel_arc_sync_profile_params_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_intel_arc_sync_profile_params_t *)jarg2; 
  result = (ctl_result_t)ctlGetIntelArcSyncProfile(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlSetIntelArcSyncProfile(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_intel_arc_sync_profile_params_t *arg2 = (ctl_intel_arc_sync_profile_params_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_intel_arc_sync_profile_params_t *)jarg2; 
  result = (ctl_result_t)ctlSetIntelArcSyncProfile(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_OpType_set(void * jarg1, int jarg2) {
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  ctl_edid_management_optype_t arg2 ;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  arg2 = (ctl_edid_management_optype_t)jarg2; 
  if (arg1) (arg1)->OpType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_OpType_get(void * jarg1) {
  int jresult ;
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  ctl_edid_management_optype_t result;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  result = (ctl_edid_management_optype_t) ((arg1)->OpType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_EdidType_set(void * jarg1, int jarg2) {
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  ctl_edid_type_t arg2 ;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  arg2 = (ctl_edid_type_t)jarg2; 
  if (arg1) (arg1)->EdidType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_EdidType_get(void * jarg1) {
  int jresult ;
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  ctl_edid_type_t result;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  result = (ctl_edid_type_t) ((arg1)->EdidType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_EdidSize_set(void * jarg1, unsigned int jarg2) {
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->EdidSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_EdidSize_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->EdidSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_pEdidBuf_set(void * jarg1, void * jarg2) {
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->pEdidBuf = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_pEdidBuf_get(void * jarg1) {
  void * jresult ;
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  result = (uint8_t *) ((arg1)->pEdidBuf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_OutFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  ctl_edid_management_out_flags_t arg2 ;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  arg2 = (ctl_edid_management_out_flags_t)jarg2; 
  if (arg1) (arg1)->OutFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_edid_management_args_t_OutFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  ctl_edid_management_out_flags_t result;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  result = (ctl_edid_management_out_flags_t) ((arg1)->OutFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_edid_management_args_t() {
  void * jresult ;
  _ctl_edid_management_args_t *result = 0 ;
  
  result = (_ctl_edid_management_args_t *)new _ctl_edid_management_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_edid_management_args_t(void * jarg1) {
  _ctl_edid_management_args_t *arg1 = (_ctl_edid_management_args_t *) 0 ;
  
  arg1 = (_ctl_edid_management_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEdidManagement(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_edid_management_args_t *arg2 = (ctl_edid_management_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_edid_management_args_t *)jarg2; 
  result = (ctl_result_t)ctlEdidManagement(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_CustomModeOpType_set(void * jarg1, int jarg2) {
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  ctl_custom_mode_operation_types_t arg2 ;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  arg2 = (ctl_custom_mode_operation_types_t)jarg2; 
  if (arg1) (arg1)->CustomModeOpType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_CustomModeOpType_get(void * jarg1) {
  int jresult ;
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  ctl_custom_mode_operation_types_t result;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  result = (ctl_custom_mode_operation_types_t) ((arg1)->CustomModeOpType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_NumOfModes_set(void * jarg1, unsigned int jarg2) {
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumOfModes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_NumOfModes_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumOfModes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_pCustomSrcModeList_set(void * jarg1, void * jarg2) {
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  ctl_custom_src_mode_t *arg2 = (ctl_custom_src_mode_t *) 0 ;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  arg2 = (ctl_custom_src_mode_t *)jarg2; 
  if (arg1) (arg1)->pCustomSrcModeList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_custom_mode_args_t_pCustomSrcModeList_get(void * jarg1) {
  void * jresult ;
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  ctl_custom_src_mode_t *result = 0 ;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  result = (ctl_custom_src_mode_t *) ((arg1)->pCustomSrcModeList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_get_set_custom_mode_args_t() {
  void * jresult ;
  _ctl_get_set_custom_mode_args_t *result = 0 ;
  
  result = (_ctl_get_set_custom_mode_args_t *)new _ctl_get_set_custom_mode_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_get_set_custom_mode_args_t(void * jarg1) {
  _ctl_get_set_custom_mode_args_t *arg1 = (_ctl_get_set_custom_mode_args_t *) 0 ;
  
  arg1 = (_ctl_get_set_custom_mode_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_custom_src_mode_t_SourceX_set(void * jarg1, unsigned int jarg2) {
  _ctl_custom_src_mode_t *arg1 = (_ctl_custom_src_mode_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_custom_src_mode_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->SourceX = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_custom_src_mode_t_SourceX_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_custom_src_mode_t *arg1 = (_ctl_custom_src_mode_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_custom_src_mode_t *)jarg1; 
  result = (uint32_t) ((arg1)->SourceX);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_custom_src_mode_t_SourceY_set(void * jarg1, unsigned int jarg2) {
  _ctl_custom_src_mode_t *arg1 = (_ctl_custom_src_mode_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_custom_src_mode_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->SourceY = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_custom_src_mode_t_SourceY_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_custom_src_mode_t *arg1 = (_ctl_custom_src_mode_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_custom_src_mode_t *)jarg1; 
  result = (uint32_t) ((arg1)->SourceY);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_custom_src_mode_t() {
  void * jresult ;
  _ctl_custom_src_mode_t *result = 0 ;
  
  result = (_ctl_custom_src_mode_t *)new _ctl_custom_src_mode_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_custom_src_mode_t(void * jarg1) {
  _ctl_custom_src_mode_t *arg1 = (_ctl_custom_src_mode_t *) 0 ;
  
  arg1 = (_ctl_custom_src_mode_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSetCustomMode(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_get_set_custom_mode_args_t *arg2 = (ctl_get_set_custom_mode_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_get_set_custom_mode_args_t *)jarg2; 
  result = (ctl_result_t)ctlGetSetCustomMode(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_child_display_target_mode_t_Width_set(void * jarg1, unsigned int jarg2) {
  _ctl_child_display_target_mode_t *arg1 = (_ctl_child_display_target_mode_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_child_display_target_mode_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_child_display_target_mode_t_Width_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_child_display_target_mode_t *arg1 = (_ctl_child_display_target_mode_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_child_display_target_mode_t *)jarg1; 
  result = (uint32_t) ((arg1)->Width);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_child_display_target_mode_t_Height_set(void * jarg1, unsigned int jarg2) {
  _ctl_child_display_target_mode_t *arg1 = (_ctl_child_display_target_mode_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_child_display_target_mode_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_child_display_target_mode_t_Height_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_child_display_target_mode_t *arg1 = (_ctl_child_display_target_mode_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_child_display_target_mode_t *)jarg1; 
  result = (uint32_t) ((arg1)->Height);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_child_display_target_mode_t_RefreshRate_set(void * jarg1, float jarg2) {
  _ctl_child_display_target_mode_t *arg1 = (_ctl_child_display_target_mode_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_child_display_target_mode_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RefreshRate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_child_display_target_mode_t_RefreshRate_get(void * jarg1) {
  float jresult ;
  _ctl_child_display_target_mode_t *arg1 = (_ctl_child_display_target_mode_t *) 0 ;
  float result;
  
  arg1 = (_ctl_child_display_target_mode_t *)jarg1; 
  result = (float) ((arg1)->RefreshRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_child_display_target_mode_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_child_display_target_mode_t *arg1 = (_ctl_child_display_target_mode_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_child_display_target_mode_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_child_display_target_mode_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_child_display_target_mode_t *arg1 = (_ctl_child_display_target_mode_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_child_display_target_mode_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_child_display_target_mode_t() {
  void * jresult ;
  _ctl_child_display_target_mode_t *result = 0 ;
  
  result = (_ctl_child_display_target_mode_t *)new _ctl_child_display_target_mode_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_child_display_target_mode_t(void * jarg1) {
  _ctl_child_display_target_mode_t *arg1 = (_ctl_child_display_target_mode_t *) 0 ;
  
  arg1 = (_ctl_child_display_target_mode_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_hDisplayOutput_set(void * jarg1, void * jarg2) {
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_display_output_handle_t arg2 = (ctl_display_output_handle_t) 0 ;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  arg2 = (ctl_display_output_handle_t)jarg2; 
  if (arg1) (arg1)->hDisplayOutput = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_hDisplayOutput_get(void * jarg1) {
  void * jresult ;
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_display_output_handle_t result;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  result = (ctl_display_output_handle_t) ((arg1)->hDisplayOutput);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_FbSrc_set(void * jarg1, void * jarg2) {
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_rect_t *arg2 = (ctl_rect_t *) 0 ;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  arg2 = (ctl_rect_t *)jarg2; 
  if (arg1) (arg1)->FbSrc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_FbSrc_get(void * jarg1) {
  void * jresult ;
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_rect_t *result = 0 ;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  result = (ctl_rect_t *)& ((arg1)->FbSrc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_FbPos_set(void * jarg1, void * jarg2) {
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_rect_t *arg2 = (ctl_rect_t *) 0 ;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  arg2 = (ctl_rect_t *)jarg2; 
  if (arg1) (arg1)->FbPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_FbPos_get(void * jarg1) {
  void * jresult ;
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_rect_t *result = 0 ;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  result = (ctl_rect_t *)& ((arg1)->FbPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_DisplayOrientation_set(void * jarg1, int jarg2) {
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_display_orientation_t arg2 ;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  arg2 = (ctl_display_orientation_t)jarg2; 
  if (arg1) (arg1)->DisplayOrientation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_DisplayOrientation_get(void * jarg1) {
  int jresult ;
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_display_orientation_t result;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  result = (ctl_display_orientation_t) ((arg1)->DisplayOrientation);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_TargetMode_set(void * jarg1, void * jarg2) {
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_child_display_target_mode_t *arg2 = (ctl_child_display_target_mode_t *) 0 ;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  arg2 = (ctl_child_display_target_mode_t *)jarg2; 
  if (arg1) (arg1)->TargetMode = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_child_info_t_TargetMode_get(void * jarg1) {
  void * jresult ;
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  ctl_child_display_target_mode_t *result = 0 ;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  result = (ctl_child_display_target_mode_t *)& ((arg1)->TargetMode);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_combined_display_child_info_t() {
  void * jresult ;
  _ctl_combined_display_child_info_t *result = 0 ;
  
  result = (_ctl_combined_display_child_info_t *)new _ctl_combined_display_child_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_combined_display_child_info_t(void * jarg1) {
  _ctl_combined_display_child_info_t *arg1 = (_ctl_combined_display_child_info_t *) 0 ;
  
  arg1 = (_ctl_combined_display_child_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_OpType_set(void * jarg1, int jarg2) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  ctl_combined_display_optype_t arg2 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  arg2 = (ctl_combined_display_optype_t)jarg2; 
  if (arg1) (arg1)->OpType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_OpType_get(void * jarg1) {
  int jresult ;
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  ctl_combined_display_optype_t result;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  result = (ctl_combined_display_optype_t) ((arg1)->OpType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_IsSupported_set(void * jarg1, unsigned int jarg2) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsSupported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_IsSupported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  result = (bool) ((arg1)->IsSupported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_NumOutputs_set(void * jarg1, unsigned char jarg2) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->NumOutputs = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_NumOutputs_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->NumOutputs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_CombinedDesktopWidth_set(void * jarg1, unsigned int jarg2) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->CombinedDesktopWidth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_CombinedDesktopWidth_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->CombinedDesktopWidth);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_CombinedDesktopHeight_set(void * jarg1, unsigned int jarg2) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->CombinedDesktopHeight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_CombinedDesktopHeight_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->CombinedDesktopHeight);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_pChildInfo_set(void * jarg1, void * jarg2) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  ctl_combined_display_child_info_t *arg2 = (ctl_combined_display_child_info_t *) 0 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  arg2 = (ctl_combined_display_child_info_t *)jarg2; 
  if (arg1) (arg1)->pChildInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_pChildInfo_get(void * jarg1) {
  void * jresult ;
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  ctl_combined_display_child_info_t *result = 0 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  result = (ctl_combined_display_child_info_t *) ((arg1)->pChildInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_hCombinedDisplayOutput_set(void * jarg1, void * jarg2) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  ctl_display_output_handle_t arg2 = (ctl_display_output_handle_t) 0 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  arg2 = (ctl_display_output_handle_t)jarg2; 
  if (arg1) (arg1)->hCombinedDisplayOutput = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_combined_display_args_t_hCombinedDisplayOutput_get(void * jarg1) {
  void * jresult ;
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  ctl_display_output_handle_t result;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  result = (ctl_display_output_handle_t) ((arg1)->hCombinedDisplayOutput);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_combined_display_args_t() {
  void * jresult ;
  _ctl_combined_display_args_t *result = 0 ;
  
  result = (_ctl_combined_display_args_t *)new _ctl_combined_display_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_combined_display_args_t(void * jarg1) {
  _ctl_combined_display_args_t *arg1 = (_ctl_combined_display_args_t *) 0 ;
  
  arg1 = (_ctl_combined_display_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSetCombinedDisplay(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_combined_display_args_t *arg2 = (ctl_combined_display_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_combined_display_args_t *)jarg2; 
  result = (ctl_result_t)ctlGetSetCombinedDisplay(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_display_info_t_hDisplayOutput_set(void * jarg1, void * jarg2) {
  _ctl_genlock_display_info_t *arg1 = (_ctl_genlock_display_info_t *) 0 ;
  ctl_display_output_handle_t arg2 = (ctl_display_output_handle_t) 0 ;
  
  arg1 = (_ctl_genlock_display_info_t *)jarg1; 
  arg2 = (ctl_display_output_handle_t)jarg2; 
  if (arg1) (arg1)->hDisplayOutput = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_display_info_t_hDisplayOutput_get(void * jarg1) {
  void * jresult ;
  _ctl_genlock_display_info_t *arg1 = (_ctl_genlock_display_info_t *) 0 ;
  ctl_display_output_handle_t result;
  
  arg1 = (_ctl_genlock_display_info_t *)jarg1; 
  result = (ctl_display_output_handle_t) ((arg1)->hDisplayOutput);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_display_info_t_IsPrimary_set(void * jarg1, unsigned int jarg2) {
  _ctl_genlock_display_info_t *arg1 = (_ctl_genlock_display_info_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_genlock_display_info_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsPrimary = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_display_info_t_IsPrimary_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_genlock_display_info_t *arg1 = (_ctl_genlock_display_info_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_genlock_display_info_t *)jarg1; 
  result = (bool) ((arg1)->IsPrimary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_genlock_display_info_t() {
  void * jresult ;
  _ctl_genlock_display_info_t *result = 0 ;
  
  result = (_ctl_genlock_display_info_t *)new _ctl_genlock_display_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_genlock_display_info_t(void * jarg1) {
  _ctl_genlock_display_info_t *arg1 = (_ctl_genlock_display_info_t *) 0 ;
  
  arg1 = (_ctl_genlock_display_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_target_mode_list_t_hDisplayOutput_set(void * jarg1, void * jarg2) {
  _ctl_genlock_target_mode_list_t *arg1 = (_ctl_genlock_target_mode_list_t *) 0 ;
  ctl_display_output_handle_t arg2 = (ctl_display_output_handle_t) 0 ;
  
  arg1 = (_ctl_genlock_target_mode_list_t *)jarg1; 
  arg2 = (ctl_display_output_handle_t)jarg2; 
  if (arg1) (arg1)->hDisplayOutput = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_target_mode_list_t_hDisplayOutput_get(void * jarg1) {
  void * jresult ;
  _ctl_genlock_target_mode_list_t *arg1 = (_ctl_genlock_target_mode_list_t *) 0 ;
  ctl_display_output_handle_t result;
  
  arg1 = (_ctl_genlock_target_mode_list_t *)jarg1; 
  result = (ctl_display_output_handle_t) ((arg1)->hDisplayOutput);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_target_mode_list_t_NumModes_set(void * jarg1, unsigned int jarg2) {
  _ctl_genlock_target_mode_list_t *arg1 = (_ctl_genlock_target_mode_list_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_genlock_target_mode_list_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumModes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_target_mode_list_t_NumModes_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_genlock_target_mode_list_t *arg1 = (_ctl_genlock_target_mode_list_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_genlock_target_mode_list_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumModes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_target_mode_list_t_pTargetModes_set(void * jarg1, void * jarg2) {
  _ctl_genlock_target_mode_list_t *arg1 = (_ctl_genlock_target_mode_list_t *) 0 ;
  ctl_display_timing_t *arg2 = (ctl_display_timing_t *) 0 ;
  
  arg1 = (_ctl_genlock_target_mode_list_t *)jarg1; 
  arg2 = (ctl_display_timing_t *)jarg2; 
  if (arg1) (arg1)->pTargetModes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_target_mode_list_t_pTargetModes_get(void * jarg1) {
  void * jresult ;
  _ctl_genlock_target_mode_list_t *arg1 = (_ctl_genlock_target_mode_list_t *) 0 ;
  ctl_display_timing_t *result = 0 ;
  
  arg1 = (_ctl_genlock_target_mode_list_t *)jarg1; 
  result = (ctl_display_timing_t *) ((arg1)->pTargetModes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_genlock_target_mode_list_t() {
  void * jresult ;
  _ctl_genlock_target_mode_list_t *result = 0 ;
  
  result = (_ctl_genlock_target_mode_list_t *)new _ctl_genlock_target_mode_list_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_genlock_target_mode_list_t(void * jarg1) {
  _ctl_genlock_target_mode_list_t *arg1 = (_ctl_genlock_target_mode_list_t *) 0 ;
  
  arg1 = (_ctl_genlock_target_mode_list_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_NumGenlockDisplays_set(void * jarg1, unsigned char jarg2) {
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->NumGenlockDisplays = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_NumGenlockDisplays_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  result = (uint8_t) ((arg1)->NumGenlockDisplays);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_IsPrimaryGenlockSystem_set(void * jarg1, unsigned int jarg2) {
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsPrimaryGenlockSystem = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_IsPrimaryGenlockSystem_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  result = (bool) ((arg1)->IsPrimaryGenlockSystem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_CommonTargetMode_set(void * jarg1, void * jarg2) {
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  ctl_display_timing_t *arg2 = (ctl_display_timing_t *) 0 ;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  arg2 = (ctl_display_timing_t *)jarg2; 
  if (arg1) (arg1)->CommonTargetMode = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_CommonTargetMode_get(void * jarg1) {
  void * jresult ;
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  ctl_display_timing_t *result = 0 ;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  result = (ctl_display_timing_t *)& ((arg1)->CommonTargetMode);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_pGenlockDisplayInfo_set(void * jarg1, void * jarg2) {
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  ctl_genlock_display_info_t *arg2 = (ctl_genlock_display_info_t *) 0 ;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  arg2 = (ctl_genlock_display_info_t *)jarg2; 
  if (arg1) (arg1)->pGenlockDisplayInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_pGenlockDisplayInfo_get(void * jarg1) {
  void * jresult ;
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  ctl_genlock_display_info_t *result = 0 ;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  result = (ctl_genlock_display_info_t *) ((arg1)->pGenlockDisplayInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_pGenlockModeList_set(void * jarg1, void * jarg2) {
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  ctl_genlock_target_mode_list_t *arg2 = (ctl_genlock_target_mode_list_t *) 0 ;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  arg2 = (ctl_genlock_target_mode_list_t *)jarg2; 
  if (arg1) (arg1)->pGenlockModeList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_topology_t_pGenlockModeList_get(void * jarg1) {
  void * jresult ;
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  ctl_genlock_target_mode_list_t *result = 0 ;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  result = (ctl_genlock_target_mode_list_t *) ((arg1)->pGenlockModeList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_genlock_topology_t() {
  void * jresult ;
  _ctl_genlock_topology_t *result = 0 ;
  
  result = (_ctl_genlock_topology_t *)new _ctl_genlock_topology_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_genlock_topology_t(void * jarg1) {
  _ctl_genlock_topology_t *arg1 = (_ctl_genlock_topology_t *) 0 ;
  
  arg1 = (_ctl_genlock_topology_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_Operation_set(void * jarg1, int jarg2) {
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  ctl_genlock_operation_t arg2 ;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  arg2 = (ctl_genlock_operation_t)jarg2; 
  if (arg1) (arg1)->Operation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_Operation_get(void * jarg1) {
  int jresult ;
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  ctl_genlock_operation_t result;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  result = (ctl_genlock_operation_t) ((arg1)->Operation);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_GenlockTopology_set(void * jarg1, void * jarg2) {
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  ctl_genlock_topology_t *arg2 = (ctl_genlock_topology_t *) 0 ;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  arg2 = (ctl_genlock_topology_t *)jarg2; 
  if (arg1) (arg1)->GenlockTopology = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_GenlockTopology_get(void * jarg1) {
  void * jresult ;
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  ctl_genlock_topology_t *result = 0 ;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  result = (ctl_genlock_topology_t *)& ((arg1)->GenlockTopology);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_IsGenlockEnabled_set(void * jarg1, unsigned int jarg2) {
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsGenlockEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_IsGenlockEnabled_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  result = (bool) ((arg1)->IsGenlockEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_IsGenlockPossible_set(void * jarg1, unsigned int jarg2) {
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsGenlockPossible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_genlock_args_t_IsGenlockPossible_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  result = (bool) ((arg1)->IsGenlockPossible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_genlock_args_t() {
  void * jresult ;
  _ctl_genlock_args_t *result = 0 ;
  
  result = (_ctl_genlock_args_t *)new _ctl_genlock_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_genlock_args_t(void * jarg1) {
  _ctl_genlock_args_t *arg1 = (_ctl_genlock_args_t *) 0 ;
  
  arg1 = (_ctl_genlock_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSetDisplayGenlock(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  int jresult ;
  ctl_device_adapter_handle_t *arg1 = (ctl_device_adapter_handle_t *) 0 ;
  ctl_genlock_args_t *arg2 = (ctl_genlock_args_t *) 0 ;
  uint32_t arg3 ;
  ctl_device_adapter_handle_t *arg4 = (ctl_device_adapter_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t *)jarg1; 
  arg2 = (ctl_genlock_args_t *)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (ctl_device_adapter_handle_t *)jarg4; 
  result = (ctl_result_t)ctlGetSetDisplayGenlock(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_MAX_DISPLAYS_FOR_MGPU_COLLAGE_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_vblank_ts_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_vblank_ts_args_t *arg1 = (_ctl_vblank_ts_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_vblank_ts_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_vblank_ts_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_vblank_ts_args_t *arg1 = (_ctl_vblank_ts_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_vblank_ts_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_vblank_ts_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_vblank_ts_args_t *arg1 = (_ctl_vblank_ts_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_vblank_ts_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_vblank_ts_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_vblank_ts_args_t *arg1 = (_ctl_vblank_ts_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_vblank_ts_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_vblank_ts_args_t_NumOfTargets_set(void * jarg1, unsigned char jarg2) {
  _ctl_vblank_ts_args_t *arg1 = (_ctl_vblank_ts_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_vblank_ts_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->NumOfTargets = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_vblank_ts_args_t_NumOfTargets_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_vblank_ts_args_t *arg1 = (_ctl_vblank_ts_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_vblank_ts_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->NumOfTargets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_vblank_ts_args_t_VblankTS_set(void * jarg1, void * jarg2) {
  _ctl_vblank_ts_args_t *arg1 = (_ctl_vblank_ts_args_t *) 0 ;
  uint64_t *arg2 = (uint64_t *) (uint64_t *)0 ;
  
  arg1 = (_ctl_vblank_ts_args_t *)jarg1; 
  arg2 = (uint64_t *)jarg2; 
  {
    size_t ii;
    uint64_t *b = (uint64_t *) arg1->VblankTS;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint64_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_vblank_ts_args_t_VblankTS_get(void * jarg1) {
  void * jresult ;
  _ctl_vblank_ts_args_t *arg1 = (_ctl_vblank_ts_args_t *) 0 ;
  uint64_t *result = 0 ;
  
  arg1 = (_ctl_vblank_ts_args_t *)jarg1; 
  result = (uint64_t *)(uint64_t *) ((arg1)->VblankTS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_vblank_ts_args_t() {
  void * jresult ;
  _ctl_vblank_ts_args_t *result = 0 ;
  
  result = (_ctl_vblank_ts_args_t *)new _ctl_vblank_ts_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_vblank_ts_args_t(void * jarg1) {
  _ctl_vblank_ts_args_t *arg1 = (_ctl_vblank_ts_args_t *) 0 ;
  
  arg1 = (_ctl_vblank_ts_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetVblankTimestamp(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_vblank_ts_args_t *arg2 = (ctl_vblank_ts_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_vblank_ts_args_t *)jarg2; 
  result = (ctl_result_t)ctlGetVblankTimestamp(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_NumAdapters_set(void * jarg1, unsigned char jarg2) {
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->NumAdapters = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_NumAdapters_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->NumAdapters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_hLinkedAdapters_set(void * jarg1, void * jarg2) {
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  ctl_device_adapter_handle_t *arg2 = (ctl_device_adapter_handle_t *) 0 ;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  arg2 = (ctl_device_adapter_handle_t *)jarg2; 
  if (arg1) (arg1)->hLinkedAdapters = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_hLinkedAdapters_get(void * jarg1) {
  void * jresult ;
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  ctl_device_adapter_handle_t *result = 0 ;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  result = (ctl_device_adapter_handle_t *) ((arg1)->hLinkedAdapters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_Reserved_set(void * jarg1, void * jarg2) {
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  uint64_t *arg2 = (uint64_t *) (uint64_t *)0 ;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  arg2 = (uint64_t *)jarg2; 
  {
    size_t ii;
    uint64_t *b = (uint64_t *) arg1->Reserved;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint64_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_lda_args_t_Reserved_get(void * jarg1) {
  void * jresult ;
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  uint64_t *result = 0 ;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  result = (uint64_t *)(uint64_t *) ((arg1)->Reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_lda_args_t() {
  void * jresult ;
  _ctl_lda_args_t *result = 0 ;
  
  result = (_ctl_lda_args_t *)new _ctl_lda_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_lda_args_t(void * jarg1) {
  _ctl_lda_args_t *arg1 = (_ctl_lda_args_t *) 0 ;
  
  arg1 = (_ctl_lda_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlLinkDisplayAdapters(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_lda_args_t *arg2 = (ctl_lda_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_lda_args_t *)jarg2; 
  result = (ctl_result_t)ctlLinkDisplayAdapters(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlUnlinkDisplayAdapters(void * jarg1) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  result = (ctl_result_t)ctlUnlinkDisplayAdapters(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetLinkedDisplayAdapters(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_lda_args_t *arg2 = (ctl_lda_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_lda_args_t *)jarg2; 
  result = (ctl_result_t)ctlGetLinkedDisplayAdapters(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_Set_set(void * jarg1, unsigned int jarg2) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Set = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_Set_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  result = (bool) ((arg1)->Set);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_TargetBrightnessPercent_set(void * jarg1, unsigned int jarg2) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->TargetBrightnessPercent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_TargetBrightnessPercent_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->TargetBrightnessPercent);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_PhaseinSpeedMultiplier_set(void * jarg1, double jarg2) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->PhaseinSpeedMultiplier = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_PhaseinSpeedMultiplier_get(void * jarg1) {
  double jresult ;
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  double result;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  result = (double) ((arg1)->PhaseinSpeedMultiplier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_NumBins_set(void * jarg1, unsigned int jarg2) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumBins = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_NumBins_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumBins);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_Enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_Enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_IsSupported_set(void * jarg1, unsigned int jarg2) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsSupported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_IsSupported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  result = (bool) ((arg1)->IsSupported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_pHistogram_set(void * jarg1, void * jarg2) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  if (arg1) (arg1)->pHistogram = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_dce_args_t_pHistogram_get(void * jarg1) {
  void * jresult ;
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  result = (uint32_t *) ((arg1)->pHistogram);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_dce_args_t() {
  void * jresult ;
  _ctl_dce_args_t *result = 0 ;
  
  result = (_ctl_dce_args_t *)new _ctl_dce_args_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_dce_args_t(void * jarg1) {
  _ctl_dce_args_t *arg1 = (_ctl_dce_args_t *) 0 ;
  
  arg1 = (_ctl_dce_args_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSetDynamicContrastEnhancement(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_dce_args_t *arg2 = (ctl_dce_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_dce_args_t *)jarg2; 
  result = (ctl_result_t)ctlGetSetDynamicContrastEnhancement(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wire_format_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_wire_format_t *arg1 = (_ctl_wire_format_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_wire_format_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_wire_format_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_wire_format_t *arg1 = (_ctl_wire_format_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_wire_format_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wire_format_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_wire_format_t *arg1 = (_ctl_wire_format_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_wire_format_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_wire_format_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_wire_format_t *arg1 = (_ctl_wire_format_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_wire_format_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wire_format_t_ColorModel_set(void * jarg1, int jarg2) {
  _ctl_wire_format_t *arg1 = (_ctl_wire_format_t *) 0 ;
  ctl_wire_format_color_model_t arg2 ;
  
  arg1 = (_ctl_wire_format_t *)jarg1; 
  arg2 = (ctl_wire_format_color_model_t)jarg2; 
  if (arg1) (arg1)->ColorModel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_wire_format_t_ColorModel_get(void * jarg1) {
  int jresult ;
  _ctl_wire_format_t *arg1 = (_ctl_wire_format_t *) 0 ;
  ctl_wire_format_color_model_t result;
  
  arg1 = (_ctl_wire_format_t *)jarg1; 
  result = (ctl_wire_format_color_model_t) ((arg1)->ColorModel);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_wire_format_t_ColorDepth_set(void * jarg1, unsigned int jarg2) {
  _ctl_wire_format_t *arg1 = (_ctl_wire_format_t *) 0 ;
  ctl_output_bpc_flags_t arg2 ;
  
  arg1 = (_ctl_wire_format_t *)jarg1; 
  arg2 = (ctl_output_bpc_flags_t)jarg2; 
  if (arg1) (arg1)->ColorDepth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_wire_format_t_ColorDepth_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_wire_format_t *arg1 = (_ctl_wire_format_t *) 0 ;
  ctl_output_bpc_flags_t result;
  
  arg1 = (_ctl_wire_format_t *)jarg1; 
  result = (ctl_output_bpc_flags_t) ((arg1)->ColorDepth);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_wire_format_t() {
  void * jresult ;
  _ctl_wire_format_t *result = 0 ;
  
  result = (_ctl_wire_format_t *)new _ctl_wire_format_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_wire_format_t(void * jarg1) {
  _ctl_wire_format_t *arg1 = (_ctl_wire_format_t *) 0 ;
  
  arg1 = (_ctl_wire_format_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_MAX_WIREFORMAT_COLOR_MODELS_SUPPORTED_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_Operation_set(void * jarg1, int jarg2) {
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  ctl_wire_format_operation_type_t arg2 ;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  arg2 = (ctl_wire_format_operation_type_t)jarg2; 
  if (arg1) (arg1)->Operation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_Operation_get(void * jarg1) {
  int jresult ;
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  ctl_wire_format_operation_type_t result;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  result = (ctl_wire_format_operation_type_t) ((arg1)->Operation);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_SupportedWireFormat_set(void * jarg1, void * jarg2) {
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  ctl_wire_format_t *arg2 = (ctl_wire_format_t *) (ctl_wire_format_t *)0 ;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  arg2 = (ctl_wire_format_t *)jarg2; 
  {
    size_t ii;
    ctl_wire_format_t *b = (ctl_wire_format_t *) arg1->SupportedWireFormat;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((ctl_wire_format_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_SupportedWireFormat_get(void * jarg1) {
  void * jresult ;
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  ctl_wire_format_t *result = 0 ;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  result = (ctl_wire_format_t *)(ctl_wire_format_t *) ((arg1)->SupportedWireFormat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_WireFormat_set(void * jarg1, void * jarg2) {
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  ctl_wire_format_t *arg2 = (ctl_wire_format_t *) 0 ;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  arg2 = (ctl_wire_format_t *)jarg2; 
  if (arg1) (arg1)->WireFormat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_get_set_wire_format_config_t_WireFormat_get(void * jarg1) {
  void * jresult ;
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  ctl_wire_format_t *result = 0 ;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  result = (ctl_wire_format_t *)& ((arg1)->WireFormat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_get_set_wire_format_config_t() {
  void * jresult ;
  _ctl_get_set_wire_format_config_t *result = 0 ;
  
  result = (_ctl_get_set_wire_format_config_t *)new _ctl_get_set_wire_format_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_get_set_wire_format_config_t(void * jarg1) {
  _ctl_get_set_wire_format_config_t *arg1 = (_ctl_get_set_wire_format_config_t *) 0 ;
  
  arg1 = (_ctl_get_set_wire_format_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSetWireFormat(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_get_set_wire_format_config_t *arg2 = (ctl_get_set_wire_format_config_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_get_set_wire_format_config_t *)jarg2; 
  result = (ctl_result_t)ctlGetSetWireFormat(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_Set_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Set = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_Set_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (bool) ((arg1)->Set);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_SupportedFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_flags_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_SupportedFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_flags_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_flags_t) ((arg1)->SupportedFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_ControllableFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_flags_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_flags_t)jarg2; 
  if (arg1) (arg1)->ControllableFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_ControllableFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_flags_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_flags_t) ((arg1)->ControllableFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_ValidFlags_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_flags_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_flags_t)jarg2; 
  if (arg1) (arg1)->ValidFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_ValidFlags_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_flags_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_flags_t) ((arg1)->ValidFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_LowLatency_set(void * jarg1, int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_low_latency_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_low_latency_t)jarg2; 
  if (arg1) (arg1)->LowLatency = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_LowLatency_get(void * jarg1) {
  int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_low_latency_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_low_latency_t) ((arg1)->LowLatency);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_SourceTM_set(void * jarg1, int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_sourcetm_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_sourcetm_t)jarg2; 
  if (arg1) (arg1)->SourceTM = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_SourceTM_get(void * jarg1) {
  int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_sourcetm_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_sourcetm_t) ((arg1)->SourceTM);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_ContentType_set(void * jarg1, int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_content_type_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_content_type_t)jarg2; 
  if (arg1) (arg1)->ContentType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_ContentType_get(void * jarg1) {
  int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_content_type_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_content_type_t) ((arg1)->ContentType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_QuantizationRange_set(void * jarg1, int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_quantization_range_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_quantization_range_t)jarg2; 
  if (arg1) (arg1)->QuantizationRange = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_QuantizationRange_get(void * jarg1) {
  int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_quantization_range_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_quantization_range_t) ((arg1)->QuantizationRange);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_SupportedPictureAR_set(void * jarg1, unsigned int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_picture_ar_flags_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_picture_ar_flags_t)jarg2; 
  if (arg1) (arg1)->SupportedPictureAR = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_SupportedPictureAR_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_picture_ar_flags_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_picture_ar_flags_t) ((arg1)->SupportedPictureAR);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_PictureAR_set(void * jarg1, int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_picture_ar_flag_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_picture_ar_flag_t)jarg2; 
  if (arg1) (arg1)->PictureAR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_PictureAR_get(void * jarg1) {
  int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_picture_ar_flag_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_picture_ar_flag_t) ((arg1)->PictureAR);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_AudioSettings_set(void * jarg1, int jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_audio_t arg2 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (ctl_display_setting_audio_t)jarg2; 
  if (arg1) (arg1)->AudioSettings = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_AudioSettings_get(void * jarg1) {
  int jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  ctl_display_setting_audio_t result;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (ctl_display_setting_audio_t) ((arg1)->AudioSettings);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_Reserved_set(void * jarg1, void * jarg2) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->Reserved;
    for (ii = 0; ii < (size_t)25; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_display_settings_t_Reserved_get(void * jarg1) {
  void * jresult ;
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->Reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_display_settings_t() {
  void * jresult ;
  _ctl_display_settings_t *result = 0 ;
  
  result = (_ctl_display_settings_t *)new _ctl_display_settings_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_display_settings_t(void * jarg1) {
  _ctl_display_settings_t *arg1 = (_ctl_display_settings_t *) 0 ;
  
  arg1 = (_ctl_display_settings_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSetDisplaySettings(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_display_settings_t *arg2 = (ctl_display_settings_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_display_settings_t *)jarg2; 
  result = (ctl_result_t)ctlGetSetDisplaySettings(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_ecc_properties_t *arg1 = (_ctl_ecc_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_ecc_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_ecc_properties_t *arg1 = (_ctl_ecc_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_ecc_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_ecc_properties_t *arg1 = (_ctl_ecc_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_ecc_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_ecc_properties_t *arg1 = (_ctl_ecc_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_ecc_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_properties_t_isSupported_set(void * jarg1, unsigned int jarg2) {
  _ctl_ecc_properties_t *arg1 = (_ctl_ecc_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_ecc_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSupported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_properties_t_isSupported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_ecc_properties_t *arg1 = (_ctl_ecc_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_ecc_properties_t *)jarg1; 
  result = (bool) ((arg1)->isSupported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_properties_t_canControl_set(void * jarg1, unsigned int jarg2) {
  _ctl_ecc_properties_t *arg1 = (_ctl_ecc_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_ecc_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->canControl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_properties_t_canControl_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_ecc_properties_t *arg1 = (_ctl_ecc_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_ecc_properties_t *)jarg1; 
  result = (bool) ((arg1)->canControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_ecc_properties_t() {
  void * jresult ;
  _ctl_ecc_properties_t *result = 0 ;
  
  result = (_ctl_ecc_properties_t *)new _ctl_ecc_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_ecc_properties_t(void * jarg1) {
  _ctl_ecc_properties_t *arg1 = (_ctl_ecc_properties_t *) 0 ;
  
  arg1 = (_ctl_ecc_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_state_desc_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_ecc_state_desc_t *arg1 = (_ctl_ecc_state_desc_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_ecc_state_desc_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_state_desc_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_ecc_state_desc_t *arg1 = (_ctl_ecc_state_desc_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_ecc_state_desc_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_state_desc_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_ecc_state_desc_t *arg1 = (_ctl_ecc_state_desc_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_ecc_state_desc_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_state_desc_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_ecc_state_desc_t *arg1 = (_ctl_ecc_state_desc_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_ecc_state_desc_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_state_desc_t_currentEccState_set(void * jarg1, int jarg2) {
  _ctl_ecc_state_desc_t *arg1 = (_ctl_ecc_state_desc_t *) 0 ;
  ctl_ecc_state_t arg2 ;
  
  arg1 = (_ctl_ecc_state_desc_t *)jarg1; 
  arg2 = (ctl_ecc_state_t)jarg2; 
  if (arg1) (arg1)->currentEccState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_state_desc_t_currentEccState_get(void * jarg1) {
  int jresult ;
  _ctl_ecc_state_desc_t *arg1 = (_ctl_ecc_state_desc_t *) 0 ;
  ctl_ecc_state_t result;
  
  arg1 = (_ctl_ecc_state_desc_t *)jarg1; 
  result = (ctl_ecc_state_t) ((arg1)->currentEccState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_state_desc_t_pendingEccState_set(void * jarg1, int jarg2) {
  _ctl_ecc_state_desc_t *arg1 = (_ctl_ecc_state_desc_t *) 0 ;
  ctl_ecc_state_t arg2 ;
  
  arg1 = (_ctl_ecc_state_desc_t *)jarg1; 
  arg2 = (ctl_ecc_state_t)jarg2; 
  if (arg1) (arg1)->pendingEccState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_ecc_state_desc_t_pendingEccState_get(void * jarg1) {
  int jresult ;
  _ctl_ecc_state_desc_t *arg1 = (_ctl_ecc_state_desc_t *) 0 ;
  ctl_ecc_state_t result;
  
  arg1 = (_ctl_ecc_state_desc_t *)jarg1; 
  result = (ctl_ecc_state_t) ((arg1)->pendingEccState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_ecc_state_desc_t() {
  void * jresult ;
  _ctl_ecc_state_desc_t *result = 0 ;
  
  result = (_ctl_ecc_state_desc_t *)new _ctl_ecc_state_desc_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_ecc_state_desc_t(void * jarg1) {
  _ctl_ecc_state_desc_t *arg1 = (_ctl_ecc_state_desc_t *) 0 ;
  
  arg1 = (_ctl_ecc_state_desc_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEccGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_ecc_properties_t *arg2 = (ctl_ecc_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_ecc_properties_t *)jarg2; 
  result = (ctl_result_t)ctlEccGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEccGetState(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_ecc_state_desc_t *arg2 = (ctl_ecc_state_desc_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_ecc_state_desc_t *)jarg2; 
  result = (ctl_result_t)ctlEccGetState(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEccSetState(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_ecc_state_desc_t *arg2 = (ctl_ecc_state_desc_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_ecc_state_desc_t *)jarg2; 
  result = (ctl_result_t)ctlEccSetState(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_engine_properties_t *arg1 = (_ctl_engine_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_engine_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_engine_properties_t *arg1 = (_ctl_engine_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_engine_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_engine_properties_t *arg1 = (_ctl_engine_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_engine_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_engine_properties_t *arg1 = (_ctl_engine_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_engine_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_properties_t_type_set(void * jarg1, int jarg2) {
  _ctl_engine_properties_t *arg1 = (_ctl_engine_properties_t *) 0 ;
  ctl_engine_group_t arg2 ;
  
  arg1 = (_ctl_engine_properties_t *)jarg1; 
  arg2 = (ctl_engine_group_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_properties_t_type_get(void * jarg1) {
  int jresult ;
  _ctl_engine_properties_t *arg1 = (_ctl_engine_properties_t *) 0 ;
  ctl_engine_group_t result;
  
  arg1 = (_ctl_engine_properties_t *)jarg1; 
  result = (ctl_engine_group_t) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_engine_properties_t() {
  void * jresult ;
  _ctl_engine_properties_t *result = 0 ;
  
  result = (_ctl_engine_properties_t *)new _ctl_engine_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_engine_properties_t(void * jarg1) {
  _ctl_engine_properties_t *arg1 = (_ctl_engine_properties_t *) 0 ;
  
  arg1 = (_ctl_engine_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_stats_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_engine_stats_t *arg1 = (_ctl_engine_stats_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_engine_stats_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_stats_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_engine_stats_t *arg1 = (_ctl_engine_stats_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_engine_stats_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_stats_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_engine_stats_t *arg1 = (_ctl_engine_stats_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_engine_stats_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_stats_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_engine_stats_t *arg1 = (_ctl_engine_stats_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_engine_stats_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_stats_t_activeTime_set(void * jarg1, unsigned long long jarg2) {
  _ctl_engine_stats_t *arg1 = (_ctl_engine_stats_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_engine_stats_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->activeTime = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_stats_t_activeTime_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_engine_stats_t *arg1 = (_ctl_engine_stats_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_engine_stats_t *)jarg1; 
  result = (uint64_t) ((arg1)->activeTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_stats_t_timestamp_set(void * jarg1, unsigned long long jarg2) {
  _ctl_engine_stats_t *arg1 = (_ctl_engine_stats_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_engine_stats_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_engine_stats_t_timestamp_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_engine_stats_t *arg1 = (_ctl_engine_stats_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_engine_stats_t *)jarg1; 
  result = (uint64_t) ((arg1)->timestamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_engine_stats_t() {
  void * jresult ;
  _ctl_engine_stats_t *result = 0 ;
  
  result = (_ctl_engine_stats_t *)new _ctl_engine_stats_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_engine_stats_t(void * jarg1) {
  _ctl_engine_stats_t *arg1 = (_ctl_engine_stats_t *) 0 ;
  
  arg1 = (_ctl_engine_stats_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumEngineGroups(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_engine_handle_t *arg3 = (ctl_engine_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_engine_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumEngineGroups(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEngineGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_engine_handle_t arg1 = (ctl_engine_handle_t) 0 ;
  ctl_engine_properties_t *arg2 = (ctl_engine_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_engine_handle_t)jarg1; 
  arg2 = (ctl_engine_properties_t *)jarg2; 
  result = (ctl_result_t)ctlEngineGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEngineGetActivity(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_engine_handle_t arg1 = (ctl_engine_handle_t) 0 ;
  ctl_engine_stats_t *arg2 = (ctl_engine_stats_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_engine_handle_t)jarg1; 
  arg2 = (ctl_engine_stats_t *)jarg2; 
  result = (ctl_result_t)ctlEngineGetActivity(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_fan_speed_t *arg1 = (_ctl_fan_speed_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_fan_speed_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_fan_speed_t *arg1 = (_ctl_fan_speed_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_fan_speed_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_fan_speed_t *arg1 = (_ctl_fan_speed_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_fan_speed_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_fan_speed_t *arg1 = (_ctl_fan_speed_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_fan_speed_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_t_speed_set(void * jarg1, int jarg2) {
  _ctl_fan_speed_t *arg1 = (_ctl_fan_speed_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_fan_speed_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_t_speed_get(void * jarg1) {
  int jresult ;
  _ctl_fan_speed_t *arg1 = (_ctl_fan_speed_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_fan_speed_t *)jarg1; 
  result = (int32_t) ((arg1)->speed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_t_units_set(void * jarg1, int jarg2) {
  _ctl_fan_speed_t *arg1 = (_ctl_fan_speed_t *) 0 ;
  ctl_fan_speed_units_t arg2 ;
  
  arg1 = (_ctl_fan_speed_t *)jarg1; 
  arg2 = (ctl_fan_speed_units_t)jarg2; 
  if (arg1) (arg1)->units = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_t_units_get(void * jarg1) {
  int jresult ;
  _ctl_fan_speed_t *arg1 = (_ctl_fan_speed_t *) 0 ;
  ctl_fan_speed_units_t result;
  
  arg1 = (_ctl_fan_speed_t *)jarg1; 
  result = (ctl_fan_speed_units_t) ((arg1)->units);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_fan_speed_t() {
  void * jresult ;
  _ctl_fan_speed_t *result = 0 ;
  
  result = (_ctl_fan_speed_t *)new _ctl_fan_speed_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_fan_speed_t(void * jarg1) {
  _ctl_fan_speed_t *arg1 = (_ctl_fan_speed_t *) 0 ;
  
  arg1 = (_ctl_fan_speed_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_temp_speed_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_fan_temp_speed_t *arg1 = (_ctl_fan_temp_speed_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_fan_temp_speed_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_temp_speed_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_fan_temp_speed_t *arg1 = (_ctl_fan_temp_speed_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_fan_temp_speed_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_temp_speed_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_fan_temp_speed_t *arg1 = (_ctl_fan_temp_speed_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_fan_temp_speed_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_temp_speed_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_fan_temp_speed_t *arg1 = (_ctl_fan_temp_speed_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_fan_temp_speed_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_temp_speed_t_temperature_set(void * jarg1, unsigned int jarg2) {
  _ctl_fan_temp_speed_t *arg1 = (_ctl_fan_temp_speed_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_fan_temp_speed_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->temperature = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_temp_speed_t_temperature_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_fan_temp_speed_t *arg1 = (_ctl_fan_temp_speed_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_fan_temp_speed_t *)jarg1; 
  result = (uint32_t) ((arg1)->temperature);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_temp_speed_t_speed_set(void * jarg1, void * jarg2) {
  _ctl_fan_temp_speed_t *arg1 = (_ctl_fan_temp_speed_t *) 0 ;
  ctl_fan_speed_t *arg2 = (ctl_fan_speed_t *) 0 ;
  
  arg1 = (_ctl_fan_temp_speed_t *)jarg1; 
  arg2 = (ctl_fan_speed_t *)jarg2; 
  if (arg1) (arg1)->speed = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_temp_speed_t_speed_get(void * jarg1) {
  void * jresult ;
  _ctl_fan_temp_speed_t *arg1 = (_ctl_fan_temp_speed_t *) 0 ;
  ctl_fan_speed_t *result = 0 ;
  
  arg1 = (_ctl_fan_temp_speed_t *)jarg1; 
  result = (ctl_fan_speed_t *)& ((arg1)->speed);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_fan_temp_speed_t() {
  void * jresult ;
  _ctl_fan_temp_speed_t *result = 0 ;
  
  result = (_ctl_fan_temp_speed_t *)new _ctl_fan_temp_speed_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_fan_temp_speed_t(void * jarg1) {
  _ctl_fan_temp_speed_t *arg1 = (_ctl_fan_temp_speed_t *) 0 ;
  
  arg1 = (_ctl_fan_temp_speed_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_FAN_TEMP_SPEED_PAIR_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_table_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_fan_speed_table_t *arg1 = (_ctl_fan_speed_table_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_fan_speed_table_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_table_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_fan_speed_table_t *arg1 = (_ctl_fan_speed_table_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_fan_speed_table_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_table_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_fan_speed_table_t *arg1 = (_ctl_fan_speed_table_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_fan_speed_table_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_table_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_fan_speed_table_t *arg1 = (_ctl_fan_speed_table_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_fan_speed_table_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_table_t_numPoints_set(void * jarg1, int jarg2) {
  _ctl_fan_speed_table_t *arg1 = (_ctl_fan_speed_table_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_fan_speed_table_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->numPoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_table_t_numPoints_get(void * jarg1) {
  int jresult ;
  _ctl_fan_speed_table_t *arg1 = (_ctl_fan_speed_table_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_fan_speed_table_t *)jarg1; 
  result = (int32_t) ((arg1)->numPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_table_t_table_set(void * jarg1, void * jarg2) {
  _ctl_fan_speed_table_t *arg1 = (_ctl_fan_speed_table_t *) 0 ;
  ctl_fan_temp_speed_t *arg2 = (ctl_fan_temp_speed_t *) (ctl_fan_temp_speed_t *)0 ;
  
  arg1 = (_ctl_fan_speed_table_t *)jarg1; 
  arg2 = (ctl_fan_temp_speed_t *)jarg2; 
  {
    size_t ii;
    ctl_fan_temp_speed_t *b = (ctl_fan_temp_speed_t *) arg1->table;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((ctl_fan_temp_speed_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_speed_table_t_table_get(void * jarg1) {
  void * jresult ;
  _ctl_fan_speed_table_t *arg1 = (_ctl_fan_speed_table_t *) 0 ;
  ctl_fan_temp_speed_t *result = 0 ;
  
  arg1 = (_ctl_fan_speed_table_t *)jarg1; 
  result = (ctl_fan_temp_speed_t *)(ctl_fan_temp_speed_t *) ((arg1)->table);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_fan_speed_table_t() {
  void * jresult ;
  _ctl_fan_speed_table_t *result = 0 ;
  
  result = (_ctl_fan_speed_table_t *)new _ctl_fan_speed_table_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_fan_speed_table_t(void * jarg1) {
  _ctl_fan_speed_table_t *arg1 = (_ctl_fan_speed_table_t *) 0 ;
  
  arg1 = (_ctl_fan_speed_table_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_canControl_set(void * jarg1, unsigned int jarg2) {
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->canControl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_canControl_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  result = (bool) ((arg1)->canControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_supportedModes_set(void * jarg1, unsigned int jarg2) {
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->supportedModes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_supportedModes_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->supportedModes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_supportedUnits_set(void * jarg1, unsigned int jarg2) {
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->supportedUnits = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_supportedUnits_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->supportedUnits);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_maxRPM_set(void * jarg1, int jarg2) {
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->maxRPM = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_maxRPM_get(void * jarg1) {
  int jresult ;
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  result = (int32_t) ((arg1)->maxRPM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_maxPoints_set(void * jarg1, int jarg2) {
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->maxPoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_properties_t_maxPoints_get(void * jarg1) {
  int jresult ;
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  result = (int32_t) ((arg1)->maxPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_fan_properties_t() {
  void * jresult ;
  _ctl_fan_properties_t *result = 0 ;
  
  result = (_ctl_fan_properties_t *)new _ctl_fan_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_fan_properties_t(void * jarg1) {
  _ctl_fan_properties_t *arg1 = (_ctl_fan_properties_t *) 0 ;
  
  arg1 = (_ctl_fan_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_mode_set(void * jarg1, int jarg2) {
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  ctl_fan_speed_mode_t arg2 ;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  arg2 = (ctl_fan_speed_mode_t)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_mode_get(void * jarg1) {
  int jresult ;
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  ctl_fan_speed_mode_t result;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  result = (ctl_fan_speed_mode_t) ((arg1)->mode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_speedFixed_set(void * jarg1, void * jarg2) {
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  ctl_fan_speed_t *arg2 = (ctl_fan_speed_t *) 0 ;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  arg2 = (ctl_fan_speed_t *)jarg2; 
  if (arg1) (arg1)->speedFixed = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_speedFixed_get(void * jarg1) {
  void * jresult ;
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  ctl_fan_speed_t *result = 0 ;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  result = (ctl_fan_speed_t *)& ((arg1)->speedFixed);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_speedTable_set(void * jarg1, void * jarg2) {
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  ctl_fan_speed_table_t *arg2 = (ctl_fan_speed_table_t *) 0 ;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  arg2 = (ctl_fan_speed_table_t *)jarg2; 
  if (arg1) (arg1)->speedTable = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_fan_config_t_speedTable_get(void * jarg1) {
  void * jresult ;
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  ctl_fan_speed_table_t *result = 0 ;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  result = (ctl_fan_speed_table_t *)& ((arg1)->speedTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_fan_config_t() {
  void * jresult ;
  _ctl_fan_config_t *result = 0 ;
  
  result = (_ctl_fan_config_t *)new _ctl_fan_config_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_fan_config_t(void * jarg1) {
  _ctl_fan_config_t *arg1 = (_ctl_fan_config_t *) 0 ;
  
  arg1 = (_ctl_fan_config_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumFans(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_fan_handle_t *arg3 = (ctl_fan_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_fan_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumFans(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFanGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_fan_handle_t arg1 = (ctl_fan_handle_t) 0 ;
  ctl_fan_properties_t *arg2 = (ctl_fan_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_fan_handle_t)jarg1; 
  arg2 = (ctl_fan_properties_t *)jarg2; 
  result = (ctl_result_t)ctlFanGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFanGetConfig(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_fan_handle_t arg1 = (ctl_fan_handle_t) 0 ;
  ctl_fan_config_t *arg2 = (ctl_fan_config_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_fan_handle_t)jarg1; 
  arg2 = (ctl_fan_config_t *)jarg2; 
  result = (ctl_result_t)ctlFanGetConfig(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFanSetDefaultMode(void * jarg1) {
  int jresult ;
  ctl_fan_handle_t arg1 = (ctl_fan_handle_t) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_fan_handle_t)jarg1; 
  result = (ctl_result_t)ctlFanSetDefaultMode(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFanSetFixedSpeedMode(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_fan_handle_t arg1 = (ctl_fan_handle_t) 0 ;
  ctl_fan_speed_t *arg2 = (ctl_fan_speed_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_fan_handle_t)jarg1; 
  arg2 = (ctl_fan_speed_t *)jarg2; 
  result = (ctl_result_t)ctlFanSetFixedSpeedMode(arg1,(_ctl_fan_speed_t const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFanSetSpeedTableMode(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_fan_handle_t arg1 = (ctl_fan_handle_t) 0 ;
  ctl_fan_speed_table_t *arg2 = (ctl_fan_speed_table_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_fan_handle_t)jarg1; 
  arg2 = (ctl_fan_speed_table_t *)jarg2; 
  result = (ctl_result_t)ctlFanSetSpeedTableMode(arg1,(_ctl_fan_speed_table_t const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFanGetState(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  ctl_fan_handle_t arg1 = (ctl_fan_handle_t) 0 ;
  ctl_fan_speed_units_t arg2 ;
  int32_t *arg3 = (int32_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_fan_handle_t)jarg1; 
  arg2 = (ctl_fan_speed_units_t)jarg2; 
  arg3 = (int32_t *)jarg3; 
  result = (ctl_result_t)ctlFanGetState(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_FIRMWARE_PROPERTY_STR_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_MAX_FIRMWARE_PROPERTIES_RESERVED_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_MAX_FIRMWARE_COMPONENT_PROPERTIES_RESERVED_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_name_set(void * jarg1, char * jarg2) {
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 64-1);
      arg1->name[64-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_name_get(void * jarg1) {
  char * jresult ;
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_version_set(void * jarg1, char * jarg2) {
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->version, (const char *)arg2, 64-1);
      arg1->version[64-1] = 0;
    } else {
      arg1->version[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_version_get(void * jarg1) {
  char * jresult ;
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  result = (char *)(char *) ((arg1)->version);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_FirmwareConfig_set(void * jarg1, unsigned int jarg2) {
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  ctl_firmware_config_flags_t arg2 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  arg2 = (ctl_firmware_config_flags_t)jarg2; 
  if (arg1) (arg1)->FirmwareConfig = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_FirmwareConfig_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  ctl_firmware_config_flags_t result;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  result = (ctl_firmware_config_flags_t) ((arg1)->FirmwareConfig);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_reserved_set(void * jarg1, char * jarg2) {
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->reserved, (const char *)arg2, 16-1);
      arg1->reserved[16-1] = 0;
    } else {
      arg1->reserved[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_properties_t_reserved_get(void * jarg1) {
  char * jresult ;
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  result = (char *)(char *) ((arg1)->reserved);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_firmware_properties_t() {
  void * jresult ;
  _ctl_firmware_properties_t *result = 0 ;
  
  result = (_ctl_firmware_properties_t *)new _ctl_firmware_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_firmware_properties_t(void * jarg1) {
  _ctl_firmware_properties_t *arg1 = (_ctl_firmware_properties_t *) 0 ;
  
  arg1 = (_ctl_firmware_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_name_set(void * jarg1, char * jarg2) {
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 64-1);
      arg1->name[64-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_name_get(void * jarg1) {
  char * jresult ;
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_version_set(void * jarg1, char * jarg2) {
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->version, (const char *)arg2, 64-1);
      arg1->version[64-1] = 0;
    } else {
      arg1->version[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_version_get(void * jarg1) {
  char * jresult ;
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  result = (char *)(char *) ((arg1)->version);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_reserved_set(void * jarg1, char * jarg2) {
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->reserved, (const char *)arg2, 20-1);
      arg1->reserved[20-1] = 0;
    } else {
      arg1->reserved[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_firmware_component_properties_t_reserved_get(void * jarg1) {
  char * jresult ;
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  result = (char *)(char *) ((arg1)->reserved);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_firmware_component_properties_t() {
  void * jresult ;
  _ctl_firmware_component_properties_t *result = 0 ;
  
  result = (_ctl_firmware_component_properties_t *)new _ctl_firmware_component_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_firmware_component_properties_t(void * jarg1) {
  _ctl_firmware_component_properties_t *arg1 = (_ctl_firmware_component_properties_t *) 0 ;
  
  arg1 = (_ctl_firmware_component_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetFirmwareProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_firmware_properties_t *arg2 = (ctl_firmware_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_firmware_properties_t *)jarg2; 
  result = (ctl_result_t)ctlGetFirmwareProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumerateFirmwareComponents(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_firmware_component_handle_t *arg3 = (ctl_firmware_component_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_firmware_component_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumerateFirmwareComponents(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetFirmwareComponentProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_firmware_component_handle_t arg1 = (ctl_firmware_component_handle_t) 0 ;
  ctl_firmware_component_properties_t *arg2 = (ctl_firmware_component_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_firmware_component_handle_t)jarg1; 
  arg2 = (ctl_firmware_component_properties_t *)jarg2; 
  result = (ctl_result_t)ctlGetFirmwareComponentProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlAllowPCIeLinkSpeedUpdate(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  bool arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ctl_result_t)ctlAllowPCIeLinkSpeedUpdate(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_type_set(void * jarg1, int jarg2) {
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  ctl_freq_domain_t arg2 ;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  arg2 = (ctl_freq_domain_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_type_get(void * jarg1) {
  int jresult ;
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  ctl_freq_domain_t result;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  result = (ctl_freq_domain_t) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_canControl_set(void * jarg1, unsigned int jarg2) {
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->canControl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_canControl_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  result = (bool) ((arg1)->canControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_min_set(void * jarg1, double jarg2) {
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_min_get(void * jarg1) {
  double jresult ;
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  double result;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  result = (double) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_max_set(void * jarg1, double jarg2) {
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_properties_t_max_get(void * jarg1) {
  double jresult ;
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  double result;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  result = (double) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_freq_properties_t() {
  void * jresult ;
  _ctl_freq_properties_t *result = 0 ;
  
  result = (_ctl_freq_properties_t *)new _ctl_freq_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_freq_properties_t(void * jarg1) {
  _ctl_freq_properties_t *arg1 = (_ctl_freq_properties_t *) 0 ;
  
  arg1 = (_ctl_freq_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_range_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_freq_range_t *arg1 = (_ctl_freq_range_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_freq_range_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_range_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_freq_range_t *arg1 = (_ctl_freq_range_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_freq_range_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_range_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_freq_range_t *arg1 = (_ctl_freq_range_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_freq_range_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_range_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_freq_range_t *arg1 = (_ctl_freq_range_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_freq_range_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_range_t_min_set(void * jarg1, double jarg2) {
  _ctl_freq_range_t *arg1 = (_ctl_freq_range_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_freq_range_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_range_t_min_get(void * jarg1) {
  double jresult ;
  _ctl_freq_range_t *arg1 = (_ctl_freq_range_t *) 0 ;
  double result;
  
  arg1 = (_ctl_freq_range_t *)jarg1; 
  result = (double) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_range_t_max_set(void * jarg1, double jarg2) {
  _ctl_freq_range_t *arg1 = (_ctl_freq_range_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_freq_range_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_range_t_max_get(void * jarg1) {
  double jresult ;
  _ctl_freq_range_t *arg1 = (_ctl_freq_range_t *) 0 ;
  double result;
  
  arg1 = (_ctl_freq_range_t *)jarg1; 
  result = (double) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_freq_range_t() {
  void * jresult ;
  _ctl_freq_range_t *result = 0 ;
  
  result = (_ctl_freq_range_t *)new _ctl_freq_range_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_freq_range_t(void * jarg1) {
  _ctl_freq_range_t *arg1 = (_ctl_freq_range_t *) 0 ;
  
  arg1 = (_ctl_freq_range_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_currentVoltage_set(void * jarg1, double jarg2) {
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->currentVoltage = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_currentVoltage_get(void * jarg1) {
  double jresult ;
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double result;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  result = (double) ((arg1)->currentVoltage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_request_set(void * jarg1, double jarg2) {
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->request = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_request_get(void * jarg1) {
  double jresult ;
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double result;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  result = (double) ((arg1)->request);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_tdp_set(void * jarg1, double jarg2) {
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tdp = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_tdp_get(void * jarg1) {
  double jresult ;
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double result;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  result = (double) ((arg1)->tdp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_efficient_set(void * jarg1, double jarg2) {
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->efficient = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_efficient_get(void * jarg1) {
  double jresult ;
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double result;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  result = (double) ((arg1)->efficient);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_actual_set(void * jarg1, double jarg2) {
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->actual = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_actual_get(void * jarg1) {
  double jresult ;
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  double result;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  result = (double) ((arg1)->actual);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_throttleReasons_set(void * jarg1, unsigned int jarg2) {
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  ctl_freq_throttle_reason_flags_t arg2 ;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  arg2 = (ctl_freq_throttle_reason_flags_t)jarg2; 
  if (arg1) (arg1)->throttleReasons = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_state_t_throttleReasons_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  ctl_freq_throttle_reason_flags_t result;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  result = (ctl_freq_throttle_reason_flags_t) ((arg1)->throttleReasons);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_freq_state_t() {
  void * jresult ;
  _ctl_freq_state_t *result = 0 ;
  
  result = (_ctl_freq_state_t *)new _ctl_freq_state_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_freq_state_t(void * jarg1) {
  _ctl_freq_state_t *arg1 = (_ctl_freq_state_t *) 0 ;
  
  arg1 = (_ctl_freq_state_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_throttle_time_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_freq_throttle_time_t *arg1 = (_ctl_freq_throttle_time_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_freq_throttle_time_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_throttle_time_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_freq_throttle_time_t *arg1 = (_ctl_freq_throttle_time_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_freq_throttle_time_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_throttle_time_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_freq_throttle_time_t *arg1 = (_ctl_freq_throttle_time_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_freq_throttle_time_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_throttle_time_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_freq_throttle_time_t *arg1 = (_ctl_freq_throttle_time_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_freq_throttle_time_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_throttle_time_t_throttleTime_set(void * jarg1, unsigned long long jarg2) {
  _ctl_freq_throttle_time_t *arg1 = (_ctl_freq_throttle_time_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_freq_throttle_time_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->throttleTime = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_throttle_time_t_throttleTime_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_freq_throttle_time_t *arg1 = (_ctl_freq_throttle_time_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_freq_throttle_time_t *)jarg1; 
  result = (uint64_t) ((arg1)->throttleTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_throttle_time_t_timestamp_set(void * jarg1, unsigned long long jarg2) {
  _ctl_freq_throttle_time_t *arg1 = (_ctl_freq_throttle_time_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_freq_throttle_time_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_freq_throttle_time_t_timestamp_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_freq_throttle_time_t *arg1 = (_ctl_freq_throttle_time_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_freq_throttle_time_t *)jarg1; 
  result = (uint64_t) ((arg1)->timestamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_freq_throttle_time_t() {
  void * jresult ;
  _ctl_freq_throttle_time_t *result = 0 ;
  
  result = (_ctl_freq_throttle_time_t *)new _ctl_freq_throttle_time_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_freq_throttle_time_t(void * jarg1) {
  _ctl_freq_throttle_time_t *arg1 = (_ctl_freq_throttle_time_t *) 0 ;
  
  arg1 = (_ctl_freq_throttle_time_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumFrequencyDomains(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_freq_handle_t *arg3 = (ctl_freq_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_freq_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumFrequencyDomains(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFrequencyGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_freq_handle_t arg1 = (ctl_freq_handle_t) 0 ;
  ctl_freq_properties_t *arg2 = (ctl_freq_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_freq_handle_t)jarg1; 
  arg2 = (ctl_freq_properties_t *)jarg2; 
  result = (ctl_result_t)ctlFrequencyGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFrequencyGetAvailableClocks(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_freq_handle_t arg1 = (ctl_freq_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  double *arg3 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_freq_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (ctl_result_t)ctlFrequencyGetAvailableClocks(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFrequencyGetRange(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_freq_handle_t arg1 = (ctl_freq_handle_t) 0 ;
  ctl_freq_range_t *arg2 = (ctl_freq_range_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_freq_handle_t)jarg1; 
  arg2 = (ctl_freq_range_t *)jarg2; 
  result = (ctl_result_t)ctlFrequencyGetRange(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFrequencySetRange(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_freq_handle_t arg1 = (ctl_freq_handle_t) 0 ;
  ctl_freq_range_t *arg2 = (ctl_freq_range_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_freq_handle_t)jarg1; 
  arg2 = (ctl_freq_range_t *)jarg2; 
  result = (ctl_result_t)ctlFrequencySetRange(arg1,(_ctl_freq_range_t const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFrequencyGetState(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_freq_handle_t arg1 = (ctl_freq_handle_t) 0 ;
  ctl_freq_state_t *arg2 = (ctl_freq_state_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_freq_handle_t)jarg1; 
  arg2 = (ctl_freq_state_t *)jarg2; 
  result = (ctl_result_t)ctlFrequencyGetState(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlFrequencyGetThrottleTime(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_freq_handle_t arg1 = (ctl_freq_handle_t) 0 ;
  ctl_freq_throttle_time_t *arg2 = (ctl_freq_throttle_time_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_freq_handle_t)jarg1; 
  arg2 = (ctl_freq_throttle_time_t *)jarg2; 
  result = (ctl_result_t)ctlFrequencyGetThrottleTime(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_canControl_set(void * jarg1, unsigned int jarg2) {
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->canControl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_canControl_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  result = (bool) ((arg1)->canControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_isI2C_set(void * jarg1, unsigned int jarg2) {
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isI2C = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_isI2C_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  result = (bool) ((arg1)->isI2C);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_isPWM_set(void * jarg1, unsigned int jarg2) {
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPWM = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_isPWM_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  result = (bool) ((arg1)->isPWM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_haveRGB_set(void * jarg1, unsigned int jarg2) {
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveRGB = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_properties_t_haveRGB_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  result = (bool) ((arg1)->haveRGB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_led_properties_t() {
  void * jresult ;
  _ctl_led_properties_t *result = 0 ;
  
  result = (_ctl_led_properties_t *)new _ctl_led_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_led_properties_t(void * jarg1) {
  _ctl_led_properties_t *arg1 = (_ctl_led_properties_t *) 0 ;
  
  arg1 = (_ctl_led_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_red_set(void * jarg1, double jarg2) {
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->red = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_red_get(void * jarg1) {
  double jresult ;
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  double result;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  result = (double) ((arg1)->red);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_green_set(void * jarg1, double jarg2) {
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->green = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_green_get(void * jarg1) {
  double jresult ;
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  double result;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  result = (double) ((arg1)->green);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_blue_set(void * jarg1, double jarg2) {
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->blue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_color_t_blue_get(void * jarg1) {
  double jresult ;
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  double result;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  result = (double) ((arg1)->blue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_led_color_t() {
  void * jresult ;
  _ctl_led_color_t *result = 0 ;
  
  result = (_ctl_led_color_t *)new _ctl_led_color_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_led_color_t(void * jarg1) {
  _ctl_led_color_t *arg1 = (_ctl_led_color_t *) 0 ;
  
  arg1 = (_ctl_led_color_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_isOn_set(void * jarg1, unsigned int jarg2) {
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_isOn_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  result = (bool) ((arg1)->isOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_pwm_set(void * jarg1, double jarg2) {
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pwm = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_pwm_get(void * jarg1) {
  double jresult ;
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  double result;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  result = (double) ((arg1)->pwm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_color_set(void * jarg1, void * jarg2) {
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  ctl_led_color_t *arg2 = (ctl_led_color_t *) 0 ;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  arg2 = (ctl_led_color_t *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_led_state_t_color_get(void * jarg1) {
  void * jresult ;
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  ctl_led_color_t *result = 0 ;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  result = (ctl_led_color_t *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_led_state_t() {
  void * jresult ;
  _ctl_led_state_t *result = 0 ;
  
  result = (_ctl_led_state_t *)new _ctl_led_state_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_led_state_t(void * jarg1) {
  _ctl_led_state_t *arg1 = (_ctl_led_state_t *) 0 ;
  
  arg1 = (_ctl_led_state_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumLeds(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_led_handle_t *arg3 = (ctl_led_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_led_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumLeds(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlLedGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_led_handle_t arg1 = (ctl_led_handle_t) 0 ;
  ctl_led_properties_t *arg2 = (ctl_led_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_led_handle_t)jarg1; 
  arg2 = (ctl_led_properties_t *)jarg2; 
  result = (ctl_result_t)ctlLedGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlLedGetState(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_led_handle_t arg1 = (ctl_led_handle_t) 0 ;
  ctl_led_state_t *arg2 = (ctl_led_state_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_led_handle_t)jarg1; 
  arg2 = (ctl_led_state_t *)jarg2; 
  result = (ctl_result_t)ctlLedGetState(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlLedSetState(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  ctl_led_handle_t arg1 = (ctl_led_handle_t) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  ctl_result_t result;
  
  arg1 = (ctl_led_handle_t)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (ctl_result_t)ctlLedSetState(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_super_resolution_flag_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  ctl_video_processing_super_resolution_flags_t arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  arg2 = (ctl_video_processing_super_resolution_flags_t)jarg2; 
  if (arg1) (arg1)->super_resolution_flag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_super_resolution_flag_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  ctl_video_processing_super_resolution_flags_t result;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  result = (ctl_video_processing_super_resolution_flags_t) ((arg1)->super_resolution_flag);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_super_resolution_range_in_width_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->super_resolution_range_in_width = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_super_resolution_range_in_width_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->super_resolution_range_in_width);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_super_resolution_range_in_height_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->super_resolution_range_in_height = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_super_resolution_range_in_height_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->super_resolution_range_in_height);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_info_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_super_resolution_info_t() {
  void * jresult ;
  _ctl_video_processing_super_resolution_info_t *result = 0 ;
  
  result = (_ctl_video_processing_super_resolution_info_t *)new _ctl_video_processing_super_resolution_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_super_resolution_info_t(void * jarg1) {
  _ctl_video_processing_super_resolution_info_t *arg1 = (_ctl_video_processing_super_resolution_info_t *) 0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_flag_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  ctl_video_processing_super_resolution_flags_t arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  arg2 = (ctl_video_processing_super_resolution_flags_t)jarg2; 
  if (arg1) (arg1)->super_resolution_flag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_flag_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  ctl_video_processing_super_resolution_flags_t result;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  result = (ctl_video_processing_super_resolution_flags_t) ((arg1)->super_resolution_flag);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_max_in_enabled_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->super_resolution_max_in_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_max_in_enabled_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  result = (bool) ((arg1)->super_resolution_max_in_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_max_in_width_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->super_resolution_max_in_width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_max_in_width_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  result = (uint32_t) ((arg1)->super_resolution_max_in_width);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_max_in_height_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->super_resolution_max_in_height = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_max_in_height_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  result = (uint32_t) ((arg1)->super_resolution_max_in_height);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_reboot_reset_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->super_resolution_reboot_reset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_super_resolution_reboot_reset_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  result = (bool) ((arg1)->super_resolution_reboot_reset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)15; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_ReservedBytes_set(void * jarg1, char * jarg2) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ReservedBytes, (const char *)arg2, 3-1);
      arg1->ReservedBytes[3-1] = 0;
    } else {
      arg1->ReservedBytes[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_super_resolution_t_ReservedBytes_get(void * jarg1) {
  char * jresult ;
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  result = (char *)(char *) ((arg1)->ReservedBytes);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_super_resolution_t() {
  void * jresult ;
  _ctl_video_processing_super_resolution_t *result = 0 ;
  
  result = (_ctl_video_processing_super_resolution_t *)new _ctl_video_processing_super_resolution_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_super_resolution_t(void * jarg1) {
  _ctl_video_processing_super_resolution_t *arg1 = (_ctl_video_processing_super_resolution_t *) 0 ;
  
  arg1 = (_ctl_video_processing_super_resolution_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_noise_reduction_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->noise_reduction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_noise_reduction_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->noise_reduction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_noise_reduction_auto_detect_supported_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->noise_reduction_auto_detect_supported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_noise_reduction_auto_detect_supported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  result = (bool) ((arg1)->noise_reduction_auto_detect_supported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_noise_reduction_auto_detect_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  ctl_property_info_boolean_t *arg2 = (ctl_property_info_boolean_t *) 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  arg2 = (ctl_property_info_boolean_t *)jarg2; 
  if (arg1) (arg1)->noise_reduction_auto_detect = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_noise_reduction_auto_detect_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  ctl_property_info_boolean_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  result = (ctl_property_info_boolean_t *)& ((arg1)->noise_reduction_auto_detect);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_info_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_noise_reduction_info_t() {
  void * jresult ;
  _ctl_video_processing_noise_reduction_info_t *result = 0 ;
  
  result = (_ctl_video_processing_noise_reduction_info_t *)new _ctl_video_processing_noise_reduction_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_noise_reduction_info_t(void * jarg1) {
  _ctl_video_processing_noise_reduction_info_t *arg1 = (_ctl_video_processing_noise_reduction_info_t *) 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_noise_reduction_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  ctl_property_uint_t *arg2 = (ctl_property_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  arg2 = (ctl_property_uint_t *)jarg2; 
  if (arg1) (arg1)->noise_reduction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_noise_reduction_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  ctl_property_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  result = (ctl_property_uint_t *)& ((arg1)->noise_reduction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_noise_reduction_auto_detect_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  ctl_property_boolean_t *arg2 = (ctl_property_boolean_t *) 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  arg2 = (ctl_property_boolean_t *)jarg2; 
  if (arg1) (arg1)->noise_reduction_auto_detect = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_noise_reduction_auto_detect_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  ctl_property_boolean_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  result = (ctl_property_boolean_t *)& ((arg1)->noise_reduction_auto_detect);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_noise_reduction_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_noise_reduction_t() {
  void * jresult ;
  _ctl_video_processing_noise_reduction_t *result = 0 ;
  
  result = (_ctl_video_processing_noise_reduction_t *)new _ctl_video_processing_noise_reduction_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_noise_reduction_t(void * jarg1) {
  _ctl_video_processing_noise_reduction_t *arg1 = (_ctl_video_processing_noise_reduction_t *) 0 ;
  
  arg1 = (_ctl_video_processing_noise_reduction_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_adaptive_contrast_enhancement_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->adaptive_contrast_enhancement = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_adaptive_contrast_enhancement_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->adaptive_contrast_enhancement);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_adaptive_contrast_enhancement_coexistence_supported_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->adaptive_contrast_enhancement_coexistence_supported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_adaptive_contrast_enhancement_coexistence_supported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  result = (bool) ((arg1)->adaptive_contrast_enhancement_coexistence_supported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_adaptive_contrast_enhancement_coexistence_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  ctl_property_info_boolean_t *arg2 = (ctl_property_info_boolean_t *) 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  arg2 = (ctl_property_info_boolean_t *)jarg2; 
  if (arg1) (arg1)->adaptive_contrast_enhancement_coexistence = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_adaptive_contrast_enhancement_coexistence_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  ctl_property_info_boolean_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  result = (ctl_property_info_boolean_t *)& ((arg1)->adaptive_contrast_enhancement_coexistence);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_info_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_adaptive_contrast_enhancement_info_t() {
  void * jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *result = 0 ;
  
  result = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)new _ctl_video_processing_adaptive_contrast_enhancement_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_adaptive_contrast_enhancement_info_t(void * jarg1) {
  _ctl_video_processing_adaptive_contrast_enhancement_info_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *) 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_adaptive_contrast_enhancement_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  ctl_property_uint_t *arg2 = (ctl_property_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  arg2 = (ctl_property_uint_t *)jarg2; 
  if (arg1) (arg1)->adaptive_contrast_enhancement = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_adaptive_contrast_enhancement_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  ctl_property_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  result = (ctl_property_uint_t *)& ((arg1)->adaptive_contrast_enhancement);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_adaptive_contrast_enhancement_coexistence_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  ctl_property_boolean_t *arg2 = (ctl_property_boolean_t *) 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  arg2 = (ctl_property_boolean_t *)jarg2; 
  if (arg1) (arg1)->adaptive_contrast_enhancement_coexistence = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_adaptive_contrast_enhancement_coexistence_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  ctl_property_boolean_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  result = (ctl_property_boolean_t *)& ((arg1)->adaptive_contrast_enhancement_coexistence);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_adaptive_contrast_enhancement_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_adaptive_contrast_enhancement_t() {
  void * jresult ;
  _ctl_video_processing_adaptive_contrast_enhancement_t *result = 0 ;
  
  result = (_ctl_video_processing_adaptive_contrast_enhancement_t *)new _ctl_video_processing_adaptive_contrast_enhancement_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_adaptive_contrast_enhancement_t(void * jarg1) {
  _ctl_video_processing_adaptive_contrast_enhancement_t *arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *) 0 ;
  
  arg1 = (_ctl_video_processing_adaptive_contrast_enhancement_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_standard_color_correction_default_enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->standard_color_correction_default_enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_standard_color_correction_default_enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  result = (bool) ((arg1)->standard_color_correction_default_enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_brightness_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  ctl_property_info_float_t *arg2 = (ctl_property_info_float_t *) 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_float_t *)jarg2; 
  if (arg1) (arg1)->brightness = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_brightness_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  ctl_property_info_float_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_float_t *)& ((arg1)->brightness);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_contrast_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  ctl_property_info_float_t *arg2 = (ctl_property_info_float_t *) 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_float_t *)jarg2; 
  if (arg1) (arg1)->contrast = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_contrast_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  ctl_property_info_float_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_float_t *)& ((arg1)->contrast);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_hue_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  ctl_property_info_float_t *arg2 = (ctl_property_info_float_t *) 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_float_t *)jarg2; 
  if (arg1) (arg1)->hue = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_hue_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  ctl_property_info_float_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_float_t *)& ((arg1)->hue);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_saturation_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  ctl_property_info_float_t *arg2 = (ctl_property_info_float_t *) 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_float_t *)jarg2; 
  if (arg1) (arg1)->saturation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_saturation_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  ctl_property_info_float_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_float_t *)& ((arg1)->saturation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_info_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_standard_color_correction_info_t() {
  void * jresult ;
  _ctl_video_processing_standard_color_correction_info_t *result = 0 ;
  
  result = (_ctl_video_processing_standard_color_correction_info_t *)new _ctl_video_processing_standard_color_correction_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_standard_color_correction_info_t(void * jarg1) {
  _ctl_video_processing_standard_color_correction_info_t *arg1 = (_ctl_video_processing_standard_color_correction_info_t *) 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_standard_color_correction_enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->standard_color_correction_enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_standard_color_correction_enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  result = (bool) ((arg1)->standard_color_correction_enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_brightness_set(void * jarg1, float jarg2) {
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->brightness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_brightness_get(void * jarg1) {
  float jresult ;
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  float result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  result = (float) ((arg1)->brightness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_contrast_set(void * jarg1, float jarg2) {
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->contrast = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_contrast_get(void * jarg1) {
  float jresult ;
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  float result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  result = (float) ((arg1)->contrast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_hue_set(void * jarg1, float jarg2) {
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->hue = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_hue_get(void * jarg1) {
  float jresult ;
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  float result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  result = (float) ((arg1)->hue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_saturation_set(void * jarg1, float jarg2) {
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  float arg2 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->saturation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_saturation_get(void * jarg1) {
  float jresult ;
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  float result;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  result = (float) ((arg1)->saturation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_standard_color_correction_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_standard_color_correction_t() {
  void * jresult ;
  _ctl_video_processing_standard_color_correction_t *result = 0 ;
  
  result = (_ctl_video_processing_standard_color_correction_t *)new _ctl_video_processing_standard_color_correction_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_standard_color_correction_t(void * jarg1) {
  _ctl_video_processing_standard_color_correction_t *arg1 = (_ctl_video_processing_standard_color_correction_t *) 0 ;
  
  arg1 = (_ctl_video_processing_standard_color_correction_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_total_color_correction_default_enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->total_color_correction_default_enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_total_color_correction_default_enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (bool) ((arg1)->total_color_correction_default_enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_red_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->red = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_red_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->red);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_green_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->green = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_green_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->green);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_blue_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->blue = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_blue_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->blue);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_yellow_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->yellow = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_yellow_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->yellow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_cyan_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->cyan = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_cyan_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->cyan);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_magenta_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *arg2 = (ctl_property_info_uint_t *) 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = (ctl_property_info_uint_t *)jarg2; 
  if (arg1) (arg1)->magenta = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_magenta_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  ctl_property_info_uint_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (ctl_property_info_uint_t *)& ((arg1)->magenta);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_info_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_total_color_correction_info_t() {
  void * jresult ;
  _ctl_video_processing_total_color_correction_info_t *result = 0 ;
  
  result = (_ctl_video_processing_total_color_correction_info_t *)new _ctl_video_processing_total_color_correction_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_total_color_correction_info_t(void * jarg1) {
  _ctl_video_processing_total_color_correction_info_t *arg1 = (_ctl_video_processing_total_color_correction_info_t *) 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_total_color_correction_enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->total_color_correction_enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_total_color_correction_enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (bool) ((arg1)->total_color_correction_enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_red_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->red = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_red_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (uint32_t) ((arg1)->red);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_green_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->green = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_green_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (uint32_t) ((arg1)->green);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_blue_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->blue = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_blue_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (uint32_t) ((arg1)->blue);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_yellow_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->yellow = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_yellow_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (uint32_t) ((arg1)->yellow);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_cyan_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->cyan = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_cyan_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (uint32_t) ((arg1)->cyan);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_magenta_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->magenta = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_magenta_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (uint32_t) ((arg1)->magenta);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_total_color_correction_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_total_color_correction_t() {
  void * jresult ;
  _ctl_video_processing_total_color_correction_t *result = 0 ;
  
  result = (_ctl_video_processing_total_color_correction_t *)new _ctl_video_processing_total_color_correction_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_total_color_correction_t(void * jarg1) {
  _ctl_video_processing_total_color_correction_t *arg1 = (_ctl_video_processing_total_color_correction_t *) 0 ;
  
  arg1 = (_ctl_video_processing_total_color_correction_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_FeatureType_set(void * jarg1, int jarg2) {
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  ctl_video_processing_feature_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  arg2 = (ctl_video_processing_feature_t)jarg2; 
  if (arg1) (arg1)->FeatureType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_FeatureType_get(void * jarg1) {
  int jresult ;
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  ctl_video_processing_feature_t result;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  result = (ctl_video_processing_feature_t) ((arg1)->FeatureType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_ValueType_set(void * jarg1, int jarg2) {
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  ctl_property_value_type_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  arg2 = (ctl_property_value_type_t)jarg2; 
  if (arg1) (arg1)->ValueType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_ValueType_get(void * jarg1) {
  int jresult ;
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  ctl_property_value_type_t result;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  result = (ctl_property_value_type_t) ((arg1)->ValueType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_Value_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  ctl_property_info_t *arg2 = (ctl_property_info_t *) 0 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  arg2 = (ctl_property_info_t *)jarg2; 
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_Value_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  ctl_property_info_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  result = (ctl_property_info_t *)& ((arg1)->Value);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_CustomValueSize_set(void * jarg1, int jarg2) {
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CustomValueSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_CustomValueSize_get(void * jarg1) {
  int jresult ;
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  result = (int32_t) ((arg1)->CustomValueSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_pCustomValue_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pCustomValue = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_pCustomValue_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  void *result = 0 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  result = (void *) ((arg1)->pCustomValue);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_details_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_feature_details_t() {
  void * jresult ;
  _ctl_video_processing_feature_details_t *result = 0 ;
  
  result = (_ctl_video_processing_feature_details_t *)new _ctl_video_processing_feature_details_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_feature_details_t(void * jarg1) {
  _ctl_video_processing_feature_details_t *arg1 = (_ctl_video_processing_feature_details_t *) 0 ;
  
  arg1 = (_ctl_video_processing_feature_details_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_NumSupportedFeatures_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NumSupportedFeatures = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_NumSupportedFeatures_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  result = (uint32_t) ((arg1)->NumSupportedFeatures);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_pFeatureDetails_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  ctl_video_processing_feature_details_t *arg2 = (ctl_video_processing_feature_details_t *) 0 ;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  arg2 = (ctl_video_processing_feature_details_t *)jarg2; 
  if (arg1) (arg1)->pFeatureDetails = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_pFeatureDetails_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  ctl_video_processing_feature_details_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  result = (ctl_video_processing_feature_details_t *) ((arg1)->pFeatureDetails);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_caps_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_feature_caps_t() {
  void * jresult ;
  _ctl_video_processing_feature_caps_t *result = 0 ;
  
  result = (_ctl_video_processing_feature_caps_t *)new _ctl_video_processing_feature_caps_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_feature_caps_t(void * jarg1) {
  _ctl_video_processing_feature_caps_t *arg1 = (_ctl_video_processing_feature_caps_t *) 0 ;
  
  arg1 = (_ctl_video_processing_feature_caps_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_FeatureType_set(void * jarg1, int jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  ctl_video_processing_feature_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (ctl_video_processing_feature_t)jarg2; 
  if (arg1) (arg1)->FeatureType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_FeatureType_get(void * jarg1) {
  int jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  ctl_video_processing_feature_t result;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (ctl_video_processing_feature_t) ((arg1)->FeatureType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_ApplicationName_set(void * jarg1, char * jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->ApplicationName;
    if (arg2) {
      arg1->ApplicationName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->ApplicationName, (const char *)arg2);
    } else {
      arg1->ApplicationName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_ApplicationName_get(void * jarg1) {
  char * jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (char *) ((arg1)->ApplicationName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_ApplicationNameLength_set(void * jarg1, signed char jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  int8_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->ApplicationNameLength = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_ApplicationNameLength_get(void * jarg1) {
  signed char jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  int8_t result;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (int8_t) ((arg1)->ApplicationNameLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_bSet_set(void * jarg1, unsigned int jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_bSet_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (bool) ((arg1)->bSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_ValueType_set(void * jarg1, int jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  ctl_property_value_type_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (ctl_property_value_type_t)jarg2; 
  if (arg1) (arg1)->ValueType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_ValueType_get(void * jarg1) {
  int jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  ctl_property_value_type_t result;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (ctl_property_value_type_t) ((arg1)->ValueType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_Value_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  ctl_property_t *arg2 = (ctl_property_t *) 0 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (ctl_property_t *)jarg2; 
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_Value_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  ctl_property_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (ctl_property_t *)& ((arg1)->Value);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_CustomValueSize_set(void * jarg1, int jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CustomValueSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_CustomValueSize_get(void * jarg1) {
  int jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (int32_t) ((arg1)->CustomValueSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_pCustomValue_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pCustomValue = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_pCustomValue_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  void *result = 0 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (void *) ((arg1)->pCustomValue);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_ReservedFields_set(void * jarg1, void * jarg2) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ReservedFields;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_video_processing_feature_getset_t_ReservedFields_get(void * jarg1) {
  void * jresult ;
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->ReservedFields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_video_processing_feature_getset_t() {
  void * jresult ;
  _ctl_video_processing_feature_getset_t *result = 0 ;
  
  result = (_ctl_video_processing_feature_getset_t *)new _ctl_video_processing_feature_getset_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_video_processing_feature_getset_t(void * jarg1) {
  _ctl_video_processing_feature_getset_t *arg1 = (_ctl_video_processing_feature_getset_t *) 0 ;
  
  arg1 = (_ctl_video_processing_feature_getset_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSupportedVideoProcessingCapabilities(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_video_processing_feature_caps_t *arg2 = (ctl_video_processing_feature_caps_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_video_processing_feature_caps_t *)jarg2; 
  result = (ctl_result_t)ctlGetSupportedVideoProcessingCapabilities(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlGetSetVideoProcessingFeature(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_video_processing_feature_getset_t *arg2 = (ctl_video_processing_feature_getset_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_video_processing_feature_getset_t *)jarg2; 
  result = (ctl_result_t)ctlGetSetVideoProcessingFeature(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_type_set(void * jarg1, int jarg2) {
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  ctl_mem_type_t arg2 ;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  arg2 = (ctl_mem_type_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_type_get(void * jarg1) {
  int jresult ;
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  ctl_mem_type_t result;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  result = (ctl_mem_type_t) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_location_set(void * jarg1, int jarg2) {
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  ctl_mem_loc_t arg2 ;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  arg2 = (ctl_mem_loc_t)jarg2; 
  if (arg1) (arg1)->location = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_location_get(void * jarg1) {
  int jresult ;
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  ctl_mem_loc_t result;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  result = (ctl_mem_loc_t) ((arg1)->location);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_physicalSize_set(void * jarg1, unsigned long long jarg2) {
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->physicalSize = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_physicalSize_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  result = (uint64_t) ((arg1)->physicalSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_busWidth_set(void * jarg1, int jarg2) {
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->busWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_busWidth_get(void * jarg1) {
  int jresult ;
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  result = (int32_t) ((arg1)->busWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_numChannels_set(void * jarg1, int jarg2) {
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->numChannels = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_properties_t_numChannels_get(void * jarg1) {
  int jresult ;
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  result = (int32_t) ((arg1)->numChannels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_mem_properties_t() {
  void * jresult ;
  _ctl_mem_properties_t *result = 0 ;
  
  result = (_ctl_mem_properties_t *)new _ctl_mem_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_mem_properties_t(void * jarg1) {
  _ctl_mem_properties_t *arg1 = (_ctl_mem_properties_t *) 0 ;
  
  arg1 = (_ctl_mem_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_state_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_mem_state_t *arg1 = (_ctl_mem_state_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_mem_state_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_state_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_mem_state_t *arg1 = (_ctl_mem_state_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_mem_state_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_state_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_mem_state_t *arg1 = (_ctl_mem_state_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_mem_state_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_state_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_mem_state_t *arg1 = (_ctl_mem_state_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_mem_state_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_state_t_free_set(void * jarg1, unsigned long long jarg2) {
  _ctl_mem_state_t *arg1 = (_ctl_mem_state_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_mem_state_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->free = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_state_t_free_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_mem_state_t *arg1 = (_ctl_mem_state_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_mem_state_t *)jarg1; 
  result = (uint64_t) ((arg1)->free);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_state_t_size_set(void * jarg1, unsigned long long jarg2) {
  _ctl_mem_state_t *arg1 = (_ctl_mem_state_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_mem_state_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_state_t_size_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_mem_state_t *arg1 = (_ctl_mem_state_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_mem_state_t *)jarg1; 
  result = (uint64_t) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_mem_state_t() {
  void * jresult ;
  _ctl_mem_state_t *result = 0 ;
  
  result = (_ctl_mem_state_t *)new _ctl_mem_state_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_mem_state_t(void * jarg1) {
  _ctl_mem_state_t *arg1 = (_ctl_mem_state_t *) 0 ;
  
  arg1 = (_ctl_mem_state_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_maxBandwidth_set(void * jarg1, unsigned long long jarg2) {
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->maxBandwidth = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_maxBandwidth_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  result = (uint64_t) ((arg1)->maxBandwidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_timestamp_set(void * jarg1, unsigned long long jarg2) {
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_timestamp_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  result = (uint64_t) ((arg1)->timestamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_readCounter_set(void * jarg1, unsigned long long jarg2) {
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->readCounter = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_readCounter_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  result = (uint64_t) ((arg1)->readCounter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_writeCounter_set(void * jarg1, unsigned long long jarg2) {
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->writeCounter = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_mem_bandwidth_t_writeCounter_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  result = (uint64_t) ((arg1)->writeCounter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_mem_bandwidth_t() {
  void * jresult ;
  _ctl_mem_bandwidth_t *result = 0 ;
  
  result = (_ctl_mem_bandwidth_t *)new _ctl_mem_bandwidth_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_mem_bandwidth_t(void * jarg1) {
  _ctl_mem_bandwidth_t *arg1 = (_ctl_mem_bandwidth_t *) 0 ;
  
  arg1 = (_ctl_mem_bandwidth_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumMemoryModules(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_mem_handle_t *arg3 = (ctl_mem_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_mem_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumMemoryModules(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlMemoryGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_mem_handle_t arg1 = (ctl_mem_handle_t) 0 ;
  ctl_mem_properties_t *arg2 = (ctl_mem_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_mem_handle_t)jarg1; 
  arg2 = (ctl_mem_properties_t *)jarg2; 
  result = (ctl_result_t)ctlMemoryGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlMemoryGetState(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_mem_handle_t arg1 = (ctl_mem_handle_t) 0 ;
  ctl_mem_state_t *arg2 = (ctl_mem_state_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_mem_handle_t)jarg1; 
  arg2 = (ctl_mem_state_t *)jarg2; 
  result = (ctl_result_t)ctlMemoryGetState(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlMemoryGetBandwidth(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_mem_handle_t arg1 = (ctl_mem_handle_t) 0 ;
  ctl_mem_bandwidth_t *arg2 = (ctl_mem_bandwidth_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_mem_handle_t)jarg1; 
  arg2 = (ctl_mem_bandwidth_t *)jarg2; 
  result = (ctl_result_t)ctlMemoryGetBandwidth(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_telemetry_item_t_bSupported_set(void * jarg1, unsigned int jarg2) {
  _ctl_oc_telemetry_item_t *arg1 = (_ctl_oc_telemetry_item_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_oc_telemetry_item_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSupported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_telemetry_item_t_bSupported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_oc_telemetry_item_t *arg1 = (_ctl_oc_telemetry_item_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_oc_telemetry_item_t *)jarg1; 
  result = (bool) ((arg1)->bSupported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_telemetry_item_t_units_set(void * jarg1, int jarg2) {
  _ctl_oc_telemetry_item_t *arg1 = (_ctl_oc_telemetry_item_t *) 0 ;
  ctl_units_t arg2 ;
  
  arg1 = (_ctl_oc_telemetry_item_t *)jarg1; 
  arg2 = (ctl_units_t)jarg2; 
  if (arg1) (arg1)->units = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_telemetry_item_t_units_get(void * jarg1) {
  int jresult ;
  _ctl_oc_telemetry_item_t *arg1 = (_ctl_oc_telemetry_item_t *) 0 ;
  ctl_units_t result;
  
  arg1 = (_ctl_oc_telemetry_item_t *)jarg1; 
  result = (ctl_units_t) ((arg1)->units);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_telemetry_item_t_type_set(void * jarg1, int jarg2) {
  _ctl_oc_telemetry_item_t *arg1 = (_ctl_oc_telemetry_item_t *) 0 ;
  ctl_data_type_t arg2 ;
  
  arg1 = (_ctl_oc_telemetry_item_t *)jarg1; 
  arg2 = (ctl_data_type_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_telemetry_item_t_type_get(void * jarg1) {
  int jresult ;
  _ctl_oc_telemetry_item_t *arg1 = (_ctl_oc_telemetry_item_t *) 0 ;
  ctl_data_type_t result;
  
  arg1 = (_ctl_oc_telemetry_item_t *)jarg1; 
  result = (ctl_data_type_t) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_telemetry_item_t_value_set(void * jarg1, void * jarg2) {
  _ctl_oc_telemetry_item_t *arg1 = (_ctl_oc_telemetry_item_t *) 0 ;
  ctl_data_value_t *arg2 = (ctl_data_value_t *) 0 ;
  
  arg1 = (_ctl_oc_telemetry_item_t *)jarg1; 
  arg2 = (ctl_data_value_t *)jarg2; 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_telemetry_item_t_value_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_telemetry_item_t *arg1 = (_ctl_oc_telemetry_item_t *) 0 ;
  ctl_data_value_t *result = 0 ;
  
  arg1 = (_ctl_oc_telemetry_item_t *)jarg1; 
  result = (ctl_data_value_t *)& ((arg1)->value);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_oc_telemetry_item_t() {
  void * jresult ;
  _ctl_oc_telemetry_item_t *result = 0 ;
  
  result = (_ctl_oc_telemetry_item_t *)new _ctl_oc_telemetry_item_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_oc_telemetry_item_t(void * jarg1) {
  _ctl_oc_telemetry_item_t *arg1 = (_ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_oc_telemetry_item_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_bSupported_set(void * jarg1, unsigned int jarg2) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSupported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_bSupported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  result = (bool) ((arg1)->bSupported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_bRelative_set(void * jarg1, unsigned int jarg2) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRelative = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_bRelative_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  result = (bool) ((arg1)->bRelative);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_bReference_set(void * jarg1, unsigned int jarg2) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bReference = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_bReference_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  result = (bool) ((arg1)->bReference);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_units_set(void * jarg1, int jarg2) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  ctl_units_t arg2 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  arg2 = (ctl_units_t)jarg2; 
  if (arg1) (arg1)->units = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_units_get(void * jarg1) {
  int jresult ;
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  ctl_units_t result;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  result = (ctl_units_t) ((arg1)->units);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_min_set(void * jarg1, double jarg2) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_min_get(void * jarg1) {
  double jresult ;
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double result;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  result = (double) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_max_set(void * jarg1, double jarg2) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_max_get(void * jarg1) {
  double jresult ;
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double result;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  result = (double) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_step_set(void * jarg1, double jarg2) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->step = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_step_get(void * jarg1) {
  double jresult ;
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double result;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  result = (double) ((arg1)->step);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_Default_set(void * jarg1, double jarg2) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Default = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_Default_get(void * jarg1) {
  double jresult ;
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double result;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  result = (double) ((arg1)->Default);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_reference_set(void * jarg1, double jarg2) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->reference = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_control_info_t_reference_get(void * jarg1) {
  double jresult ;
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  double result;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  result = (double) ((arg1)->reference);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_oc_control_info_t() {
  void * jresult ;
  _ctl_oc_control_info_t *result = 0 ;
  
  result = (_ctl_oc_control_info_t *)new _ctl_oc_control_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_oc_control_info_t(void * jarg1) {
  _ctl_oc_control_info_t *arg1 = (_ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_control_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_bSupported_set(void * jarg1, unsigned int jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSupported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_bSupported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (bool) ((arg1)->bSupported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_gpuFrequencyOffset_set(void * jarg1, void * jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *arg2 = (ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (ctl_oc_control_info_t *)jarg2; 
  if (arg1) (arg1)->gpuFrequencyOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_gpuFrequencyOffset_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *result = 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (ctl_oc_control_info_t *)& ((arg1)->gpuFrequencyOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_gpuVoltageOffset_set(void * jarg1, void * jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *arg2 = (ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (ctl_oc_control_info_t *)jarg2; 
  if (arg1) (arg1)->gpuVoltageOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_gpuVoltageOffset_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *result = 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (ctl_oc_control_info_t *)& ((arg1)->gpuVoltageOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_vramFrequencyOffset_set(void * jarg1, void * jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *arg2 = (ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (ctl_oc_control_info_t *)jarg2; 
  if (arg1) (arg1)->vramFrequencyOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_vramFrequencyOffset_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *result = 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (ctl_oc_control_info_t *)& ((arg1)->vramFrequencyOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_vramVoltageOffset_set(void * jarg1, void * jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *arg2 = (ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (ctl_oc_control_info_t *)jarg2; 
  if (arg1) (arg1)->vramVoltageOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_vramVoltageOffset_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *result = 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (ctl_oc_control_info_t *)& ((arg1)->vramVoltageOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_powerLimit_set(void * jarg1, void * jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *arg2 = (ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (ctl_oc_control_info_t *)jarg2; 
  if (arg1) (arg1)->powerLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_powerLimit_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *result = 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (ctl_oc_control_info_t *)& ((arg1)->powerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_temperatureLimit_set(void * jarg1, void * jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *arg2 = (ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (ctl_oc_control_info_t *)jarg2; 
  if (arg1) (arg1)->temperatureLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_temperatureLimit_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *result = 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (ctl_oc_control_info_t *)& ((arg1)->temperatureLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_vramMemSpeedLimit_set(void * jarg1, void * jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *arg2 = (ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (ctl_oc_control_info_t *)jarg2; 
  if (arg1) (arg1)->vramMemSpeedLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_vramMemSpeedLimit_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *result = 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (ctl_oc_control_info_t *)& ((arg1)->vramMemSpeedLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_gpuVFCurveVoltageLimit_set(void * jarg1, void * jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *arg2 = (ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (ctl_oc_control_info_t *)jarg2; 
  if (arg1) (arg1)->gpuVFCurveVoltageLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_gpuVFCurveVoltageLimit_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *result = 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (ctl_oc_control_info_t *)& ((arg1)->gpuVFCurveVoltageLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_gpuVFCurveFrequencyLimit_set(void * jarg1, void * jarg2) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *arg2 = (ctl_oc_control_info_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  arg2 = (ctl_oc_control_info_t *)jarg2; 
  if (arg1) (arg1)->gpuVFCurveFrequencyLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_properties_t_gpuVFCurveFrequencyLimit_get(void * jarg1) {
  void * jresult ;
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  ctl_oc_control_info_t *result = 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  result = (ctl_oc_control_info_t *)& ((arg1)->gpuVFCurveFrequencyLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_oc_properties_t() {
  void * jresult ;
  _ctl_oc_properties_t *result = 0 ;
  
  result = (_ctl_oc_properties_t *)new _ctl_oc_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_oc_properties_t(void * jarg1) {
  _ctl_oc_properties_t *arg1 = (_ctl_oc_properties_t *) 0 ;
  
  arg1 = (_ctl_oc_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_vf_pair_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_oc_vf_pair_t *arg1 = (_ctl_oc_vf_pair_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_oc_vf_pair_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_vf_pair_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_oc_vf_pair_t *arg1 = (_ctl_oc_vf_pair_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_oc_vf_pair_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_vf_pair_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_oc_vf_pair_t *arg1 = (_ctl_oc_vf_pair_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_oc_vf_pair_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_vf_pair_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_oc_vf_pair_t *arg1 = (_ctl_oc_vf_pair_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_oc_vf_pair_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_vf_pair_t_Voltage_set(void * jarg1, double jarg2) {
  _ctl_oc_vf_pair_t *arg1 = (_ctl_oc_vf_pair_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_oc_vf_pair_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Voltage = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_vf_pair_t_Voltage_get(void * jarg1) {
  double jresult ;
  _ctl_oc_vf_pair_t *arg1 = (_ctl_oc_vf_pair_t *) 0 ;
  double result;
  
  arg1 = (_ctl_oc_vf_pair_t *)jarg1; 
  result = (double) ((arg1)->Voltage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_vf_pair_t_Frequency_set(void * jarg1, double jarg2) {
  _ctl_oc_vf_pair_t *arg1 = (_ctl_oc_vf_pair_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_oc_vf_pair_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Frequency = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_oc_vf_pair_t_Frequency_get(void * jarg1) {
  double jresult ;
  _ctl_oc_vf_pair_t *arg1 = (_ctl_oc_vf_pair_t *) 0 ;
  double result;
  
  arg1 = (_ctl_oc_vf_pair_t *)jarg1; 
  result = (double) ((arg1)->Frequency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_oc_vf_pair_t() {
  void * jresult ;
  _ctl_oc_vf_pair_t *result = 0 ;
  
  result = (_ctl_oc_vf_pair_t *)new _ctl_oc_vf_pair_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_oc_vf_pair_t(void * jarg1) {
  _ctl_oc_vf_pair_t *arg1 = (_ctl_oc_vf_pair_t *) 0 ;
  
  arg1 = (_ctl_oc_vf_pair_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_PSU_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_psu_info_t_bSupported_set(void * jarg1, unsigned int jarg2) {
  _ctl_psu_info_t *arg1 = (_ctl_psu_info_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_psu_info_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSupported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_psu_info_t_bSupported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_psu_info_t *arg1 = (_ctl_psu_info_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_psu_info_t *)jarg1; 
  result = (bool) ((arg1)->bSupported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_psu_info_t_psuType_set(void * jarg1, int jarg2) {
  _ctl_psu_info_t *arg1 = (_ctl_psu_info_t *) 0 ;
  ctl_psu_type_t arg2 ;
  
  arg1 = (_ctl_psu_info_t *)jarg1; 
  arg2 = (ctl_psu_type_t)jarg2; 
  if (arg1) (arg1)->psuType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_psu_info_t_psuType_get(void * jarg1) {
  int jresult ;
  _ctl_psu_info_t *arg1 = (_ctl_psu_info_t *) 0 ;
  ctl_psu_type_t result;
  
  arg1 = (_ctl_psu_info_t *)jarg1; 
  result = (ctl_psu_type_t) ((arg1)->psuType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_psu_info_t_energyCounter_set(void * jarg1, void * jarg2) {
  _ctl_psu_info_t *arg1 = (_ctl_psu_info_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_psu_info_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->energyCounter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_psu_info_t_energyCounter_get(void * jarg1) {
  void * jresult ;
  _ctl_psu_info_t *arg1 = (_ctl_psu_info_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_psu_info_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->energyCounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_psu_info_t_voltage_set(void * jarg1, void * jarg2) {
  _ctl_psu_info_t *arg1 = (_ctl_psu_info_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_psu_info_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->voltage = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_psu_info_t_voltage_get(void * jarg1) {
  void * jresult ;
  _ctl_psu_info_t *arg1 = (_ctl_psu_info_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_psu_info_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->voltage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_psu_info_t() {
  void * jresult ;
  _ctl_psu_info_t *result = 0 ;
  
  result = (_ctl_psu_info_t *)new _ctl_psu_info_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_psu_info_t(void * jarg1) {
  _ctl_psu_info_t *arg1 = (_ctl_psu_info_t *) 0 ;
  
  arg1 = (_ctl_psu_info_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_CTL_FAN_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_timeStamp_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->timeStamp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_timeStamp_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->timeStamp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuEnergyCounter_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->gpuEnergyCounter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuEnergyCounter_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->gpuEnergyCounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuVoltage_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->gpuVoltage = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuVoltage_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->gpuVoltage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuCurrentClockFrequency_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->gpuCurrentClockFrequency = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuCurrentClockFrequency_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->gpuCurrentClockFrequency);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuCurrentTemperature_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->gpuCurrentTemperature = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuCurrentTemperature_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->gpuCurrentTemperature);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_globalActivityCounter_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->globalActivityCounter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_globalActivityCounter_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->globalActivityCounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_renderComputeActivityCounter_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->renderComputeActivityCounter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_renderComputeActivityCounter_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->renderComputeActivityCounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_mediaActivityCounter_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->mediaActivityCounter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_mediaActivityCounter_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->mediaActivityCounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuPowerLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gpuPowerLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuPowerLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->gpuPowerLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuTemperatureLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gpuTemperatureLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuTemperatureLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->gpuTemperatureLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuCurrentLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gpuCurrentLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuCurrentLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->gpuCurrentLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuVoltageLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gpuVoltageLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuVoltageLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->gpuVoltageLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuUtilizationLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gpuUtilizationLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuUtilizationLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->gpuUtilizationLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramEnergyCounter_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramEnergyCounter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramEnergyCounter_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramEnergyCounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramVoltage_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramVoltage = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramVoltage_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramVoltage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramCurrentClockFrequency_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramCurrentClockFrequency = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramCurrentClockFrequency_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramCurrentClockFrequency);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramCurrentEffectiveFrequency_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramCurrentEffectiveFrequency = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramCurrentEffectiveFrequency_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramCurrentEffectiveFrequency);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramReadBandwidthCounter_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramReadBandwidthCounter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramReadBandwidthCounter_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramReadBandwidthCounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramWriteBandwidthCounter_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramWriteBandwidthCounter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramWriteBandwidthCounter_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramWriteBandwidthCounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramCurrentTemperature_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramCurrentTemperature = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramCurrentTemperature_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramCurrentTemperature);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramPowerLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vramPowerLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramPowerLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->vramPowerLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramTemperatureLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vramTemperatureLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramTemperatureLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->vramTemperatureLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramCurrentLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vramCurrentLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramCurrentLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->vramCurrentLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramVoltageLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vramVoltageLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramVoltageLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->vramVoltageLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramUtilizationLimited_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vramUtilizationLimited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramUtilizationLimited_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (bool) ((arg1)->vramUtilizationLimited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_totalCardEnergyCounter_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->totalCardEnergyCounter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_totalCardEnergyCounter_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->totalCardEnergyCounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_psu_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_psu_info_t *arg2 = (ctl_psu_info_t *) (ctl_psu_info_t *)0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_psu_info_t *)jarg2; 
  {
    size_t ii;
    ctl_psu_info_t *b = (ctl_psu_info_t *) arg1->psu;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ctl_psu_info_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_psu_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_psu_info_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_psu_info_t *)(ctl_psu_info_t *) ((arg1)->psu);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_fanSpeed_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) (ctl_oc_telemetry_item_t *)0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  {
    size_t ii;
    ctl_oc_telemetry_item_t *b = (ctl_oc_telemetry_item_t *) arg1->fanSpeed;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ctl_oc_telemetry_item_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_fanSpeed_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)(ctl_oc_telemetry_item_t *) ((arg1)->fanSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuVrTemp_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->gpuVrTemp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuVrTemp_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->gpuVrTemp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramVrTemp_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramVrTemp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramVrTemp_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramVrTemp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_saVrTemp_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->saVrTemp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_saVrTemp_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->saVrTemp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuEffectiveClock_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->gpuEffectiveClock = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuEffectiveClock_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->gpuEffectiveClock);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuOverVoltagePercent_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->gpuOverVoltagePercent = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuOverVoltagePercent_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->gpuOverVoltagePercent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuPowerPercent_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->gpuPowerPercent = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuPowerPercent_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->gpuPowerPercent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuTemperaturePercent_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->gpuTemperaturePercent = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_gpuTemperaturePercent_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->gpuTemperaturePercent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramReadBandwidth_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramReadBandwidth = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramReadBandwidth_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramReadBandwidth);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramWriteBandwidth_set(void * jarg1, void * jarg2) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *arg2 = (ctl_oc_telemetry_item_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  arg2 = (ctl_oc_telemetry_item_t *)jarg2; 
  if (arg1) (arg1)->vramWriteBandwidth = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_telemetry_t_vramWriteBandwidth_get(void * jarg1) {
  void * jresult ;
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  ctl_oc_telemetry_item_t *result = 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  result = (ctl_oc_telemetry_item_t *)& ((arg1)->vramWriteBandwidth);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_telemetry_t() {
  void * jresult ;
  _ctl_power_telemetry_t *result = 0 ;
  
  result = (_ctl_power_telemetry_t *)new _ctl_power_telemetry_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_telemetry_t(void * jarg1) {
  _ctl_power_telemetry_t *arg1 = (_ctl_power_telemetry_t *) 0 ;
  
  arg1 = (_ctl_power_telemetry_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_oc_properties_t *arg2 = (ctl_oc_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_oc_properties_t *)jarg2; 
  result = (ctl_result_t)ctlOverclockGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockWaiverSet(void * jarg1) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  result = (ctl_result_t)ctlOverclockWaiverSet(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuFrequencyOffsetGet(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockGpuFrequencyOffsetGet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuFrequencyOffsetSet(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockGpuFrequencyOffsetSet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuVoltageOffsetGet(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockGpuVoltageOffsetGet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuVoltageOffsetSet(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockGpuVoltageOffsetSet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuLockGet(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_oc_vf_pair_t *arg2 = (ctl_oc_vf_pair_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_oc_vf_pair_t *)jarg2; 
  result = (ctl_result_t)ctlOverclockGpuLockGet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuLockSet(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_oc_vf_pair_t arg2 ;
  ctl_oc_vf_pair_t *argp2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  argp2 = (ctl_oc_vf_pair_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ctl_oc_vf_pair_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ctl_result_t)ctlOverclockGpuLockSet(arg1,SWIG_STD_MOVE(arg2));
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockVramFrequencyOffsetGet(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockVramFrequencyOffsetGet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockVramFrequencyOffsetSet(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockVramFrequencyOffsetSet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockVramVoltageOffsetGet(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockVramVoltageOffsetGet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockVramVoltageOffsetSet(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockVramVoltageOffsetSet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockPowerLimitGet(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockPowerLimitGet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockPowerLimitSet(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockPowerLimitSet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockTemperatureLimitGet(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockTemperatureLimitGet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockTemperatureLimitSet(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockTemperatureLimitSet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPowerTelemetryGet(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_power_telemetry_t *arg2 = (ctl_power_telemetry_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_power_telemetry_t *)jarg2; 
  result = (ctl_result_t)ctlPowerTelemetryGet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockResetToDefault(void * jarg1) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  result = (ctl_result_t)ctlOverclockResetToDefault(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_voltage_frequency_point_t_Voltage_set(void * jarg1, unsigned int jarg2) {
  _ctl_voltage_frequency_point_t *arg1 = (_ctl_voltage_frequency_point_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_voltage_frequency_point_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Voltage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_voltage_frequency_point_t_Voltage_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_voltage_frequency_point_t *arg1 = (_ctl_voltage_frequency_point_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_voltage_frequency_point_t *)jarg1; 
  result = (uint32_t) ((arg1)->Voltage);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_voltage_frequency_point_t_Frequency_set(void * jarg1, unsigned int jarg2) {
  _ctl_voltage_frequency_point_t *arg1 = (_ctl_voltage_frequency_point_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_voltage_frequency_point_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Frequency = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_voltage_frequency_point_t_Frequency_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_voltage_frequency_point_t *arg1 = (_ctl_voltage_frequency_point_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_voltage_frequency_point_t *)jarg1; 
  result = (uint32_t) ((arg1)->Frequency);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_voltage_frequency_point_t() {
  void * jresult ;
  _ctl_voltage_frequency_point_t *result = 0 ;
  
  result = (_ctl_voltage_frequency_point_t *)new _ctl_voltage_frequency_point_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_voltage_frequency_point_t(void * jarg1) {
  _ctl_voltage_frequency_point_t *arg1 = (_ctl_voltage_frequency_point_t *) 0 ;
  
  arg1 = (_ctl_voltage_frequency_point_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuFrequencyOffsetGetV2(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockGpuFrequencyOffsetGetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuFrequencyOffsetSetV2(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockGpuFrequencyOffsetSetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuMaxVoltageOffsetGetV2(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockGpuMaxVoltageOffsetGetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockGpuMaxVoltageOffsetSetV2(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockGpuMaxVoltageOffsetSetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockVramMemSpeedLimitGetV2(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockVramMemSpeedLimitGetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockVramMemSpeedLimitSetV2(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockVramMemSpeedLimitSetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockPowerLimitGetV2(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockPowerLimitGetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockPowerLimitSetV2(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockPowerLimitSetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockTemperatureLimitGetV2(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlOverclockTemperatureLimitGetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockTemperatureLimitSetV2(void * jarg1, double jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  double arg2 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (double)jarg2; 
  result = (ctl_result_t)ctlOverclockTemperatureLimitSetV2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockReadVFCurve(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_vf_curve_type_t arg2 ;
  ctl_vf_curve_details_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  ctl_voltage_frequency_point_t *arg5 = (ctl_voltage_frequency_point_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_vf_curve_type_t)jarg2; 
  arg3 = (ctl_vf_curve_details_t)jarg3; 
  arg4 = (uint32_t *)jarg4; 
  arg5 = (ctl_voltage_frequency_point_t *)jarg5; 
  result = (ctl_result_t)ctlOverclockReadVFCurve(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlOverclockWriteCustomVFCurve(void * jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t arg2 ;
  ctl_voltage_frequency_point_t *arg3 = (ctl_voltage_frequency_point_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (ctl_voltage_frequency_point_t *)jarg3; 
  result = (ctl_result_t)ctlOverclockWriteCustomVFCurve(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_domain_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->domain = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_domain_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  result = (uint32_t) ((arg1)->domain);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_bus_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bus = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_bus_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  result = (uint32_t) ((arg1)->bus);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_device_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->device = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_device_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  result = (uint32_t) ((arg1)->device);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_function_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->function = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_address_t_function_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  result = (uint32_t) ((arg1)->function);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pci_address_t() {
  void * jresult ;
  _ctl_pci_address_t *result = 0 ;
  
  result = (_ctl_pci_address_t *)new _ctl_pci_address_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pci_address_t(void * jarg1) {
  _ctl_pci_address_t *arg1 = (_ctl_pci_address_t *) 0 ;
  
  arg1 = (_ctl_pci_address_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_gen_set(void * jarg1, int jarg2) {
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->gen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_gen_get(void * jarg1) {
  int jresult ;
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  result = (int32_t) ((arg1)->gen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_width_set(void * jarg1, int jarg2) {
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_width_get(void * jarg1) {
  int jresult ;
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  result = (int32_t) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_maxBandwidth_set(void * jarg1, long long jarg2) {
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->maxBandwidth = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_speed_t_maxBandwidth_get(void * jarg1) {
  long long jresult ;
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  int64_t result;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  result = (int64_t) ((arg1)->maxBandwidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pci_speed_t() {
  void * jresult ;
  _ctl_pci_speed_t *result = 0 ;
  
  result = (_ctl_pci_speed_t *)new _ctl_pci_speed_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pci_speed_t(void * jarg1) {
  _ctl_pci_speed_t *arg1 = (_ctl_pci_speed_t *) 0 ;
  
  arg1 = (_ctl_pci_speed_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_address_set(void * jarg1, void * jarg2) {
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  ctl_pci_address_t *arg2 = (ctl_pci_address_t *) 0 ;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  arg2 = (ctl_pci_address_t *)jarg2; 
  if (arg1) (arg1)->address = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_address_get(void * jarg1) {
  void * jresult ;
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  ctl_pci_address_t *result = 0 ;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  result = (ctl_pci_address_t *)& ((arg1)->address);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_maxSpeed_set(void * jarg1, void * jarg2) {
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  ctl_pci_speed_t *arg2 = (ctl_pci_speed_t *) 0 ;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  arg2 = (ctl_pci_speed_t *)jarg2; 
  if (arg1) (arg1)->maxSpeed = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_maxSpeed_get(void * jarg1) {
  void * jresult ;
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  ctl_pci_speed_t *result = 0 ;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  result = (ctl_pci_speed_t *)& ((arg1)->maxSpeed);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_resizable_bar_supported_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->resizable_bar_supported = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_resizable_bar_supported_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  result = (bool) ((arg1)->resizable_bar_supported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_resizable_bar_enabled_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->resizable_bar_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_properties_t_resizable_bar_enabled_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  result = (bool) ((arg1)->resizable_bar_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pci_properties_t() {
  void * jresult ;
  _ctl_pci_properties_t *result = 0 ;
  
  result = (_ctl_pci_properties_t *)new _ctl_pci_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pci_properties_t(void * jarg1) {
  _ctl_pci_properties_t *arg1 = (_ctl_pci_properties_t *) 0 ;
  
  arg1 = (_ctl_pci_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_state_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_pci_state_t *arg1 = (_ctl_pci_state_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_pci_state_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_state_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_pci_state_t *arg1 = (_ctl_pci_state_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_pci_state_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_state_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_pci_state_t *arg1 = (_ctl_pci_state_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_pci_state_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_state_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_pci_state_t *arg1 = (_ctl_pci_state_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_pci_state_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_state_t_speed_set(void * jarg1, void * jarg2) {
  _ctl_pci_state_t *arg1 = (_ctl_pci_state_t *) 0 ;
  ctl_pci_speed_t *arg2 = (ctl_pci_speed_t *) 0 ;
  
  arg1 = (_ctl_pci_state_t *)jarg1; 
  arg2 = (ctl_pci_speed_t *)jarg2; 
  if (arg1) (arg1)->speed = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_pci_state_t_speed_get(void * jarg1) {
  void * jresult ;
  _ctl_pci_state_t *arg1 = (_ctl_pci_state_t *) 0 ;
  ctl_pci_speed_t *result = 0 ;
  
  arg1 = (_ctl_pci_state_t *)jarg1; 
  result = (ctl_pci_speed_t *)& ((arg1)->speed);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_pci_state_t() {
  void * jresult ;
  _ctl_pci_state_t *result = 0 ;
  
  result = (_ctl_pci_state_t *)new _ctl_pci_state_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_pci_state_t(void * jarg1) {
  _ctl_pci_state_t *arg1 = (_ctl_pci_state_t *) 0 ;
  
  arg1 = (_ctl_pci_state_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPciGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_pci_properties_t *arg2 = (ctl_pci_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_pci_properties_t *)jarg2; 
  result = (ctl_result_t)ctlPciGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPciGetState(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_pci_state_t *arg2 = (ctl_pci_state_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_pci_state_t *)jarg2; 
  result = (ctl_result_t)ctlPciGetState(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_canControl_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->canControl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_canControl_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  result = (bool) ((arg1)->canControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_defaultLimit_set(void * jarg1, int jarg2) {
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->defaultLimit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_defaultLimit_get(void * jarg1) {
  int jresult ;
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  result = (int32_t) ((arg1)->defaultLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_minLimit_set(void * jarg1, int jarg2) {
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->minLimit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_minLimit_get(void * jarg1) {
  int jresult ;
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  result = (int32_t) ((arg1)->minLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_maxLimit_set(void * jarg1, int jarg2) {
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->maxLimit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_properties_t_maxLimit_get(void * jarg1) {
  int jresult ;
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  result = (int32_t) ((arg1)->maxLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_properties_t() {
  void * jresult ;
  _ctl_power_properties_t *result = 0 ;
  
  result = (_ctl_power_properties_t *)new _ctl_power_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_properties_t(void * jarg1) {
  _ctl_power_properties_t *arg1 = (_ctl_power_properties_t *) 0 ;
  
  arg1 = (_ctl_power_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_energy_counter_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_energy_counter_t *arg1 = (_ctl_power_energy_counter_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_power_energy_counter_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_energy_counter_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_energy_counter_t *arg1 = (_ctl_power_energy_counter_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_power_energy_counter_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_energy_counter_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_energy_counter_t *arg1 = (_ctl_power_energy_counter_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_energy_counter_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_energy_counter_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_energy_counter_t *arg1 = (_ctl_power_energy_counter_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_energy_counter_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_energy_counter_t_energy_set(void * jarg1, unsigned long long jarg2) {
  _ctl_power_energy_counter_t *arg1 = (_ctl_power_energy_counter_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_power_energy_counter_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->energy = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_energy_counter_t_energy_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_power_energy_counter_t *arg1 = (_ctl_power_energy_counter_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_power_energy_counter_t *)jarg1; 
  result = (uint64_t) ((arg1)->energy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_energy_counter_t_timestamp_set(void * jarg1, unsigned long long jarg2) {
  _ctl_power_energy_counter_t *arg1 = (_ctl_power_energy_counter_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (_ctl_power_energy_counter_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_energy_counter_t_timestamp_get(void * jarg1) {
  unsigned long long jresult ;
  _ctl_power_energy_counter_t *arg1 = (_ctl_power_energy_counter_t *) 0 ;
  uint64_t result;
  
  arg1 = (_ctl_power_energy_counter_t *)jarg1; 
  result = (uint64_t) ((arg1)->timestamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_energy_counter_t() {
  void * jresult ;
  _ctl_power_energy_counter_t *result = 0 ;
  
  result = (_ctl_power_energy_counter_t *)new _ctl_power_energy_counter_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_energy_counter_t(void * jarg1) {
  _ctl_power_energy_counter_t *arg1 = (_ctl_power_energy_counter_t *) 0 ;
  
  arg1 = (_ctl_power_energy_counter_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_sustained_limit_t_enabled_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_sustained_limit_t *arg1 = (_ctl_power_sustained_limit_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_sustained_limit_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_sustained_limit_t_enabled_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_sustained_limit_t *arg1 = (_ctl_power_sustained_limit_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_sustained_limit_t *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_sustained_limit_t_power_set(void * jarg1, int jarg2) {
  _ctl_power_sustained_limit_t *arg1 = (_ctl_power_sustained_limit_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_power_sustained_limit_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->power = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_sustained_limit_t_power_get(void * jarg1) {
  int jresult ;
  _ctl_power_sustained_limit_t *arg1 = (_ctl_power_sustained_limit_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_power_sustained_limit_t *)jarg1; 
  result = (int32_t) ((arg1)->power);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_sustained_limit_t_interval_set(void * jarg1, int jarg2) {
  _ctl_power_sustained_limit_t *arg1 = (_ctl_power_sustained_limit_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_power_sustained_limit_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->interval = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_sustained_limit_t_interval_get(void * jarg1) {
  int jresult ;
  _ctl_power_sustained_limit_t *arg1 = (_ctl_power_sustained_limit_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_power_sustained_limit_t *)jarg1; 
  result = (int32_t) ((arg1)->interval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_sustained_limit_t() {
  void * jresult ;
  _ctl_power_sustained_limit_t *result = 0 ;
  
  result = (_ctl_power_sustained_limit_t *)new _ctl_power_sustained_limit_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_sustained_limit_t(void * jarg1) {
  _ctl_power_sustained_limit_t *arg1 = (_ctl_power_sustained_limit_t *) 0 ;
  
  arg1 = (_ctl_power_sustained_limit_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_burst_limit_t_enabled_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_burst_limit_t *arg1 = (_ctl_power_burst_limit_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_power_burst_limit_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_burst_limit_t_enabled_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_burst_limit_t *arg1 = (_ctl_power_burst_limit_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_power_burst_limit_t *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_burst_limit_t_power_set(void * jarg1, int jarg2) {
  _ctl_power_burst_limit_t *arg1 = (_ctl_power_burst_limit_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_power_burst_limit_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->power = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_burst_limit_t_power_get(void * jarg1) {
  int jresult ;
  _ctl_power_burst_limit_t *arg1 = (_ctl_power_burst_limit_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_power_burst_limit_t *)jarg1; 
  result = (int32_t) ((arg1)->power);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_burst_limit_t() {
  void * jresult ;
  _ctl_power_burst_limit_t *result = 0 ;
  
  result = (_ctl_power_burst_limit_t *)new _ctl_power_burst_limit_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_burst_limit_t(void * jarg1) {
  _ctl_power_burst_limit_t *arg1 = (_ctl_power_burst_limit_t *) 0 ;
  
  arg1 = (_ctl_power_burst_limit_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_peak_limit_t_powerAC_set(void * jarg1, int jarg2) {
  _ctl_power_peak_limit_t *arg1 = (_ctl_power_peak_limit_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_power_peak_limit_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->powerAC = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_peak_limit_t_powerAC_get(void * jarg1) {
  int jresult ;
  _ctl_power_peak_limit_t *arg1 = (_ctl_power_peak_limit_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_power_peak_limit_t *)jarg1; 
  result = (int32_t) ((arg1)->powerAC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_peak_limit_t_powerDC_set(void * jarg1, int jarg2) {
  _ctl_power_peak_limit_t *arg1 = (_ctl_power_peak_limit_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (_ctl_power_peak_limit_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->powerDC = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_peak_limit_t_powerDC_get(void * jarg1) {
  int jresult ;
  _ctl_power_peak_limit_t *arg1 = (_ctl_power_peak_limit_t *) 0 ;
  int32_t result;
  
  arg1 = (_ctl_power_peak_limit_t *)jarg1; 
  result = (int32_t) ((arg1)->powerDC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_peak_limit_t() {
  void * jresult ;
  _ctl_power_peak_limit_t *result = 0 ;
  
  result = (_ctl_power_peak_limit_t *)new _ctl_power_peak_limit_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_peak_limit_t(void * jarg1) {
  _ctl_power_peak_limit_t *arg1 = (_ctl_power_peak_limit_t *) 0 ;
  
  arg1 = (_ctl_power_peak_limit_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_sustainedPowerLimit_set(void * jarg1, void * jarg2) {
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  ctl_power_sustained_limit_t *arg2 = (ctl_power_sustained_limit_t *) 0 ;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  arg2 = (ctl_power_sustained_limit_t *)jarg2; 
  if (arg1) (arg1)->sustainedPowerLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_sustainedPowerLimit_get(void * jarg1) {
  void * jresult ;
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  ctl_power_sustained_limit_t *result = 0 ;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  result = (ctl_power_sustained_limit_t *)& ((arg1)->sustainedPowerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_burstPowerLimit_set(void * jarg1, void * jarg2) {
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  ctl_power_burst_limit_t *arg2 = (ctl_power_burst_limit_t *) 0 ;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  arg2 = (ctl_power_burst_limit_t *)jarg2; 
  if (arg1) (arg1)->burstPowerLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_burstPowerLimit_get(void * jarg1) {
  void * jresult ;
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  ctl_power_burst_limit_t *result = 0 ;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  result = (ctl_power_burst_limit_t *)& ((arg1)->burstPowerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_peakPowerLimits_set(void * jarg1, void * jarg2) {
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  ctl_power_peak_limit_t *arg2 = (ctl_power_peak_limit_t *) 0 ;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  arg2 = (ctl_power_peak_limit_t *)jarg2; 
  if (arg1) (arg1)->peakPowerLimits = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_ctl_power_limits_t_peakPowerLimits_get(void * jarg1) {
  void * jresult ;
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  ctl_power_peak_limit_t *result = 0 ;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  result = (ctl_power_peak_limit_t *)& ((arg1)->peakPowerLimits);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_power_limits_t() {
  void * jresult ;
  _ctl_power_limits_t *result = 0 ;
  
  result = (_ctl_power_limits_t *)new _ctl_power_limits_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_power_limits_t(void * jarg1) {
  _ctl_power_limits_t *arg1 = (_ctl_power_limits_t *) 0 ;
  
  arg1 = (_ctl_power_limits_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_enable_set(void * jarg1, unsigned int jarg2) {
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  bool arg2 ;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_enable_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  bool result;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  result = (bool) ((arg1)->enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_threshold_set(void * jarg1, double jarg2) {
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_threshold_get(void * jarg1) {
  double jresult ;
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  double result;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  result = (double) ((arg1)->threshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_processId_set(void * jarg1, unsigned int jarg2) {
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->processId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_energy_threshold_t_processId_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  result = (uint32_t) ((arg1)->processId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_energy_threshold_t() {
  void * jresult ;
  _ctl_energy_threshold_t *result = 0 ;
  
  result = (_ctl_energy_threshold_t *)new _ctl_energy_threshold_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_energy_threshold_t(void * jarg1) {
  _ctl_energy_threshold_t *arg1 = (_ctl_energy_threshold_t *) 0 ;
  
  arg1 = (_ctl_energy_threshold_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumPowerDomains(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_pwr_handle_t *arg3 = (ctl_pwr_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_pwr_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumPowerDomains(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPowerGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_pwr_handle_t arg1 = (ctl_pwr_handle_t) 0 ;
  ctl_power_properties_t *arg2 = (ctl_power_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_pwr_handle_t)jarg1; 
  arg2 = (ctl_power_properties_t *)jarg2; 
  result = (ctl_result_t)ctlPowerGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPowerGetEnergyCounter(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_pwr_handle_t arg1 = (ctl_pwr_handle_t) 0 ;
  ctl_power_energy_counter_t *arg2 = (ctl_power_energy_counter_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_pwr_handle_t)jarg1; 
  arg2 = (ctl_power_energy_counter_t *)jarg2; 
  result = (ctl_result_t)ctlPowerGetEnergyCounter(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPowerGetLimits(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_pwr_handle_t arg1 = (ctl_pwr_handle_t) 0 ;
  ctl_power_limits_t *arg2 = (ctl_power_limits_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_pwr_handle_t)jarg1; 
  arg2 = (ctl_power_limits_t *)jarg2; 
  result = (ctl_result_t)ctlPowerGetLimits(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlPowerSetLimits(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_pwr_handle_t arg1 = (ctl_pwr_handle_t) 0 ;
  ctl_power_limits_t *arg2 = (ctl_power_limits_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_pwr_handle_t)jarg1; 
  arg2 = (ctl_power_limits_t *)jarg2; 
  result = (ctl_result_t)ctlPowerSetLimits(arg1,(_ctl_power_limits_t const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_temp_properties_t_Size_set(void * jarg1, unsigned int jarg2) {
  _ctl_temp_properties_t *arg1 = (_ctl_temp_properties_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (_ctl_temp_properties_t *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGCLWrapper_ctl_temp_properties_t_Size_get(void * jarg1) {
  unsigned int jresult ;
  _ctl_temp_properties_t *arg1 = (_ctl_temp_properties_t *) 0 ;
  uint32_t result;
  
  arg1 = (_ctl_temp_properties_t *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_temp_properties_t_Version_set(void * jarg1, unsigned char jarg2) {
  _ctl_temp_properties_t *arg1 = (_ctl_temp_properties_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (_ctl_temp_properties_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IGCLWrapper_ctl_temp_properties_t_Version_get(void * jarg1) {
  unsigned char jresult ;
  _ctl_temp_properties_t *arg1 = (_ctl_temp_properties_t *) 0 ;
  uint8_t result;
  
  arg1 = (_ctl_temp_properties_t *)jarg1; 
  result = (uint8_t) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_temp_properties_t_type_set(void * jarg1, int jarg2) {
  _ctl_temp_properties_t *arg1 = (_ctl_temp_properties_t *) 0 ;
  ctl_temp_sensors_t arg2 ;
  
  arg1 = (_ctl_temp_properties_t *)jarg1; 
  arg2 = (ctl_temp_sensors_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctl_temp_properties_t_type_get(void * jarg1) {
  int jresult ;
  _ctl_temp_properties_t *arg1 = (_ctl_temp_properties_t *) 0 ;
  ctl_temp_sensors_t result;
  
  arg1 = (_ctl_temp_properties_t *)jarg1; 
  result = (ctl_temp_sensors_t) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_ctl_temp_properties_t_maxTemperature_set(void * jarg1, double jarg2) {
  _ctl_temp_properties_t *arg1 = (_ctl_temp_properties_t *) 0 ;
  double arg2 ;
  
  arg1 = (_ctl_temp_properties_t *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->maxTemperature = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGCLWrapper_ctl_temp_properties_t_maxTemperature_get(void * jarg1) {
  double jresult ;
  _ctl_temp_properties_t *arg1 = (_ctl_temp_properties_t *) 0 ;
  double result;
  
  arg1 = (_ctl_temp_properties_t *)jarg1; 
  result = (double) ((arg1)->maxTemperature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGCLWrapper_new_ctl_temp_properties_t() {
  void * jresult ;
  _ctl_temp_properties_t *result = 0 ;
  
  result = (_ctl_temp_properties_t *)new _ctl_temp_properties_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_delete_ctl_temp_properties_t(void * jarg1) {
  _ctl_temp_properties_t *arg1 = (_ctl_temp_properties_t *) 0 ;
  
  arg1 = (_ctl_temp_properties_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlEnumTemperatureSensors(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  ctl_temp_handle_t *arg3 = (ctl_temp_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (ctl_temp_handle_t *)jarg3; 
  result = (ctl_result_t)ctlEnumTemperatureSensors(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlTemperatureGetProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_temp_handle_t arg1 = (ctl_temp_handle_t) 0 ;
  ctl_temp_properties_t *arg2 = (ctl_temp_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_temp_handle_t)jarg1; 
  arg2 = (ctl_temp_properties_t *)jarg2; 
  result = (ctl_result_t)ctlTemperatureGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_ctlTemperatureGetState(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_temp_handle_t arg1 = (ctl_temp_handle_t) 0 ;
  double *arg2 = (double *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_temp_handle_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ctl_result_t)ctlTemperatureGetState(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_InitDefault(void * jarg1) {
  int jresult ;
  ctl_api_handle_t *arg1 = (ctl_api_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_api_handle_t *)jarg1; 
  result = (ctl_result_t)IGCL_InitDefault(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_EnumerateAdapters(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_api_handle_t arg1 = (ctl_api_handle_t) 0 ;
  igcl_uint32 *arg2 = (igcl_uint32 *) 0 ;
  ctl_device_adapter_handle_t *arg3 = (ctl_device_adapter_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_api_handle_t)jarg1; 
  arg2 = (igcl_uint32 *)jarg2; 
  arg3 = (ctl_device_adapter_handle_t *)jarg3; 
  result = (ctl_result_t)IGCL_EnumerateAdapters(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_EnumerateDisplays(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  igcl_uint32 *arg2 = (igcl_uint32 *) 0 ;
  ctl_display_output_handle_t *arg3 = (ctl_display_output_handle_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (igcl_uint32 *)jarg2; 
  arg3 = (ctl_display_output_handle_t *)jarg3; 
  result = (ctl_result_t)IGCL_EnumerateDisplays(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_GetDisplayProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_display_properties_t *arg2 = (ctl_display_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_display_properties_t *)jarg2; 
  result = (ctl_result_t)IGCL_GetDisplayProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_GetAdapterProperties(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_device_adapter_properties_t *arg2 = (ctl_device_adapter_properties_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_device_adapter_properties_t *)jarg2; 
  result = (ctl_result_t)IGCL_GetAdapterProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_I2CAccess(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_i2c_access_args_t *arg2 = (ctl_i2c_access_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_i2c_access_args_t *)jarg2; 
  result = (ctl_result_t)IGCL_I2CAccess(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_AUXAccess(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_aux_access_args_t *arg2 = (ctl_aux_access_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_aux_access_args_t *)jarg2; 
  result = (ctl_result_t)IGCL_AUXAccess(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_GetPanelDescriptor(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_panel_descriptor_access_args_t *arg2 = (ctl_panel_descriptor_access_args_t *) 0 ;
  uint8_t **arg3 = (uint8_t **) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_panel_descriptor_access_args_t *)jarg2; 
  arg3 = (uint8_t **)jarg3; 
  result = (ctl_result_t)IGCL_GetPanelDescriptor(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_GetSetDCE(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_display_output_handle_t arg1 = (ctl_display_output_handle_t) 0 ;
  ctl_dce_args_t *arg2 = (ctl_dce_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_display_output_handle_t)jarg1; 
  arg2 = (ctl_dce_args_t *)jarg2; 
  result = (ctl_result_t)IGCL_GetSetDCE(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_EnumDisplays(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  igcl_uint32 *arg2 = (igcl_uint32 *) 0 ;
  ctl_display_output_handle_t **arg3 = (ctl_display_output_handle_t **) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (igcl_uint32 *)jarg2; 
  arg3 = (ctl_display_output_handle_t **)jarg3; 
  result = (ctl_result_t)IGCL_EnumDisplays(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_Close(void * jarg1) {
  int jresult ;
  ctl_api_handle_t arg1 = (ctl_api_handle_t) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_api_handle_t)jarg1; 
  result = (ctl_result_t)IGCL_Close(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGCLWrapper_IGCL_FreeBuffer(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  IGCL_FreeBuffer(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGCLWrapper_IGCL_WaitForDisplayChange(void * jarg1, void * jarg2) {
  int jresult ;
  ctl_device_adapter_handle_t arg1 = (ctl_device_adapter_handle_t) 0 ;
  ctl_wait_property_change_args_t *arg2 = (ctl_wait_property_change_args_t *) 0 ;
  ctl_result_t result;
  
  arg1 = (ctl_device_adapter_handle_t)jarg1; 
  arg2 = (ctl_wait_property_change_args_t *)jarg2; 
  result = (ctl_result_t)IGCL_WaitForDisplayChange(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

